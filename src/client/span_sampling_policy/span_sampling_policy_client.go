// Code generated by go-swagger; DO NOT EDIT.

package span_sampling_policy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new span sampling policy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for span sampling policy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSpanSamplingPolicy(params *CreateSpanSamplingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSpanSamplingPolicyOK, error)

	DeleteSpanSamplingPolicy(params *DeleteSpanSamplingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSpanSamplingPolicyOK, error)

	GetAllDeletedSpanSamplingPolicy(params *GetAllDeletedSpanSamplingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDeletedSpanSamplingPolicyOK, error)

	GetAllSpanSamplingPolicy(params *GetAllSpanSamplingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSpanSamplingPolicyOK, error)

	GetSpanSamplingPolicy(params *GetSpanSamplingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSpanSamplingPolicyOK, error)

	GetSpanSamplingPolicyHistory(params *GetSpanSamplingPolicyHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSpanSamplingPolicyHistoryOK, error)

	GetSpanSamplingPolicyVersion(params *GetSpanSamplingPolicyVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSpanSamplingPolicyVersionOK, error)

	UndeleteSpanSamplingPolicy(params *UndeleteSpanSamplingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UndeleteSpanSamplingPolicyOK, error)

	UpdateSpanSamplingPolicy(params *UpdateSpanSamplingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSpanSamplingPolicyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateSpanSamplingPolicy creates a span sampling policy
*/
func (a *Client) CreateSpanSamplingPolicy(params *CreateSpanSamplingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSpanSamplingPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSpanSamplingPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSpanSamplingPolicy",
		Method:             "POST",
		PathPattern:        "/api/v2/spansamplingpolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSpanSamplingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSpanSamplingPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSpanSamplingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSpanSamplingPolicy deletes a specific span sampling policy
*/
func (a *Client) DeleteSpanSamplingPolicy(params *DeleteSpanSamplingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSpanSamplingPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSpanSamplingPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSpanSamplingPolicy",
		Method:             "DELETE",
		PathPattern:        "/api/v2/spansamplingpolicy/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSpanSamplingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSpanSamplingPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSpanSamplingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllDeletedSpanSamplingPolicy gets all deleted sampling policies for a customer
*/
func (a *Client) GetAllDeletedSpanSamplingPolicy(params *GetAllDeletedSpanSamplingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDeletedSpanSamplingPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDeletedSpanSamplingPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllDeletedSpanSamplingPolicy",
		Method:             "GET",
		PathPattern:        "/api/v2/spansamplingpolicy/deleted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllDeletedSpanSamplingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllDeletedSpanSamplingPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllDeletedSpanSamplingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSpanSamplingPolicy gets all sampling policies for a customer
*/
func (a *Client) GetAllSpanSamplingPolicy(params *GetAllSpanSamplingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSpanSamplingPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSpanSamplingPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSpanSamplingPolicy",
		Method:             "GET",
		PathPattern:        "/api/v2/spansamplingpolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSpanSamplingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSpanSamplingPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSpanSamplingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSpanSamplingPolicy gets a specific span sampling policy
*/
func (a *Client) GetSpanSamplingPolicy(params *GetSpanSamplingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSpanSamplingPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpanSamplingPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSpanSamplingPolicy",
		Method:             "GET",
		PathPattern:        "/api/v2/spansamplingpolicy/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSpanSamplingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSpanSamplingPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSpanSamplingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSpanSamplingPolicyHistory gets the version history of a specific sampling policy
*/
func (a *Client) GetSpanSamplingPolicyHistory(params *GetSpanSamplingPolicyHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSpanSamplingPolicyHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpanSamplingPolicyHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSpanSamplingPolicyHistory",
		Method:             "GET",
		PathPattern:        "/api/v2/spansamplingpolicy/{id}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSpanSamplingPolicyHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSpanSamplingPolicyHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSpanSamplingPolicyHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSpanSamplingPolicyVersion gets a specific historical version of a specific sampling policy
*/
func (a *Client) GetSpanSamplingPolicyVersion(params *GetSpanSamplingPolicyVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSpanSamplingPolicyVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpanSamplingPolicyVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSpanSamplingPolicyVersion",
		Method:             "GET",
		PathPattern:        "/api/v2/spansamplingpolicy/{id}/history/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSpanSamplingPolicyVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSpanSamplingPolicyVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSpanSamplingPolicyVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UndeleteSpanSamplingPolicy restores a deleted span sampling policy
*/
func (a *Client) UndeleteSpanSamplingPolicy(params *UndeleteSpanSamplingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UndeleteSpanSamplingPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUndeleteSpanSamplingPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "undeleteSpanSamplingPolicy",
		Method:             "POST",
		PathPattern:        "/api/v2/spansamplingpolicy/{id}/undelete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UndeleteSpanSamplingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UndeleteSpanSamplingPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for undeleteSpanSamplingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSpanSamplingPolicy updates a specific span sampling policy
*/
func (a *Client) UpdateSpanSamplingPolicy(params *UpdateSpanSamplingPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSpanSamplingPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSpanSamplingPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSpanSamplingPolicy",
		Method:             "PUT",
		PathPattern:        "/api/v2/spansamplingpolicy/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSpanSamplingPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSpanSamplingPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSpanSamplingPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
