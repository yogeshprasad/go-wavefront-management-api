// Code generated by go-swagger; DO NOT EDIT.

package ingestion_spy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSpyOnIDCreationsParams creates a new SpyOnIDCreationsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSpyOnIDCreationsParams() *SpyOnIDCreationsParams {
	return &SpyOnIDCreationsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSpyOnIDCreationsParamsWithTimeout creates a new SpyOnIDCreationsParams object
// with the ability to set a timeout on a request.
func NewSpyOnIDCreationsParamsWithTimeout(timeout time.Duration) *SpyOnIDCreationsParams {
	return &SpyOnIDCreationsParams{
		timeout: timeout,
	}
}

// NewSpyOnIDCreationsParamsWithContext creates a new SpyOnIDCreationsParams object
// with the ability to set a context for a request.
func NewSpyOnIDCreationsParamsWithContext(ctx context.Context) *SpyOnIDCreationsParams {
	return &SpyOnIDCreationsParams{
		Context: ctx,
	}
}

// NewSpyOnIDCreationsParamsWithHTTPClient creates a new SpyOnIDCreationsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSpyOnIDCreationsParamsWithHTTPClient(client *http.Client) *SpyOnIDCreationsParams {
	return &SpyOnIDCreationsParams{
		HTTPClient: client,
	}
}

/*
SpyOnIDCreationsParams contains all the parameters to send to the API endpoint

	for the spy on Id creations operation.

	Typically these are written to a http.Request.
*/
type SpyOnIDCreationsParams struct {

	/* Body.

	   Case-sensitive prefix for the items that you are interested in.
	*/
	Body string

	/* Sampling.

	   goes from 0 to 1 with 0.01 being 1%

	   Format: double
	   Default: 0.01
	*/
	Sampling *float64

	/* Type.

	     Type of new items you want to see ID assignments for:
	METRIC - Metric names
	SPAN - Span names
	HOST - Source names
	STRING - Point tags or span tags, represented as a single string containing a unique key-value pair, e.g. env=prod, env=dev, etc.
	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the spy on Id creations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SpyOnIDCreationsParams) WithDefaults() *SpyOnIDCreationsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the spy on Id creations params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SpyOnIDCreationsParams) SetDefaults() {
	var (
		samplingDefault = float64(0.01)
	)

	val := SpyOnIDCreationsParams{
		Sampling: &samplingDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the spy on Id creations params
func (o *SpyOnIDCreationsParams) WithTimeout(timeout time.Duration) *SpyOnIDCreationsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the spy on Id creations params
func (o *SpyOnIDCreationsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the spy on Id creations params
func (o *SpyOnIDCreationsParams) WithContext(ctx context.Context) *SpyOnIDCreationsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the spy on Id creations params
func (o *SpyOnIDCreationsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the spy on Id creations params
func (o *SpyOnIDCreationsParams) WithHTTPClient(client *http.Client) *SpyOnIDCreationsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the spy on Id creations params
func (o *SpyOnIDCreationsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the spy on Id creations params
func (o *SpyOnIDCreationsParams) WithBody(body string) *SpyOnIDCreationsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the spy on Id creations params
func (o *SpyOnIDCreationsParams) SetBody(body string) {
	o.Body = body
}

// WithSampling adds the sampling to the spy on Id creations params
func (o *SpyOnIDCreationsParams) WithSampling(sampling *float64) *SpyOnIDCreationsParams {
	o.SetSampling(sampling)
	return o
}

// SetSampling adds the sampling to the spy on Id creations params
func (o *SpyOnIDCreationsParams) SetSampling(sampling *float64) {
	o.Sampling = sampling
}

// WithType adds the typeVar to the spy on Id creations params
func (o *SpyOnIDCreationsParams) WithType(typeVar *string) *SpyOnIDCreationsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the spy on Id creations params
func (o *SpyOnIDCreationsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *SpyOnIDCreationsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.Sampling != nil {

		// query param sampling
		var qrSampling float64

		if o.Sampling != nil {
			qrSampling = *o.Sampling
		}
		qSampling := swag.FormatFloat64(qrSampling)
		if qSampling != "" {

			if err := r.SetQueryParam("sampling", qSampling); err != nil {
				return err
			}
		}
	}

	if o.Type != nil {

		// query param type
		var qrType string

		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {

			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
