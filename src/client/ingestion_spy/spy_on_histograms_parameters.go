// Code generated by go-swagger; DO NOT EDIT.

package ingestion_spy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSpyOnHistogramsParams creates a new SpyOnHistogramsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSpyOnHistogramsParams() *SpyOnHistogramsParams {
	return &SpyOnHistogramsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSpyOnHistogramsParamsWithTimeout creates a new SpyOnHistogramsParams object
// with the ability to set a timeout on a request.
func NewSpyOnHistogramsParamsWithTimeout(timeout time.Duration) *SpyOnHistogramsParams {
	return &SpyOnHistogramsParams{
		timeout: timeout,
	}
}

// NewSpyOnHistogramsParamsWithContext creates a new SpyOnHistogramsParams object
// with the ability to set a context for a request.
func NewSpyOnHistogramsParamsWithContext(ctx context.Context) *SpyOnHistogramsParams {
	return &SpyOnHistogramsParams{
		Context: ctx,
	}
}

// NewSpyOnHistogramsParamsWithHTTPClient creates a new SpyOnHistogramsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSpyOnHistogramsParamsWithHTTPClient(client *http.Client) *SpyOnHistogramsParams {
	return &SpyOnHistogramsParams{
		HTTPClient: client,
	}
}

/*
SpyOnHistogramsParams contains all the parameters to send to the API endpoint

	for the spy on histograms operation.

	Typically these are written to a http.Request.
*/
type SpyOnHistogramsParams struct {

	/* Histogram.

	     List a histogram only if its name starts with the specified case-sensitive prefix.
	E.g., histogram=orderShirt matches histograms named orderShirt and orderShirts, but not OrderShirts.
	*/
	Histogram *string

	/* HistogramTagKey.

	    List a histogram only if it has the specified tag key. Add this parameter multiple times to specify multiple tags, e.g. histogramTagKey=cluster&histogramTagKey=shard
	put cluster in the first line, put shard in the second line as values
	*/
	HistogramTagKey []string

	/* Host.

	   List a histogram only if the name of its source starts with the specified case-sensitive prefix.
	*/
	Host *string

	// Sampling.
	//
	// Format: double
	// Default: 0.01
	Sampling *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the spy on histograms params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SpyOnHistogramsParams) WithDefaults() *SpyOnHistogramsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the spy on histograms params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SpyOnHistogramsParams) SetDefaults() {
	var (
		samplingDefault = float64(0.01)
	)

	val := SpyOnHistogramsParams{
		Sampling: &samplingDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the spy on histograms params
func (o *SpyOnHistogramsParams) WithTimeout(timeout time.Duration) *SpyOnHistogramsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the spy on histograms params
func (o *SpyOnHistogramsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the spy on histograms params
func (o *SpyOnHistogramsParams) WithContext(ctx context.Context) *SpyOnHistogramsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the spy on histograms params
func (o *SpyOnHistogramsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the spy on histograms params
func (o *SpyOnHistogramsParams) WithHTTPClient(client *http.Client) *SpyOnHistogramsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the spy on histograms params
func (o *SpyOnHistogramsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHistogram adds the histogram to the spy on histograms params
func (o *SpyOnHistogramsParams) WithHistogram(histogram *string) *SpyOnHistogramsParams {
	o.SetHistogram(histogram)
	return o
}

// SetHistogram adds the histogram to the spy on histograms params
func (o *SpyOnHistogramsParams) SetHistogram(histogram *string) {
	o.Histogram = histogram
}

// WithHistogramTagKey adds the histogramTagKey to the spy on histograms params
func (o *SpyOnHistogramsParams) WithHistogramTagKey(histogramTagKey []string) *SpyOnHistogramsParams {
	o.SetHistogramTagKey(histogramTagKey)
	return o
}

// SetHistogramTagKey adds the histogramTagKey to the spy on histograms params
func (o *SpyOnHistogramsParams) SetHistogramTagKey(histogramTagKey []string) {
	o.HistogramTagKey = histogramTagKey
}

// WithHost adds the host to the spy on histograms params
func (o *SpyOnHistogramsParams) WithHost(host *string) *SpyOnHistogramsParams {
	o.SetHost(host)
	return o
}

// SetHost adds the host to the spy on histograms params
func (o *SpyOnHistogramsParams) SetHost(host *string) {
	o.Host = host
}

// WithSampling adds the sampling to the spy on histograms params
func (o *SpyOnHistogramsParams) WithSampling(sampling *float64) *SpyOnHistogramsParams {
	o.SetSampling(sampling)
	return o
}

// SetSampling adds the sampling to the spy on histograms params
func (o *SpyOnHistogramsParams) SetSampling(sampling *float64) {
	o.Sampling = sampling
}

// WriteToRequest writes these params to a swagger request
func (o *SpyOnHistogramsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Histogram != nil {

		// query param histogram
		var qrHistogram string

		if o.Histogram != nil {
			qrHistogram = *o.Histogram
		}
		qHistogram := qrHistogram
		if qHistogram != "" {

			if err := r.SetQueryParam("histogram", qHistogram); err != nil {
				return err
			}
		}
	}

	if o.HistogramTagKey != nil {

		// binding items for histogramTagKey
		joinedHistogramTagKey := o.bindParamHistogramTagKey(reg)

		// query array param histogramTagKey
		if err := r.SetQueryParam("histogramTagKey", joinedHistogramTagKey...); err != nil {
			return err
		}
	}

	if o.Host != nil {

		// query param host
		var qrHost string

		if o.Host != nil {
			qrHost = *o.Host
		}
		qHost := qrHost
		if qHost != "" {

			if err := r.SetQueryParam("host", qHost); err != nil {
				return err
			}
		}
	}

	if o.Sampling != nil {

		// query param sampling
		var qrSampling float64

		if o.Sampling != nil {
			qrSampling = *o.Sampling
		}
		qSampling := swag.FormatFloat64(qrSampling)
		if qSampling != "" {

			if err := r.SetQueryParam("sampling", qSampling); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSpyOnHistograms binds the parameter histogramTagKey
func (o *SpyOnHistogramsParams) bindParamHistogramTagKey(formats strfmt.Registry) []string {
	histogramTagKeyIR := o.HistogramTagKey

	var histogramTagKeyIC []string
	for _, histogramTagKeyIIR := range histogramTagKeyIR { // explode []string

		histogramTagKeyIIV := histogramTagKeyIIR // string as string
		histogramTagKeyIC = append(histogramTagKeyIC, histogramTagKeyIIV)
	}

	// items.CollectionFormat: "multi"
	histogramTagKeyIS := swag.JoinByFormat(histogramTagKeyIC, "multi")

	return histogramTagKeyIS
}
