// Code generated by go-swagger; DO NOT EDIT.

package ingestion_spy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSpyOnSpansParams creates a new SpyOnSpansParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSpyOnSpansParams() *SpyOnSpansParams {
	return &SpyOnSpansParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSpyOnSpansParamsWithTimeout creates a new SpyOnSpansParams object
// with the ability to set a timeout on a request.
func NewSpyOnSpansParamsWithTimeout(timeout time.Duration) *SpyOnSpansParams {
	return &SpyOnSpansParams{
		timeout: timeout,
	}
}

// NewSpyOnSpansParamsWithContext creates a new SpyOnSpansParams object
// with the ability to set a context for a request.
func NewSpyOnSpansParamsWithContext(ctx context.Context) *SpyOnSpansParams {
	return &SpyOnSpansParams{
		Context: ctx,
	}
}

// NewSpyOnSpansParamsWithHTTPClient creates a new SpyOnSpansParams object
// with the ability to set a custom HTTPClient for a request.
func NewSpyOnSpansParamsWithHTTPClient(client *http.Client) *SpyOnSpansParams {
	return &SpyOnSpansParams{
		HTTPClient: client,
	}
}

/*
SpyOnSpansParams contains all the parameters to send to the API endpoint

	for the spy on spans operation.

	Typically these are written to a http.Request.
*/
type SpyOnSpansParams struct {

	/* Host.

	   List a span only if the name of its source starts with the specified case-sensitive prefix.
	*/
	Host *string

	/* Name.

	     List a span only if its operation name starts with the specified case-sensitive prefix.
	E.g., name=orderShirt matches spans named orderShirt and orderShirts, but not OrderShirts.
	*/
	Name *string

	/* Sampling.

	   goes from 0 to 1 with 0.01 being 1%

	   Format: double
	   Default: 0.01
	*/
	Sampling *float64

	/* SpanTagKey.

	   List a span only if it has the specified span tag key. Add this parameter multiple times to specify multiple span tags, e.g. spanTagKey=cluster&spanTagKey=shard
	*/
	SpanTagKey []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the spy on spans params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SpyOnSpansParams) WithDefaults() *SpyOnSpansParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the spy on spans params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SpyOnSpansParams) SetDefaults() {
	var (
		samplingDefault = float64(0.01)
	)

	val := SpyOnSpansParams{
		Sampling: &samplingDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the spy on spans params
func (o *SpyOnSpansParams) WithTimeout(timeout time.Duration) *SpyOnSpansParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the spy on spans params
func (o *SpyOnSpansParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the spy on spans params
func (o *SpyOnSpansParams) WithContext(ctx context.Context) *SpyOnSpansParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the spy on spans params
func (o *SpyOnSpansParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the spy on spans params
func (o *SpyOnSpansParams) WithHTTPClient(client *http.Client) *SpyOnSpansParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the spy on spans params
func (o *SpyOnSpansParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHost adds the host to the spy on spans params
func (o *SpyOnSpansParams) WithHost(host *string) *SpyOnSpansParams {
	o.SetHost(host)
	return o
}

// SetHost adds the host to the spy on spans params
func (o *SpyOnSpansParams) SetHost(host *string) {
	o.Host = host
}

// WithName adds the name to the spy on spans params
func (o *SpyOnSpansParams) WithName(name *string) *SpyOnSpansParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the spy on spans params
func (o *SpyOnSpansParams) SetName(name *string) {
	o.Name = name
}

// WithSampling adds the sampling to the spy on spans params
func (o *SpyOnSpansParams) WithSampling(sampling *float64) *SpyOnSpansParams {
	o.SetSampling(sampling)
	return o
}

// SetSampling adds the sampling to the spy on spans params
func (o *SpyOnSpansParams) SetSampling(sampling *float64) {
	o.Sampling = sampling
}

// WithSpanTagKey adds the spanTagKey to the spy on spans params
func (o *SpyOnSpansParams) WithSpanTagKey(spanTagKey []string) *SpyOnSpansParams {
	o.SetSpanTagKey(spanTagKey)
	return o
}

// SetSpanTagKey adds the spanTagKey to the spy on spans params
func (o *SpyOnSpansParams) SetSpanTagKey(spanTagKey []string) {
	o.SpanTagKey = spanTagKey
}

// WriteToRequest writes these params to a swagger request
func (o *SpyOnSpansParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Host != nil {

		// query param host
		var qrHost string

		if o.Host != nil {
			qrHost = *o.Host
		}
		qHost := qrHost
		if qHost != "" {

			if err := r.SetQueryParam("host", qHost); err != nil {
				return err
			}
		}
	}

	if o.Name != nil {

		// query param name
		var qrName string

		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {

			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}
	}

	if o.Sampling != nil {

		// query param sampling
		var qrSampling float64

		if o.Sampling != nil {
			qrSampling = *o.Sampling
		}
		qSampling := swag.FormatFloat64(qrSampling)
		if qSampling != "" {

			if err := r.SetQueryParam("sampling", qSampling); err != nil {
				return err
			}
		}
	}

	if o.SpanTagKey != nil {

		// binding items for spanTagKey
		joinedSpanTagKey := o.bindParamSpanTagKey(reg)

		// query array param spanTagKey
		if err := r.SetQueryParam("spanTagKey", joinedSpanTagKey...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSpyOnSpans binds the parameter spanTagKey
func (o *SpyOnSpansParams) bindParamSpanTagKey(formats strfmt.Registry) []string {
	spanTagKeyIR := o.SpanTagKey

	var spanTagKeyIC []string
	for _, spanTagKeyIIR := range spanTagKeyIR { // explode []string

		spanTagKeyIIV := spanTagKeyIIR // string as string
		spanTagKeyIC = append(spanTagKeyIC, spanTagKeyIIV)
	}

	// items.CollectionFormat: "multi"
	spanTagKeyIS := swag.JoinByFormat(spanTagKeyIC, "multi")

	return spanTagKeyIS
}
