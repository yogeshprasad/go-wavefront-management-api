// Code generated by go-swagger; DO NOT EDIT.

package ingestion_spy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new ingestion spy API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ingestion spy API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SpyOnDeltaCounters(params *SpyOnDeltaCountersParams, opts ...ClientOption) error

	SpyOnHistograms(params *SpyOnHistogramsParams, opts ...ClientOption) error

	SpyOnIDCreations(params *SpyOnIDCreationsParams, opts ...ClientOption) error

	SpyOnPoints(params *SpyOnPointsParams, opts ...ClientOption) error

	SpyOnSpans(params *SpyOnSpansParams, opts ...ClientOption) error

	SetTransport(transport runtime.ClientTransport)
}

/*
SpyOnDeltaCounters gets new delta counters that are added to existing time series

Try it Out button won't work in this case, as it's a streaming API. Endpoint: https://.wavefront.com/api/spy/deltas.
*/
func (a *Client) SpyOnDeltaCounters(params *SpyOnDeltaCountersParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpyOnDeltaCountersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "spyOnDeltaCounters",
		Method:             "GET",
		PathPattern:        "/api/spy/deltas",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SpyOnDeltaCountersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
	SpyOnHistograms gets new histograms that are added to existing time series

	Try it Out button won't work in this case, as it's a streaming API. Endpoint: https://.wavefront.com/api/spy/histograms

.

	Details usage can be find at: https://docs.wavefront.com/wavefront_monitoring_spy.html#get-ingested-histograms-with-spy
*/
func (a *Client) SpyOnHistograms(params *SpyOnHistogramsParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpyOnHistogramsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "spyOnHistograms",
		Method:             "GET",
		PathPattern:        "/api/spy/histograms",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SpyOnHistogramsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
	SpyOnIDCreations gets newly allocated i ds that correspond to new metric names source names point tags or span tags a new ID generally indicates that a new time series has been introduced

	Try it Out button won't work in this case, as it's a streaming API.

Endpoint: https://<cluster>.wavefront.com/api/spy/ids.
Details usage can be find at: https://docs.wavefront.com/wavefront_monitoring_spy.html#get-new-id-assignments-with-spy
*/
func (a *Client) SpyOnIDCreations(params *SpyOnIDCreationsParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpyOnIDCreationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "spyOnIdCreations",
		Method:             "GET",
		PathPattern:        "/api/spy/ids",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SpyOnIDCreationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
	SpyOnPoints gets a sampling of new metric data points that are added to existing time series

	Try it Out button won't work in this case, as it's a streaming API.

Endpoint: https://<cluster>.wavefront.com/api/spy/points.
Details usage can be find at: https://docs.wavefront.com/wavefront_monitoring_spy.html#get-ingested-metric-points-with-spy
*/
func (a *Client) SpyOnPoints(params *SpyOnPointsParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpyOnPointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "spyOnPoints",
		Method:             "GET",
		PathPattern:        "/api/spy/points",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SpyOnPointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
	SpyOnSpans gets new spans with existing source names and span tags

	Try it Out button won't work in this case, as it's a streaming API.

Endpoint: https://<cluster>.wavefront.com/api/spy/spans
Details usage can be find at: https://docs.wavefron.com/wavefront_monitoring_spy.html#get-ingested-spans-with-spy
*/
func (a *Client) SpyOnSpans(params *SpyOnSpansParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSpyOnSpansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "spyOnSpans",
		Method:             "GET",
		PathPattern:        "/api/spy/spans",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SpyOnSpansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
