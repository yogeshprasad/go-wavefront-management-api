// Code generated by go-swagger; DO NOT EDIT.

package ingestion_spy

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSpyOnPointsParams creates a new SpyOnPointsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSpyOnPointsParams() *SpyOnPointsParams {
	return &SpyOnPointsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSpyOnPointsParamsWithTimeout creates a new SpyOnPointsParams object
// with the ability to set a timeout on a request.
func NewSpyOnPointsParamsWithTimeout(timeout time.Duration) *SpyOnPointsParams {
	return &SpyOnPointsParams{
		timeout: timeout,
	}
}

// NewSpyOnPointsParamsWithContext creates a new SpyOnPointsParams object
// with the ability to set a context for a request.
func NewSpyOnPointsParamsWithContext(ctx context.Context) *SpyOnPointsParams {
	return &SpyOnPointsParams{
		Context: ctx,
	}
}

// NewSpyOnPointsParamsWithHTTPClient creates a new SpyOnPointsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSpyOnPointsParamsWithHTTPClient(client *http.Client) *SpyOnPointsParams {
	return &SpyOnPointsParams{
		HTTPClient: client,
	}
}

/*
SpyOnPointsParams contains all the parameters to send to the API endpoint

	for the spy on points operation.

	Typically these are written to a http.Request.
*/
type SpyOnPointsParams struct {

	/* Host.

	   List a point only if its source name starts with the specified case-sensitive prefix.
	*/
	Host *string

	/* Metric.

	     List a point only if its metric name starts with the specified case-sensitive prefix.
	E.g., metric=Cust matches metrics named Customer, Customers, Customer.alerts, but not customer.
	*/
	Metric *string

	/* PointTagKey.

	    List a point only if it has the specified point tag key. Add this parameter multiple times to specify multiple point tags, e.g., pointTagKey=env&pointTagKey=datacenter
	put env in the first line and datacenter in the second line as values
	*/
	PointTagKey []string

	/* Sampling.

	   goes from 0 to 1 with 0.01 being 1%

	   Format: double
	   Default: 0.01
	*/
	Sampling *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the spy on points params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SpyOnPointsParams) WithDefaults() *SpyOnPointsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the spy on points params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SpyOnPointsParams) SetDefaults() {
	var (
		samplingDefault = float64(0.01)
	)

	val := SpyOnPointsParams{
		Sampling: &samplingDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the spy on points params
func (o *SpyOnPointsParams) WithTimeout(timeout time.Duration) *SpyOnPointsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the spy on points params
func (o *SpyOnPointsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the spy on points params
func (o *SpyOnPointsParams) WithContext(ctx context.Context) *SpyOnPointsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the spy on points params
func (o *SpyOnPointsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the spy on points params
func (o *SpyOnPointsParams) WithHTTPClient(client *http.Client) *SpyOnPointsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the spy on points params
func (o *SpyOnPointsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHost adds the host to the spy on points params
func (o *SpyOnPointsParams) WithHost(host *string) *SpyOnPointsParams {
	o.SetHost(host)
	return o
}

// SetHost adds the host to the spy on points params
func (o *SpyOnPointsParams) SetHost(host *string) {
	o.Host = host
}

// WithMetric adds the metric to the spy on points params
func (o *SpyOnPointsParams) WithMetric(metric *string) *SpyOnPointsParams {
	o.SetMetric(metric)
	return o
}

// SetMetric adds the metric to the spy on points params
func (o *SpyOnPointsParams) SetMetric(metric *string) {
	o.Metric = metric
}

// WithPointTagKey adds the pointTagKey to the spy on points params
func (o *SpyOnPointsParams) WithPointTagKey(pointTagKey []string) *SpyOnPointsParams {
	o.SetPointTagKey(pointTagKey)
	return o
}

// SetPointTagKey adds the pointTagKey to the spy on points params
func (o *SpyOnPointsParams) SetPointTagKey(pointTagKey []string) {
	o.PointTagKey = pointTagKey
}

// WithSampling adds the sampling to the spy on points params
func (o *SpyOnPointsParams) WithSampling(sampling *float64) *SpyOnPointsParams {
	o.SetSampling(sampling)
	return o
}

// SetSampling adds the sampling to the spy on points params
func (o *SpyOnPointsParams) SetSampling(sampling *float64) {
	o.Sampling = sampling
}

// WriteToRequest writes these params to a swagger request
func (o *SpyOnPointsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Host != nil {

		// query param host
		var qrHost string

		if o.Host != nil {
			qrHost = *o.Host
		}
		qHost := qrHost
		if qHost != "" {

			if err := r.SetQueryParam("host", qHost); err != nil {
				return err
			}
		}
	}

	if o.Metric != nil {

		// query param metric
		var qrMetric string

		if o.Metric != nil {
			qrMetric = *o.Metric
		}
		qMetric := qrMetric
		if qMetric != "" {

			if err := r.SetQueryParam("metric", qMetric); err != nil {
				return err
			}
		}
	}

	if o.PointTagKey != nil {

		// binding items for pointTagKey
		joinedPointTagKey := o.bindParamPointTagKey(reg)

		// query array param pointTagKey
		if err := r.SetQueryParam("pointTagKey", joinedPointTagKey...); err != nil {
			return err
		}
	}

	if o.Sampling != nil {

		// query param sampling
		var qrSampling float64

		if o.Sampling != nil {
			qrSampling = *o.Sampling
		}
		qSampling := swag.FormatFloat64(qrSampling)
		if qSampling != "" {

			if err := r.SetQueryParam("sampling", qSampling); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSpyOnPoints binds the parameter pointTagKey
func (o *SpyOnPointsParams) bindParamPointTagKey(formats strfmt.Registry) []string {
	pointTagKeyIR := o.PointTagKey

	var pointTagKeyIC []string
	for _, pointTagKeyIIR := range pointTagKeyIR { // explode []string

		pointTagKeyIIV := pointTagKeyIIR // string as string
		pointTagKeyIC = append(pointTagKeyIC, pointTagKeyIIV)
	}

	// items.CollectionFormat: "multi"
	pointTagKeyIS := swag.JoinByFormat(pointTagKeyIC, "multi")

	return pointTagKeyIS
}
