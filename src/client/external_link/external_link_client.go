// Code generated by go-swagger; DO NOT EDIT.

package external_link

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new external link API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for external link API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateExternalLink(params *CreateExternalLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateExternalLinkOK, error)

	DeleteExternalLink(params *DeleteExternalLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteExternalLinkOK, error)

	GetAllExternalLink(params *GetAllExternalLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllExternalLinkOK, error)

	GetExternalLink(params *GetExternalLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExternalLinkOK, error)

	UpdateExternalLink(params *UpdateExternalLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateExternalLinkOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateExternalLink creates a specific external link
*/
func (a *Client) CreateExternalLink(params *CreateExternalLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateExternalLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateExternalLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createExternalLink",
		Method:             "POST",
		PathPattern:        "/api/v2/extlink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateExternalLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateExternalLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createExternalLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteExternalLink deletes a specific external link
*/
func (a *Client) DeleteExternalLink(params *DeleteExternalLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteExternalLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteExternalLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteExternalLink",
		Method:             "DELETE",
		PathPattern:        "/api/v2/extlink/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteExternalLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteExternalLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteExternalLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllExternalLink gets all external links for a customer
*/
func (a *Client) GetAllExternalLink(params *GetAllExternalLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllExternalLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllExternalLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllExternalLink",
		Method:             "GET",
		PathPattern:        "/api/v2/extlink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllExternalLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllExternalLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllExternalLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetExternalLink gets a specific external link
*/
func (a *Client) GetExternalLink(params *GetExternalLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetExternalLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetExternalLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getExternalLink",
		Method:             "GET",
		PathPattern:        "/api/v2/extlink/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetExternalLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetExternalLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getExternalLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateExternalLink updates a specific external link
*/
func (a *Client) UpdateExternalLink(params *UpdateExternalLinkParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateExternalLinkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateExternalLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateExternalLink",
		Method:             "PUT",
		PathPattern:        "/api/v2/extlink/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateExternalLinkReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateExternalLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateExternalLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
