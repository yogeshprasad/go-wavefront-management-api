// Code generated by go-swagger; DO NOT EDIT.

package dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new dashboard API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for dashboard API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddDashboardAccess(params *AddDashboardAccessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	AddDashboardTag(params *AddDashboardTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddDashboardTagOK, error)

	CreateDashboard(params *CreateDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDashboardOK, error)

	DeleteDashboard(params *DeleteDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDashboardOK, error)

	FavoriteDashboard(params *FavoriteDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FavoriteDashboardOK, error)

	GetAllDashboard(params *GetAllDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDashboardOK, error)

	GetDashboard(params *GetDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDashboardOK, error)

	GetDashboardAccessControlList(params *GetDashboardAccessControlListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDashboardAccessControlListOK, error)

	GetDashboardHistory(params *GetDashboardHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDashboardHistoryOK, error)

	GetDashboardTags(params *GetDashboardTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDashboardTagsOK, error)

	GetDashboardVersion(params *GetDashboardVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDashboardVersionOK, error)

	RemoveDashboardAccess(params *RemoveDashboardAccessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	RemoveDashboardTag(params *RemoveDashboardTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveDashboardTagOK, error)

	SetDashboardACL(params *SetDashboardACLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	SetDashboardTags(params *SetDashboardTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetDashboardTagsOK, error)

	UndeleteDashboard(params *UndeleteDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UndeleteDashboardOK, error)

	UnfavoriteDashboard(params *UnfavoriteDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnfavoriteDashboardOK, error)

	UpdateDashboard(params *UpdateDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDashboardOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddDashboardAccess adds the specified ids to the given dashboards ACL
*/
func (a *Client) AddDashboardAccess(params *AddDashboardAccessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDashboardAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addDashboardAccess",
		Method:             "POST",
		PathPattern:        "/api/v2/dashboard/acl/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddDashboardAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
AddDashboardTag adds a tag to a specific dashboard
*/
func (a *Client) AddDashboardTag(params *AddDashboardTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddDashboardTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDashboardTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addDashboardTag",
		Method:             "PUT",
		PathPattern:        "/api/v2/dashboard/{id}/tag/{tagValue}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddDashboardTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddDashboardTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addDashboardTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDashboard creates a specific dashboard
*/
func (a *Client) CreateDashboard(params *CreateDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDashboard",
		Method:             "POST",
		PathPattern:        "/api/v2/dashboard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDashboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDashboard deletes a specific dashboard
*/
func (a *Client) DeleteDashboard(params *DeleteDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDashboard",
		Method:             "DELETE",
		PathPattern:        "/api/v2/dashboard/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDashboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
FavoriteDashboard marks a dashboard as favorite
*/
func (a *Client) FavoriteDashboard(params *FavoriteDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*FavoriteDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFavoriteDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "favoriteDashboard",
		Method:             "POST",
		PathPattern:        "/api/v2/dashboard/{id}/favorite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &FavoriteDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*FavoriteDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for favoriteDashboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllDashboard gets all dashboards for a customer
*/
func (a *Client) GetAllDashboard(params *GetAllDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllDashboard",
		Method:             "GET",
		PathPattern:        "/api/v2/dashboard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllDashboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDashboard gets a specific dashboard
*/
func (a *Client) GetDashboard(params *GetDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDashboard",
		Method:             "GET",
		PathPattern:        "/api/v2/dashboard/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDashboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDashboardAccessControlList gets list of access control lists for the specified dashboards
*/
func (a *Client) GetDashboardAccessControlList(params *GetDashboardAccessControlListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDashboardAccessControlListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardAccessControlListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDashboardAccessControlList",
		Method:             "GET",
		PathPattern:        "/api/v2/dashboard/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDashboardAccessControlListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDashboardAccessControlListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDashboardAccessControlList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDashboardHistory gets the version history of a specific dashboard
*/
func (a *Client) GetDashboardHistory(params *GetDashboardHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDashboardHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDashboardHistory",
		Method:             "GET",
		PathPattern:        "/api/v2/dashboard/{id}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDashboardHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDashboardHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDashboardHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDashboardTags gets all tags associated with a specific dashboard
*/
func (a *Client) GetDashboardTags(params *GetDashboardTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDashboardTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDashboardTags",
		Method:             "GET",
		PathPattern:        "/api/v2/dashboard/{id}/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDashboardTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDashboardTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDashboardTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDashboardVersion gets a specific version of a specific dashboard
*/
func (a *Client) GetDashboardVersion(params *GetDashboardVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDashboardVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDashboardVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDashboardVersion",
		Method:             "GET",
		PathPattern:        "/api/v2/dashboard/{id}/history/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDashboardVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDashboardVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDashboardVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveDashboardAccess removes the specified ids from the given dashboards ACL
*/
func (a *Client) RemoveDashboardAccess(params *RemoveDashboardAccessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDashboardAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeDashboardAccess",
		Method:             "POST",
		PathPattern:        "/api/v2/dashboard/acl/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveDashboardAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
RemoveDashboardTag removes a tag from a specific dashboard
*/
func (a *Client) RemoveDashboardTag(params *RemoveDashboardTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveDashboardTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDashboardTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeDashboardTag",
		Method:             "DELETE",
		PathPattern:        "/api/v2/dashboard/{id}/tag/{tagValue}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveDashboardTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveDashboardTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeDashboardTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetDashboardACL sets ACL for the specified dashboards
*/
func (a *Client) SetDashboardACL(params *SetDashboardACLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetDashboardACLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setDashboardAcl",
		Method:             "PUT",
		PathPattern:        "/api/v2/dashboard/acl/set",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetDashboardACLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
SetDashboardTags sets all tags associated with a specific dashboard
*/
func (a *Client) SetDashboardTags(params *SetDashboardTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetDashboardTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetDashboardTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setDashboardTags",
		Method:             "POST",
		PathPattern:        "/api/v2/dashboard/{id}/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetDashboardTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetDashboardTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setDashboardTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UndeleteDashboard undeletes a specific dashboard
*/
func (a *Client) UndeleteDashboard(params *UndeleteDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UndeleteDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUndeleteDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "undeleteDashboard",
		Method:             "POST",
		PathPattern:        "/api/v2/dashboard/{id}/undelete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UndeleteDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UndeleteDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for undeleteDashboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnfavoriteDashboard unmarks a dashboard as favorite
*/
func (a *Client) UnfavoriteDashboard(params *UnfavoriteDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnfavoriteDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnfavoriteDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unfavoriteDashboard",
		Method:             "POST",
		PathPattern:        "/api/v2/dashboard/{id}/unfavorite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnfavoriteDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnfavoriteDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unfavoriteDashboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDashboard updates a specific dashboard
*/
func (a *Client) UpdateDashboard(params *UpdateDashboardParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDashboardOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDashboardParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDashboard",
		Method:             "PUT",
		PathPattern:        "/api/v2/dashboard/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDashboardReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDashboardOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDashboard: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
