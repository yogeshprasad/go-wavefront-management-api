// Code generated by go-swagger; DO NOT EDIT.

package saved_app_map_search_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new saved app map search group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for saved app map search group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddSavedAppMapSearchToGroup(params *AddSavedAppMapSearchToGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddSavedAppMapSearchToGroupOK, error)

	CreateSavedAppMapSearchGroup(params *CreateSavedAppMapSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSavedAppMapSearchGroupOK, error)

	DeleteSavedAppMapSearchGroup(params *DeleteSavedAppMapSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSavedAppMapSearchGroupOK, error)

	GetAllSavedAppMapSearchGroup(params *GetAllSavedAppMapSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSavedAppMapSearchGroupOK, error)

	GetSavedAppMapSearchGroup(params *GetSavedAppMapSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedAppMapSearchGroupOK, error)

	GetSavedAppMapSearchesForGroup(params *GetSavedAppMapSearchesForGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedAppMapSearchesForGroupOK, error)

	RemoveSavedAppMapSearchFromGroup(params *RemoveSavedAppMapSearchFromGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveSavedAppMapSearchFromGroupOK, error)

	UpdateSavedAppMapSearchGroup(params *UpdateSavedAppMapSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSavedAppMapSearchGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddSavedAppMapSearchToGroup adds a search to a search group
*/
func (a *Client) AddSavedAppMapSearchToGroup(params *AddSavedAppMapSearchToGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddSavedAppMapSearchToGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSavedAppMapSearchToGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addSavedAppMapSearchToGroup",
		Method:             "POST",
		PathPattern:        "/api/v2/savedappmapsearchgroup/{id}/addSearch/{searchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddSavedAppMapSearchToGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSavedAppMapSearchToGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSavedAppMapSearchToGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSavedAppMapSearchGroup creates a search group
*/
func (a *Client) CreateSavedAppMapSearchGroup(params *CreateSavedAppMapSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSavedAppMapSearchGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSavedAppMapSearchGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSavedAppMapSearchGroup",
		Method:             "POST",
		PathPattern:        "/api/v2/savedappmapsearchgroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSavedAppMapSearchGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSavedAppMapSearchGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSavedAppMapSearchGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSavedAppMapSearchGroup deletes a search group
*/
func (a *Client) DeleteSavedAppMapSearchGroup(params *DeleteSavedAppMapSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSavedAppMapSearchGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSavedAppMapSearchGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSavedAppMapSearchGroup",
		Method:             "DELETE",
		PathPattern:        "/api/v2/savedappmapsearchgroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSavedAppMapSearchGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSavedAppMapSearchGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSavedAppMapSearchGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSavedAppMapSearchGroup gets all search groups for a user
*/
func (a *Client) GetAllSavedAppMapSearchGroup(params *GetAllSavedAppMapSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSavedAppMapSearchGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSavedAppMapSearchGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSavedAppMapSearchGroup",
		Method:             "GET",
		PathPattern:        "/api/v2/savedappmapsearchgroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSavedAppMapSearchGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSavedAppMapSearchGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSavedAppMapSearchGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSavedAppMapSearchGroup gets a specific search group
*/
func (a *Client) GetSavedAppMapSearchGroup(params *GetSavedAppMapSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedAppMapSearchGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSavedAppMapSearchGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSavedAppMapSearchGroup",
		Method:             "GET",
		PathPattern:        "/api/v2/savedappmapsearchgroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSavedAppMapSearchGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSavedAppMapSearchGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSavedAppMapSearchGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSavedAppMapSearchesForGroup gets all searches for a search group
*/
func (a *Client) GetSavedAppMapSearchesForGroup(params *GetSavedAppMapSearchesForGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedAppMapSearchesForGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSavedAppMapSearchesForGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSavedAppMapSearchesForGroup",
		Method:             "GET",
		PathPattern:        "/api/v2/savedappmapsearchgroup/{id}/searches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSavedAppMapSearchesForGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSavedAppMapSearchesForGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSavedAppMapSearchesForGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveSavedAppMapSearchFromGroup removes a search from a search group
*/
func (a *Client) RemoveSavedAppMapSearchFromGroup(params *RemoveSavedAppMapSearchFromGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveSavedAppMapSearchFromGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveSavedAppMapSearchFromGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeSavedAppMapSearchFromGroup",
		Method:             "POST",
		PathPattern:        "/api/v2/savedappmapsearchgroup/{id}/removeSearch/{searchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveSavedAppMapSearchFromGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveSavedAppMapSearchFromGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeSavedAppMapSearchFromGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSavedAppMapSearchGroup updates a search group
*/
func (a *Client) UpdateSavedAppMapSearchGroup(params *UpdateSavedAppMapSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSavedAppMapSearchGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSavedAppMapSearchGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSavedAppMapSearchGroup",
		Method:             "PUT",
		PathPattern:        "/api/v2/savedappmapsearchgroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSavedAppMapSearchGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSavedAppMapSearchGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSavedAppMapSearchGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
