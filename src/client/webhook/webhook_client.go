// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new webhook API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for webhook API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateWebhook(params *CreateWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateWebhookOK, error)

	DeleteWebhook(params *DeleteWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWebhookOK, error)

	GetAllWebhooks(params *GetAllWebhooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllWebhooksOK, error)

	GetWebhook(params *GetWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWebhookOK, error)

	UpdateWebhook(params *UpdateWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWebhookOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateWebhook creates a specific webhook
*/
func (a *Client) CreateWebhook(params *CreateWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createWebhook",
		Method:             "POST",
		PathPattern:        "/api/v2/webhook",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWebhookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteWebhook deletes a specific webhook
*/
func (a *Client) DeleteWebhook(params *DeleteWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteWebhook",
		Method:             "DELETE",
		PathPattern:        "/api/v2/webhook/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWebhookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllWebhooks gets all webhooks for a customer
*/
func (a *Client) GetAllWebhooks(params *GetAllWebhooksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllWebhooksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllWebhooksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllWebhooks",
		Method:             "GET",
		PathPattern:        "/api/v2/webhook",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllWebhooksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllWebhooksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllWebhooks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetWebhook gets a specific webhook
*/
func (a *Client) GetWebhook(params *GetWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWebhook",
		Method:             "GET",
		PathPattern:        "/api/v2/webhook/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWebhookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateWebhook updates a specific webhook
*/
func (a *Client) UpdateWebhook(params *UpdateWebhookParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateWebhookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWebhookParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateWebhook",
		Method:             "PUT",
		PathPattern:        "/api/v2/webhook/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateWebhookReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWebhookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateWebhook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
