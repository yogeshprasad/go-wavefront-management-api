// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"models"
)

// NewUpdateAlertParams creates a new UpdateAlertParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateAlertParams() *UpdateAlertParams {
	return &UpdateAlertParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAlertParamsWithTimeout creates a new UpdateAlertParams object
// with the ability to set a timeout on a request.
func NewUpdateAlertParamsWithTimeout(timeout time.Duration) *UpdateAlertParams {
	return &UpdateAlertParams{
		timeout: timeout,
	}
}

// NewUpdateAlertParamsWithContext creates a new UpdateAlertParams object
// with the ability to set a context for a request.
func NewUpdateAlertParamsWithContext(ctx context.Context) *UpdateAlertParams {
	return &UpdateAlertParams{
		Context: ctx,
	}
}

// NewUpdateAlertParamsWithHTTPClient creates a new UpdateAlertParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateAlertParamsWithHTTPClient(client *http.Client) *UpdateAlertParams {
	return &UpdateAlertParams{
		HTTPClient: client,
	}
}

/*
UpdateAlertParams contains all the parameters to send to the API endpoint

	for the update alert operation.

	Typically these are written to a http.Request.
*/
type UpdateAlertParams struct {

	/* Body.

	     Example Classic Body:
	<pre>{
	  "id": "1459375928549",
	  "name": "Alert Name",
	  "target": "target:alert-target-id",
	  "condition": "ts(~sample.cpu.loadavg.1m) > 1",
	  "conditionQueryType": "WQL",
	  "displayExpression": "ts(~sample.cpu.loadavg.1m)",
	  "displayExpressionQueryType": "WQL",
	  "minutes": 5,
	  "resolveAfterMinutes": 2,
	  "severity": "INFO",
	  "additionalInformation": "Additional Info",
	  "tags": {
	    "customerTags": [
	      "alertTag1"
	    ]
	  }
	}</pre>
	Example Classic Body with multi queries:
	<pre>{
	  "id": "1459375928549",
	    "name": "Alert Name",
	    "alertType": "CLASSIC",
	    "alertSources": [        {
	            "name": "A",
	            "query": "${B} > 2",
	            "queryType": "PROMQL",
	            "alertSourceType": ["CONDITION"]
	        },
	        {
	            "name": "B",
	            "query": "sum_over_time(~sample.network.bytes.recv[1m])",
	            "queryType": "PROMQL",
	            "alertSourceType": ["AUDIT"]
	        }
	    ],
	    "severity": "WARN",
	    "minutes": 5
	}</pre>
	Example Threshold Body:
	<pre>{
	    "id": "1459375928550",
	    "name": "Alert Name",
	    "alertType": "THRESHOLD",
	    "conditions": {
	        "info": "ts(~sample.cpu.loadavg.1m) > 0",
	        "warn": "ts(~sample.cpu.loadavg.1m) > 5"
	    },
	    "displayExpression": "ts(~sample.cpu.loadavg.1m)",
	    "minutes": 5,
	    "resolveAfterMinutes": 2,
	    "additionalInformation": "conditions value entry needs to be of the form: displayExpression operator threshold"
	}</pre>
	Example Threshold Body with multi queries:
	<pre>{
	  "id": "1459375928549",
	  "name": "Alert Name",
	  "alertType": "THRESHOLD",
	  "alertSources": [
	    {
	      "name": "A",
	      "query": "${B}",
	      "queryType": "PROMQL",
	      "alertSourceType": ["CONDITION"]
	    },
	    {
	      "name": "B",
	      "query": "sum_over_time(~sample.network.bytes.recv[1m])",
	      "queryType": "PROMQL",
	      "alertSourceType": ["AUDIT"]
	    }
	  ],
	  "conditions": {
	    "info": "${B} > bool 0",
	    "warn": "${B} > bool 2"
	  },
	  "minutes": 5
	}</pre>
	Supported Characters of Tags:
	<pre>Tag names can contain alphanumeric (a-z, A-Z, 0-9),
	dash (-), underscore (_), and colon (:) characters.
	The space character is not supported.</pre>

	*/
	Body *models.Alert

	// ID.
	ID string

	/* UseMultiQuery.

	     A flag indicates whether to use the new multi-query alert structures when the feature is enabled.<br/>
	When the flag is true, the $.alertSources is the source of truth and will update $.condition and $.displayExpression with the corresponding expanded queries.<br/>
	When the flag is false, it goes through the old way and the $.condition and$.displayExpression is the source of truth and will auto-update $.alertSources

	*/
	UseMultiQuery *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update alert params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateAlertParams) WithDefaults() *UpdateAlertParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update alert params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateAlertParams) SetDefaults() {
	var (
		useMultiQueryDefault = bool(false)
	)

	val := UpdateAlertParams{
		UseMultiQuery: &useMultiQueryDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the update alert params
func (o *UpdateAlertParams) WithTimeout(timeout time.Duration) *UpdateAlertParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update alert params
func (o *UpdateAlertParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update alert params
func (o *UpdateAlertParams) WithContext(ctx context.Context) *UpdateAlertParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update alert params
func (o *UpdateAlertParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update alert params
func (o *UpdateAlertParams) WithHTTPClient(client *http.Client) *UpdateAlertParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update alert params
func (o *UpdateAlertParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update alert params
func (o *UpdateAlertParams) WithBody(body *models.Alert) *UpdateAlertParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update alert params
func (o *UpdateAlertParams) SetBody(body *models.Alert) {
	o.Body = body
}

// WithID adds the id to the update alert params
func (o *UpdateAlertParams) WithID(id string) *UpdateAlertParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the update alert params
func (o *UpdateAlertParams) SetID(id string) {
	o.ID = id
}

// WithUseMultiQuery adds the useMultiQuery to the update alert params
func (o *UpdateAlertParams) WithUseMultiQuery(useMultiQuery *bool) *UpdateAlertParams {
	o.SetUseMultiQuery(useMultiQuery)
	return o
}

// SetUseMultiQuery adds the useMultiQuery to the update alert params
func (o *UpdateAlertParams) SetUseMultiQuery(useMultiQuery *bool) {
	o.UseMultiQuery = useMultiQuery
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAlertParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.UseMultiQuery != nil {

		// query param useMultiQuery
		var qrUseMultiQuery bool

		if o.UseMultiQuery != nil {
			qrUseMultiQuery = *o.UseMultiQuery
		}
		qUseMultiQuery := swag.FormatBool(qrUseMultiQuery)
		if qUseMultiQuery != "" {

			if err := r.SetQueryParam("useMultiQuery", qUseMultiQuery); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
