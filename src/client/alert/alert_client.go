// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new alert API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for alert API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddAlertAccess(params *AddAlertAccessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	AddAlertTag(params *AddAlertTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddAlertTagOK, error)

	CheckQueryType(params *CheckQueryTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckQueryTypeOK, error)

	CloneAlert(params *CloneAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneAlertOK, error)

	CreateAlert(params *CreateAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAlertOK, error)

	DeleteAlert(params *DeleteAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAlertOK, error)

	GetAlert(params *GetAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertOK, error)

	GetAlertAccessControlList(params *GetAlertAccessControlListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertAccessControlListOK, error)

	GetAlertHistory(params *GetAlertHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertHistoryOK, error)

	GetAlertTags(params *GetAlertTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertTagsOK, error)

	GetAlertVersion(params *GetAlertVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertVersionOK, error)

	GetAlertsSummary(params *GetAlertsSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertsSummaryOK, error)

	GetAllAlert(params *GetAllAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllAlertOK, error)

	HideAlert(params *HideAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HideAlertOK, error)

	PreviewAlertNotification(params *PreviewAlertNotificationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PreviewAlertNotificationOK, error)

	RemoveAlertAccess(params *RemoveAlertAccessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	RemoveAlertTag(params *RemoveAlertTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveAlertTagOK, error)

	SetAlertACL(params *SetAlertACLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	SetAlertTags(params *SetAlertTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAlertTagsOK, error)

	SnoozeAlert(params *SnoozeAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SnoozeAlertOK, error)

	UndeleteAlert(params *UndeleteAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UndeleteAlertOK, error)

	UnhideAlert(params *UnhideAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnhideAlertOK, error)

	UnsnoozeAlert(params *UnsnoozeAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnsnoozeAlertOK, error)

	UpdateAlert(params *UpdateAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAlertOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddAlertAccess adds the specified ids to the given alerts ACL
*/
func (a *Client) AddAlertAccess(params *AddAlertAccessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAlertAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAlertAccess",
		Method:             "POST",
		PathPattern:        "/api/v2/alert/acl/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAlertAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
AddAlertTag adds a tag to a specific alert
*/
func (a *Client) AddAlertTag(params *AddAlertTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddAlertTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAlertTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAlertTag",
		Method:             "PUT",
		PathPattern:        "/api/v2/alert/{id}/tag/{tagValue}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAlertTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAlertTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAlertTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CheckQueryType returns the type of provided query
*/
func (a *Client) CheckQueryType(params *CheckQueryTypeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CheckQueryTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckQueryTypeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "checkQueryType",
		Method:             "POST",
		PathPattern:        "/api/v2/alert/checkQuery",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckQueryTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckQueryTypeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkQueryType: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CloneAlert clones the specified alert
*/
func (a *Client) CloneAlert(params *CloneAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloneAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cloneAlert",
		Method:             "POST",
		PathPattern:        "/api/v2/alert/{id}/clone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloneAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloneAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cloneAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateAlert creates a specific alert
*/
func (a *Client) CreateAlert(params *CreateAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createAlert",
		Method:             "POST",
		PathPattern:        "/api/v2/alert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAlert deletes a specific alert
*/
func (a *Client) DeleteAlert(params *DeleteAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAlert",
		Method:             "DELETE",
		PathPattern:        "/api/v2/alert/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlert gets a specific alert
*/
func (a *Client) GetAlert(params *GetAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlert",
		Method:             "GET",
		PathPattern:        "/api/v2/alert/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertAccessControlList gets access control lists union for the specified alerts
*/
func (a *Client) GetAlertAccessControlList(params *GetAlertAccessControlListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertAccessControlListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertAccessControlListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlertAccessControlList",
		Method:             "GET",
		PathPattern:        "/api/v2/alert/acl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertAccessControlListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertAccessControlListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlertAccessControlList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertHistory gets the version history of a specific alert
*/
func (a *Client) GetAlertHistory(params *GetAlertHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlertHistory",
		Method:             "GET",
		PathPattern:        "/api/v2/alert/{id}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlertHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertTags gets all tags associated with a specific alert
*/
func (a *Client) GetAlertTags(params *GetAlertTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlertTags",
		Method:             "GET",
		PathPattern:        "/api/v2/alert/{id}/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlertTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertVersion gets a specific historical version of a specific alert
*/
func (a *Client) GetAlertVersion(params *GetAlertVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlertVersion",
		Method:             "GET",
		PathPattern:        "/api/v2/alert/{id}/history/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlertVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertsSummary counts alerts of various statuses for a customer
*/
func (a *Client) GetAlertsSummary(params *GetAlertsSummaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertsSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlertsSummary",
		Method:             "GET",
		PathPattern:        "/api/v2/alert/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertsSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertsSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlertsSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllAlert gets all alerts for a customer
*/
func (a *Client) GetAllAlert(params *GetAllAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllAlert",
		Method:             "GET",
		PathPattern:        "/api/v2/alert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HideAlert hides a specific integration alert
*/
func (a *Client) HideAlert(params *HideAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*HideAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHideAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "hideAlert",
		Method:             "POST",
		PathPattern:        "/api/v2/alert/{id}/uninstall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HideAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HideAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for hideAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PreviewAlertNotification gets all the notification preview for a specific alert
*/
func (a *Client) PreviewAlertNotification(params *PreviewAlertNotificationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PreviewAlertNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPreviewAlertNotificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "previewAlertNotification",
		Method:             "POST",
		PathPattern:        "/api/v2/alert/preview",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PreviewAlertNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PreviewAlertNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for previewAlertNotification: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveAlertAccess removes the specified ids from the given alerts ACL
*/
func (a *Client) RemoveAlertAccess(params *RemoveAlertAccessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAlertAccessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeAlertAccess",
		Method:             "POST",
		PathPattern:        "/api/v2/alert/acl/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveAlertAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
RemoveAlertTag removes a tag from a specific alert
*/
func (a *Client) RemoveAlertTag(params *RemoveAlertTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveAlertTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAlertTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeAlertTag",
		Method:             "DELETE",
		PathPattern:        "/api/v2/alert/{id}/tag/{tagValue}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveAlertTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveAlertTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeAlertTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetAlertACL sets ACL for the specified alerts
*/
func (a *Client) SetAlertACL(params *SetAlertACLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAlertACLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAlertAcl",
		Method:             "PUT",
		PathPattern:        "/api/v2/alert/acl/set",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetAlertACLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
SetAlertTags sets all tags associated with a specific alert
*/
func (a *Client) SetAlertTags(params *SetAlertTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetAlertTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAlertTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setAlertTags",
		Method:             "POST",
		PathPattern:        "/api/v2/alert/{id}/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetAlertTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetAlertTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setAlertTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SnoozeAlert snoozes a specific alert for some number of seconds
*/
func (a *Client) SnoozeAlert(params *SnoozeAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SnoozeAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSnoozeAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "snoozeAlert",
		Method:             "POST",
		PathPattern:        "/api/v2/alert/{id}/snooze",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SnoozeAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SnoozeAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for snoozeAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UndeleteAlert undeletes a specific alert
*/
func (a *Client) UndeleteAlert(params *UndeleteAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UndeleteAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUndeleteAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "undeleteAlert",
		Method:             "POST",
		PathPattern:        "/api/v2/alert/{id}/undelete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UndeleteAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UndeleteAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for undeleteAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnhideAlert unhides a specific integration alert
*/
func (a *Client) UnhideAlert(params *UnhideAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnhideAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnhideAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unhideAlert",
		Method:             "POST",
		PathPattern:        "/api/v2/alert/{id}/install",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnhideAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnhideAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unhideAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UnsnoozeAlert unsnoozes a specific alert
*/
func (a *Client) UnsnoozeAlert(params *UnsnoozeAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UnsnoozeAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnsnoozeAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unsnoozeAlert",
		Method:             "POST",
		PathPattern:        "/api/v2/alert/{id}/unsnooze",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UnsnoozeAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnsnoozeAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unsnoozeAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateAlert updates a specific alert
*/
func (a *Client) UpdateAlert(params *UpdateAlertParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAlertParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateAlert",
		Method:             "PUT",
		PathPattern:        "/api/v2/alert/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateAlertReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateAlertOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateAlert: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
