// Code generated by go-swagger; DO NOT EDIT.

package account_user_and_service_account

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new account user and service account API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account user and service account API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ActivateAccount(params *ActivateAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActivateAccountOK, error)

	AddAccountToRoles(params *AddAccountToRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddAccountToRolesOK, error)

	AddAccountToUserGroups(params *AddAccountToUserGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddAccountToUserGroupsOK, error)

	CreateOrUpdateUserAccount(params *CreateOrUpdateUserAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrUpdateUserAccountOK, error)

	CreateServiceAccount(params *CreateServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceAccountOK, error)

	DeactivateAccount(params *DeactivateAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeactivateAccountOK, error)

	DeleteAccount(params *DeleteAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccountOK, error)

	DeleteMultipleAccounts(params *DeleteMultipleAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMultipleAccountsOK, error)

	GetAccount(params *GetAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountOK, error)

	GetAccountBusinessFunctions(params *GetAccountBusinessFunctionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountBusinessFunctionsOK, error)

	GetAllAccounts(params *GetAllAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllAccountsOK, error)

	GetAllServiceAccounts(params *GetAllServiceAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllServiceAccountsOK, error)

	GetAllUserAccounts(params *GetAllUserAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUserAccountsOK, error)

	GetServiceAccount(params *GetServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceAccountOK, error)

	GetUserAccount(params *GetUserAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserAccountOK, error)

	GrantAccountPermission(params *GrantAccountPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GrantAccountPermissionOK, error)

	GrantPermissionToAccounts(params *GrantPermissionToAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GrantPermissionToAccountsOK, error)

	InviteUserAccounts(params *InviteUserAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InviteUserAccountsOK, error)

	RemoveAccountFromRoles(params *RemoveAccountFromRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveAccountFromRolesOK, error)

	RemoveAccountFromUserGroups(params *RemoveAccountFromUserGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveAccountFromUserGroupsOK, error)

	RevokeAccountPermission(params *RevokeAccountPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeAccountPermissionOK, error)

	RevokePermissionFromAccounts(params *RevokePermissionFromAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokePermissionFromAccountsOK, error)

	UpdateServiceAccount(params *UpdateServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceAccountOK, error)

	UpdateUserAccount(params *UpdateUserAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserAccountOK, error)

	ValidateAccounts(params *ValidateAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateAccountsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ActivateAccount activates the given service account
*/
func (a *Client) ActivateAccount(params *ActivateAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ActivateAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewActivateAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "activateAccount",
		Method:             "POST",
		PathPattern:        "/api/v2/account/serviceaccount/{id}/activate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ActivateAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ActivateAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for activateAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddAccountToRoles adds specific roles to the account user or service account
*/
func (a *Client) AddAccountToRoles(params *AddAccountToRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddAccountToRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAccountToRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAccountToRoles",
		Method:             "POST",
		PathPattern:        "/api/v2/account/{id}/addRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAccountToRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAccountToRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAccountToRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddAccountToUserGroups adds specific groups to the account user or service account
*/
func (a *Client) AddAccountToUserGroups(params *AddAccountToUserGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddAccountToUserGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAccountToUserGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAccountToUserGroups",
		Method:             "POST",
		PathPattern:        "/api/v2/account/{id}/addUserGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAccountToUserGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAccountToUserGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAccountToUserGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateOrUpdateUserAccount creates or updates a user account
*/
func (a *Client) CreateOrUpdateUserAccount(params *CreateOrUpdateUserAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateOrUpdateUserAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrUpdateUserAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrUpdateUserAccount",
		Method:             "POST",
		PathPattern:        "/api/v2/account/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateOrUpdateUserAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrUpdateUserAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createOrUpdateUserAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateServiceAccount creates a service account
*/
func (a *Client) CreateServiceAccount(params *CreateServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createServiceAccount",
		Method:             "POST",
		PathPattern:        "/api/v2/account/serviceaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeactivateAccount deactivates the given service account
*/
func (a *Client) DeactivateAccount(params *DeactivateAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeactivateAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeactivateAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deactivateAccount",
		Method:             "POST",
		PathPattern:        "/api/v2/account/serviceaccount/{id}/deactivate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeactivateAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeactivateAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deactivateAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteAccount deletes an account user or service account identified by id
*/
func (a *Client) DeleteAccount(params *DeleteAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAccount",
		Method:             "DELETE",
		PathPattern:        "/api/v2/account/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMultipleAccounts deletes multiple accounts users or service accounts
*/
func (a *Client) DeleteMultipleAccounts(params *DeleteMultipleAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMultipleAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMultipleAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMultipleAccounts",
		Method:             "POST",
		PathPattern:        "/api/v2/account/deleteAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMultipleAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMultipleAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMultipleAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccount gets a specific account user or service account
*/
func (a *Client) GetAccount(params *GetAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccount",
		Method:             "GET",
		PathPattern:        "/api/v2/account/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAccountBusinessFunctions returns business functions of a specific account user or service account
*/
func (a *Client) GetAccountBusinessFunctions(params *GetAccountBusinessFunctionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAccountBusinessFunctionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountBusinessFunctionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccountBusinessFunctions",
		Method:             "GET",
		PathPattern:        "/api/v2/account/{id}/businessFunctions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountBusinessFunctionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountBusinessFunctionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccountBusinessFunctions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllAccounts gets all accounts users and service accounts of a customer
*/
func (a *Client) GetAllAccounts(params *GetAllAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllAccounts",
		Method:             "GET",
		PathPattern:        "/api/v2/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllServiceAccounts gets all service accounts
*/
func (a *Client) GetAllServiceAccounts(params *GetAllServiceAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllServiceAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllServiceAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllServiceAccounts",
		Method:             "GET",
		PathPattern:        "/api/v2/account/serviceaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllServiceAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllServiceAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllServiceAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllUserAccounts gets all user accounts

Returns all user accounts
*/
func (a *Client) GetAllUserAccounts(params *GetAllUserAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUserAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUserAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUserAccounts",
		Method:             "GET",
		PathPattern:        "/api/v2/account/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllUserAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUserAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUserAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServiceAccount retrieves a service account by identifier
*/
func (a *Client) GetServiceAccount(params *GetServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceAccount",
		Method:             "GET",
		PathPattern:        "/api/v2/account/serviceaccount/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserAccount retrieves a user by identifier email address
*/
func (a *Client) GetUserAccount(params *GetUserAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserAccount",
		Method:             "GET",
		PathPattern:        "/api/v2/account/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GrantAccountPermission grants a specific permission to account user or service account
*/
func (a *Client) GrantAccountPermission(params *GrantAccountPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GrantAccountPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGrantAccountPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "grantAccountPermission",
		Method:             "POST",
		PathPattern:        "/api/v2/account/{id}/grant/{permission}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GrantAccountPermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GrantAccountPermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for grantAccountPermission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GrantPermissionToAccounts grants a specific permission to multiple accounts users or service accounts
*/
func (a *Client) GrantPermissionToAccounts(params *GrantPermissionToAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GrantPermissionToAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGrantPermissionToAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "grantPermissionToAccounts",
		Method:             "POST",
		PathPattern:        "/api/v2/account/grant/{permission}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GrantPermissionToAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GrantPermissionToAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for grantPermissionToAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InviteUserAccounts invites user accounts with given user groups and permissions
*/
func (a *Client) InviteUserAccounts(params *InviteUserAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InviteUserAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInviteUserAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "inviteUserAccounts",
		Method:             "POST",
		PathPattern:        "/api/v2/account/user/invite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InviteUserAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InviteUserAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for inviteUserAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveAccountFromRoles removes specific roles from the account user or service account
*/
func (a *Client) RemoveAccountFromRoles(params *RemoveAccountFromRolesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveAccountFromRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAccountFromRolesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeAccountFromRoles",
		Method:             "POST",
		PathPattern:        "/api/v2/account/{id}/removeRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveAccountFromRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveAccountFromRolesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeAccountFromRoles: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveAccountFromUserGroups removes specific groups from the account user or service account
*/
func (a *Client) RemoveAccountFromUserGroups(params *RemoveAccountFromUserGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveAccountFromUserGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAccountFromUserGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeAccountFromUserGroups",
		Method:             "POST",
		PathPattern:        "/api/v2/account/{id}/removeUserGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveAccountFromUserGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveAccountFromUserGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeAccountFromUserGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokeAccountPermission revokes a specific permission from account user or service account
*/
func (a *Client) RevokeAccountPermission(params *RevokeAccountPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeAccountPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeAccountPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeAccountPermission",
		Method:             "POST",
		PathPattern:        "/api/v2/account/{id}/revoke/{permission}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeAccountPermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeAccountPermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeAccountPermission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokePermissionFromAccounts revokes a specific permission from multiple accounts users or service accounts
*/
func (a *Client) RevokePermissionFromAccounts(params *RevokePermissionFromAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokePermissionFromAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokePermissionFromAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokePermissionFromAccounts",
		Method:             "POST",
		PathPattern:        "/api/v2/account/revoke/{permission}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokePermissionFromAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokePermissionFromAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokePermissionFromAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateServiceAccount updates the service account
*/
func (a *Client) UpdateServiceAccount(params *UpdateServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateServiceAccount",
		Method:             "PUT",
		PathPattern:        "/api/v2/account/serviceaccount/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUserAccount updates user with given user groups permissions and ingestion policy
*/
func (a *Client) UpdateUserAccount(params *UpdateUserAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserAccount",
		Method:             "PUT",
		PathPattern:        "/api/v2/account/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateAccounts returns valid accounts users and service accounts also invalid identifiers from the given list
*/
func (a *Client) ValidateAccounts(params *ValidateAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateAccounts",
		Method:             "POST",
		PathPattern:        "/api/v2/account/validateAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
