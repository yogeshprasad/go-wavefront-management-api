// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new event API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for event API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddEventTag(params *AddEventTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddEventTagOK, error)

	CloseUserEvent(params *CloseUserEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloseUserEventOK, error)

	CreateEvent(params *CreateEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEventOK, error)

	DeleteUserEvent(params *DeleteUserEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserEventOK, error)

	GetAlertEventQueriesSlug(params *GetAlertEventQueriesSlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertEventQueriesSlugOK, error)

	GetAlertFiringDetails(params *GetAlertFiringDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertFiringDetailsOK, error)

	GetAlertFiringEvents(params *GetAlertFiringEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertFiringEventsOK, error)

	GetAllEventsWithTimeRange(params *GetAllEventsWithTimeRangeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllEventsWithTimeRangeOK, error)

	GetEvent(params *GetEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEventOK, error)

	GetEventTags(params *GetEventTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEventTagsOK, error)

	GetRelatedEventsWithTimeSpan(params *GetRelatedEventsWithTimeSpanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRelatedEventsWithTimeSpanOK, error)

	RemoveEventTag(params *RemoveEventTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveEventTagOK, error)

	SetEventTags(params *SetEventTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetEventTagsOK, error)

	UpdateUserEvent(params *UpdateUserEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserEventOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddEventTag adds a tag to a specific event
*/
func (a *Client) AddEventTag(params *AddEventTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddEventTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddEventTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addEventTag",
		Method:             "PUT",
		PathPattern:        "/api/v2/event/{id}/tag/{tagValue}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddEventTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddEventTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addEventTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CloseUserEvent closes a specific event

	This API supports only user events.

The API does <strong>not</strong> support close of system events (e.g. alert events).
*/
func (a *Client) CloseUserEvent(params *CloseUserEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CloseUserEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloseUserEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "closeUserEvent",
		Method:             "POST",
		PathPattern:        "/api/v2/event/{id}/close",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CloseUserEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CloseUserEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for closeUserEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateEvent creates a specific event

The following fields are readonly and will be ignored when passed in the request: <code>id</code>, <code>isEphemeral</code>, <code>isUserEvent</code>, <code>runningState</code>, <code>canDelete</code>, <code>canClose</code>, <code>creatorType</code>, <code>createdAt</code>, <code>updatedAt</code>, <code>createdEpochMillis</code>, <code>updatedEpochMillis</code>, <code>updaterId</code>, <code>creatorId</code>, and <code>summarizedEvents</code>
*/
func (a *Client) CreateEvent(params *CreateEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createEvent",
		Method:             "POST",
		PathPattern:        "/api/v2/event",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DeleteUserEvent deletes a specific user event

	This API supports only user events.

The API does <strong>not</strong> support deletion of system events (e.g. alert events).
*/
func (a *Client) DeleteUserEvent(params *DeleteUserEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserEvent",
		Method:             "DELETE",
		PathPattern:        "/api/v2/event/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertEventQueriesSlug ifs the specified event is associated with an alert returns a slug encoding the queries having to do with that alert firing or resolution
*/
func (a *Client) GetAlertEventQueriesSlug(params *GetAlertEventQueriesSlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertEventQueriesSlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertEventQueriesSlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlertEventQueriesSlug",
		Method:             "GET",
		PathPattern:        "/api/v2/event/{id}/alertQueriesSlug",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertEventQueriesSlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertEventQueriesSlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlertEventQueriesSlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertFiringDetails returns details of a particular alert firing including all the series that fired during the referred alert firing
*/
func (a *Client) GetAlertFiringDetails(params *GetAlertFiringDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertFiringDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertFiringDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlertFiringDetails",
		Method:             "GET",
		PathPattern:        "/api/v2/event/{id}/alertFiringDetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertFiringDetailsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertFiringDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlertFiringDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAlertFiringEvents gets firings events of an alert within a time range
*/
func (a *Client) GetAlertFiringEvents(params *GetAlertFiringEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAlertFiringEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAlertFiringEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAlertFiringEvents",
		Method:             "GET",
		PathPattern:        "/api/v2/event/alertFirings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAlertFiringEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAlertFiringEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAlertFiringEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllEventsWithTimeRange lists all the events for a customer within a time range
*/
func (a *Client) GetAllEventsWithTimeRange(params *GetAllEventsWithTimeRangeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllEventsWithTimeRangeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllEventsWithTimeRangeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllEventsWithTimeRange",
		Method:             "GET",
		PathPattern:        "/api/v2/event",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllEventsWithTimeRangeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllEventsWithTimeRangeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllEventsWithTimeRange: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEvent gets a specific event
*/
func (a *Client) GetEvent(params *GetEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEvent",
		Method:             "GET",
		PathPattern:        "/api/v2/event/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetEventTags gets all tags associated with a specific event
*/
func (a *Client) GetEventTags(params *GetEventTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetEventTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getEventTags",
		Method:             "GET",
		PathPattern:        "/api/v2/event/{id}/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetEventTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetEventTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getEventTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRelatedEventsWithTimeSpan lists all related events for a specific firing event with a time span of one hour
*/
func (a *Client) GetRelatedEventsWithTimeSpan(params *GetRelatedEventsWithTimeSpanParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRelatedEventsWithTimeSpanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRelatedEventsWithTimeSpanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRelatedEventsWithTimeSpan",
		Method:             "GET",
		PathPattern:        "/api/v2/event/{id}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRelatedEventsWithTimeSpanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRelatedEventsWithTimeSpanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRelatedEventsWithTimeSpan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveEventTag removes a tag from a specific event
*/
func (a *Client) RemoveEventTag(params *RemoveEventTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveEventTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveEventTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeEventTag",
		Method:             "DELETE",
		PathPattern:        "/api/v2/event/{id}/tag/{tagValue}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveEventTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveEventTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeEventTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetEventTags sets all tags associated with a specific event
*/
func (a *Client) SetEventTags(params *SetEventTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetEventTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEventTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setEventTags",
		Method:             "POST",
		PathPattern:        "/api/v2/event/{id}/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetEventTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEventTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setEventTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateUserEvent updates a specific user event

	This API supports only user events.

The API does <strong>not</strong> support update of system events (e.g. alert events).
The following fields are readonly and will be ignored when passed in the request: <code>id</code>, <code>isEphemeral</code>, <code>isUserEvent</code>, <code>runningState</code>, <code>canDelete</code>, <code>canClose</code>, <code>creatorType</code>, <code>createdAt</code>, <code>updatedAt</code>, <code>createdEpochMillis</code>, <code>updatedEpochMillis</code>, <code>updaterId</code>, <code>creatorId</code>, and <code>summarizedEvents</code>
*/
func (a *Client) UpdateUserEvent(params *UpdateUserEventParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserEventParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserEvent",
		Method:             "PUT",
		PathPattern:        "/api/v2/event/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserEventOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserEvent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
