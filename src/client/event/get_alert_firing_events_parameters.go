// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAlertFiringEventsParams creates a new GetAlertFiringEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAlertFiringEventsParams() *GetAlertFiringEventsParams {
	return &GetAlertFiringEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAlertFiringEventsParamsWithTimeout creates a new GetAlertFiringEventsParams object
// with the ability to set a timeout on a request.
func NewGetAlertFiringEventsParamsWithTimeout(timeout time.Duration) *GetAlertFiringEventsParams {
	return &GetAlertFiringEventsParams{
		timeout: timeout,
	}
}

// NewGetAlertFiringEventsParamsWithContext creates a new GetAlertFiringEventsParams object
// with the ability to set a context for a request.
func NewGetAlertFiringEventsParamsWithContext(ctx context.Context) *GetAlertFiringEventsParams {
	return &GetAlertFiringEventsParams{
		Context: ctx,
	}
}

// NewGetAlertFiringEventsParamsWithHTTPClient creates a new GetAlertFiringEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAlertFiringEventsParamsWithHTTPClient(client *http.Client) *GetAlertFiringEventsParams {
	return &GetAlertFiringEventsParams{
		HTTPClient: client,
	}
}

/*
GetAlertFiringEventsParams contains all the parameters to send to the API endpoint

	for the get alert firing events operation.

	Typically these are written to a http.Request.
*/
type GetAlertFiringEventsParams struct {

	// AlertID.
	AlertID string

	// Asc.
	Asc *bool

	// EarliestStartTimeEpochMillis.
	//
	// Format: int64
	EarliestStartTimeEpochMillis *int64

	// LatestStartTimeEpochMillis.
	//
	// Format: int64
	LatestStartTimeEpochMillis *int64

	// Limit.
	//
	// Format: int32
	// Default: 100
	Limit *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get alert firing events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAlertFiringEventsParams) WithDefaults() *GetAlertFiringEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get alert firing events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAlertFiringEventsParams) SetDefaults() {
	var (
		limitDefault = int32(100)
	)

	val := GetAlertFiringEventsParams{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get alert firing events params
func (o *GetAlertFiringEventsParams) WithTimeout(timeout time.Duration) *GetAlertFiringEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get alert firing events params
func (o *GetAlertFiringEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get alert firing events params
func (o *GetAlertFiringEventsParams) WithContext(ctx context.Context) *GetAlertFiringEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get alert firing events params
func (o *GetAlertFiringEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get alert firing events params
func (o *GetAlertFiringEventsParams) WithHTTPClient(client *http.Client) *GetAlertFiringEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get alert firing events params
func (o *GetAlertFiringEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAlertID adds the alertID to the get alert firing events params
func (o *GetAlertFiringEventsParams) WithAlertID(alertID string) *GetAlertFiringEventsParams {
	o.SetAlertID(alertID)
	return o
}

// SetAlertID adds the alertId to the get alert firing events params
func (o *GetAlertFiringEventsParams) SetAlertID(alertID string) {
	o.AlertID = alertID
}

// WithAsc adds the asc to the get alert firing events params
func (o *GetAlertFiringEventsParams) WithAsc(asc *bool) *GetAlertFiringEventsParams {
	o.SetAsc(asc)
	return o
}

// SetAsc adds the asc to the get alert firing events params
func (o *GetAlertFiringEventsParams) SetAsc(asc *bool) {
	o.Asc = asc
}

// WithEarliestStartTimeEpochMillis adds the earliestStartTimeEpochMillis to the get alert firing events params
func (o *GetAlertFiringEventsParams) WithEarliestStartTimeEpochMillis(earliestStartTimeEpochMillis *int64) *GetAlertFiringEventsParams {
	o.SetEarliestStartTimeEpochMillis(earliestStartTimeEpochMillis)
	return o
}

// SetEarliestStartTimeEpochMillis adds the earliestStartTimeEpochMillis to the get alert firing events params
func (o *GetAlertFiringEventsParams) SetEarliestStartTimeEpochMillis(earliestStartTimeEpochMillis *int64) {
	o.EarliestStartTimeEpochMillis = earliestStartTimeEpochMillis
}

// WithLatestStartTimeEpochMillis adds the latestStartTimeEpochMillis to the get alert firing events params
func (o *GetAlertFiringEventsParams) WithLatestStartTimeEpochMillis(latestStartTimeEpochMillis *int64) *GetAlertFiringEventsParams {
	o.SetLatestStartTimeEpochMillis(latestStartTimeEpochMillis)
	return o
}

// SetLatestStartTimeEpochMillis adds the latestStartTimeEpochMillis to the get alert firing events params
func (o *GetAlertFiringEventsParams) SetLatestStartTimeEpochMillis(latestStartTimeEpochMillis *int64) {
	o.LatestStartTimeEpochMillis = latestStartTimeEpochMillis
}

// WithLimit adds the limit to the get alert firing events params
func (o *GetAlertFiringEventsParams) WithLimit(limit *int32) *GetAlertFiringEventsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get alert firing events params
func (o *GetAlertFiringEventsParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WriteToRequest writes these params to a swagger request
func (o *GetAlertFiringEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param alertId
	qrAlertID := o.AlertID
	qAlertID := qrAlertID
	if qAlertID != "" {

		if err := r.SetQueryParam("alertId", qAlertID); err != nil {
			return err
		}
	}

	if o.Asc != nil {

		// query param asc
		var qrAsc bool

		if o.Asc != nil {
			qrAsc = *o.Asc
		}
		qAsc := swag.FormatBool(qrAsc)
		if qAsc != "" {

			if err := r.SetQueryParam("asc", qAsc); err != nil {
				return err
			}
		}
	}

	if o.EarliestStartTimeEpochMillis != nil {

		// query param earliestStartTimeEpochMillis
		var qrEarliestStartTimeEpochMillis int64

		if o.EarliestStartTimeEpochMillis != nil {
			qrEarliestStartTimeEpochMillis = *o.EarliestStartTimeEpochMillis
		}
		qEarliestStartTimeEpochMillis := swag.FormatInt64(qrEarliestStartTimeEpochMillis)
		if qEarliestStartTimeEpochMillis != "" {

			if err := r.SetQueryParam("earliestStartTimeEpochMillis", qEarliestStartTimeEpochMillis); err != nil {
				return err
			}
		}
	}

	if o.LatestStartTimeEpochMillis != nil {

		// query param latestStartTimeEpochMillis
		var qrLatestStartTimeEpochMillis int64

		if o.LatestStartTimeEpochMillis != nil {
			qrLatestStartTimeEpochMillis = *o.LatestStartTimeEpochMillis
		}
		qLatestStartTimeEpochMillis := swag.FormatInt64(qrLatestStartTimeEpochMillis)
		if qLatestStartTimeEpochMillis != "" {

			if err := r.SetQueryParam("latestStartTimeEpochMillis", qLatestStartTimeEpochMillis); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
