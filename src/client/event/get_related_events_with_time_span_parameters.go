// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRelatedEventsWithTimeSpanParams creates a new GetRelatedEventsWithTimeSpanParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRelatedEventsWithTimeSpanParams() *GetRelatedEventsWithTimeSpanParams {
	return &GetRelatedEventsWithTimeSpanParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRelatedEventsWithTimeSpanParamsWithTimeout creates a new GetRelatedEventsWithTimeSpanParams object
// with the ability to set a timeout on a request.
func NewGetRelatedEventsWithTimeSpanParamsWithTimeout(timeout time.Duration) *GetRelatedEventsWithTimeSpanParams {
	return &GetRelatedEventsWithTimeSpanParams{
		timeout: timeout,
	}
}

// NewGetRelatedEventsWithTimeSpanParamsWithContext creates a new GetRelatedEventsWithTimeSpanParams object
// with the ability to set a context for a request.
func NewGetRelatedEventsWithTimeSpanParamsWithContext(ctx context.Context) *GetRelatedEventsWithTimeSpanParams {
	return &GetRelatedEventsWithTimeSpanParams{
		Context: ctx,
	}
}

// NewGetRelatedEventsWithTimeSpanParamsWithHTTPClient creates a new GetRelatedEventsWithTimeSpanParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRelatedEventsWithTimeSpanParamsWithHTTPClient(client *http.Client) *GetRelatedEventsWithTimeSpanParams {
	return &GetRelatedEventsWithTimeSpanParams{
		HTTPClient: client,
	}
}

/*
GetRelatedEventsWithTimeSpanParams contains all the parameters to send to the API endpoint

	for the get related events with time span operation.

	Typically these are written to a http.Request.
*/
type GetRelatedEventsWithTimeSpanParams struct {

	// ID.
	ID string

	// IsOverlapped.
	IsOverlapped *bool

	// Limit.
	//
	// Format: int32
	// Default: 100
	Limit *int32

	// RenderingMethod.
	RenderingMethod *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get related events with time span params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRelatedEventsWithTimeSpanParams) WithDefaults() *GetRelatedEventsWithTimeSpanParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get related events with time span params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRelatedEventsWithTimeSpanParams) SetDefaults() {
	var (
		limitDefault = int32(100)
	)

	val := GetRelatedEventsWithTimeSpanParams{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get related events with time span params
func (o *GetRelatedEventsWithTimeSpanParams) WithTimeout(timeout time.Duration) *GetRelatedEventsWithTimeSpanParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get related events with time span params
func (o *GetRelatedEventsWithTimeSpanParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get related events with time span params
func (o *GetRelatedEventsWithTimeSpanParams) WithContext(ctx context.Context) *GetRelatedEventsWithTimeSpanParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get related events with time span params
func (o *GetRelatedEventsWithTimeSpanParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get related events with time span params
func (o *GetRelatedEventsWithTimeSpanParams) WithHTTPClient(client *http.Client) *GetRelatedEventsWithTimeSpanParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get related events with time span params
func (o *GetRelatedEventsWithTimeSpanParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get related events with time span params
func (o *GetRelatedEventsWithTimeSpanParams) WithID(id string) *GetRelatedEventsWithTimeSpanParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get related events with time span params
func (o *GetRelatedEventsWithTimeSpanParams) SetID(id string) {
	o.ID = id
}

// WithIsOverlapped adds the isOverlapped to the get related events with time span params
func (o *GetRelatedEventsWithTimeSpanParams) WithIsOverlapped(isOverlapped *bool) *GetRelatedEventsWithTimeSpanParams {
	o.SetIsOverlapped(isOverlapped)
	return o
}

// SetIsOverlapped adds the isOverlapped to the get related events with time span params
func (o *GetRelatedEventsWithTimeSpanParams) SetIsOverlapped(isOverlapped *bool) {
	o.IsOverlapped = isOverlapped
}

// WithLimit adds the limit to the get related events with time span params
func (o *GetRelatedEventsWithTimeSpanParams) WithLimit(limit *int32) *GetRelatedEventsWithTimeSpanParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get related events with time span params
func (o *GetRelatedEventsWithTimeSpanParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WithRenderingMethod adds the renderingMethod to the get related events with time span params
func (o *GetRelatedEventsWithTimeSpanParams) WithRenderingMethod(renderingMethod *string) *GetRelatedEventsWithTimeSpanParams {
	o.SetRenderingMethod(renderingMethod)
	return o
}

// SetRenderingMethod adds the renderingMethod to the get related events with time span params
func (o *GetRelatedEventsWithTimeSpanParams) SetRenderingMethod(renderingMethod *string) {
	o.RenderingMethod = renderingMethod
}

// WriteToRequest writes these params to a swagger request
func (o *GetRelatedEventsWithTimeSpanParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IsOverlapped != nil {

		// query param isOverlapped
		var qrIsOverlapped bool

		if o.IsOverlapped != nil {
			qrIsOverlapped = *o.IsOverlapped
		}
		qIsOverlapped := swag.FormatBool(qrIsOverlapped)
		if qIsOverlapped != "" {

			if err := r.SetQueryParam("isOverlapped", qIsOverlapped); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.RenderingMethod != nil {

		// query param renderingMethod
		var qrRenderingMethod string

		if o.RenderingMethod != nil {
			qrRenderingMethod = *o.RenderingMethod
		}
		qRenderingMethod := qrRenderingMethod
		if qRenderingMethod != "" {

			if err := r.SetQueryParam("renderingMethod", qRenderingMethod); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
