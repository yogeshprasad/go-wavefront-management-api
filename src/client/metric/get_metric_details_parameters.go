// Code generated by go-swagger; DO NOT EDIT.

package metric

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetMetricDetailsParams creates a new GetMetricDetailsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetMetricDetailsParams() *GetMetricDetailsParams {
	return &GetMetricDetailsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetMetricDetailsParamsWithTimeout creates a new GetMetricDetailsParams object
// with the ability to set a timeout on a request.
func NewGetMetricDetailsParamsWithTimeout(timeout time.Duration) *GetMetricDetailsParams {
	return &GetMetricDetailsParams{
		timeout: timeout,
	}
}

// NewGetMetricDetailsParamsWithContext creates a new GetMetricDetailsParams object
// with the ability to set a context for a request.
func NewGetMetricDetailsParamsWithContext(ctx context.Context) *GetMetricDetailsParams {
	return &GetMetricDetailsParams{
		Context: ctx,
	}
}

// NewGetMetricDetailsParamsWithHTTPClient creates a new GetMetricDetailsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetMetricDetailsParamsWithHTTPClient(client *http.Client) *GetMetricDetailsParams {
	return &GetMetricDetailsParams{
		HTTPClient: client,
	}
}

/*
GetMetricDetailsParams contains all the parameters to send to the API endpoint

	for the get metric details operation.

	Typically these are written to a http.Request.
*/
type GetMetricDetailsParams struct {

	/* C.

	   cursor value to continue if the number of results exceeds 1000
	*/
	C *string

	/* H.

	   glob pattern for sources to include in the query result
	*/
	H []string

	/* L.

	   limit

	   Format: int32
	*/
	L *int32

	/* M.

	   Metric name
	*/
	M string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get metric details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMetricDetailsParams) WithDefaults() *GetMetricDetailsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get metric details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetMetricDetailsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get metric details params
func (o *GetMetricDetailsParams) WithTimeout(timeout time.Duration) *GetMetricDetailsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get metric details params
func (o *GetMetricDetailsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get metric details params
func (o *GetMetricDetailsParams) WithContext(ctx context.Context) *GetMetricDetailsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get metric details params
func (o *GetMetricDetailsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get metric details params
func (o *GetMetricDetailsParams) WithHTTPClient(client *http.Client) *GetMetricDetailsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get metric details params
func (o *GetMetricDetailsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithC adds the c to the get metric details params
func (o *GetMetricDetailsParams) WithC(c *string) *GetMetricDetailsParams {
	o.SetC(c)
	return o
}

// SetC adds the c to the get metric details params
func (o *GetMetricDetailsParams) SetC(c *string) {
	o.C = c
}

// WithH adds the h to the get metric details params
func (o *GetMetricDetailsParams) WithH(h []string) *GetMetricDetailsParams {
	o.SetH(h)
	return o
}

// SetH adds the h to the get metric details params
func (o *GetMetricDetailsParams) SetH(h []string) {
	o.H = h
}

// WithL adds the l to the get metric details params
func (o *GetMetricDetailsParams) WithL(l *int32) *GetMetricDetailsParams {
	o.SetL(l)
	return o
}

// SetL adds the l to the get metric details params
func (o *GetMetricDetailsParams) SetL(l *int32) {
	o.L = l
}

// WithM adds the m to the get metric details params
func (o *GetMetricDetailsParams) WithM(m string) *GetMetricDetailsParams {
	o.SetM(m)
	return o
}

// SetM adds the m to the get metric details params
func (o *GetMetricDetailsParams) SetM(m string) {
	o.M = m
}

// WriteToRequest writes these params to a swagger request
func (o *GetMetricDetailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.C != nil {

		// query param c
		var qrC string

		if o.C != nil {
			qrC = *o.C
		}
		qC := qrC
		if qC != "" {

			if err := r.SetQueryParam("c", qC); err != nil {
				return err
			}
		}
	}

	if o.H != nil {

		// binding items for h
		joinedH := o.bindParamH(reg)

		// query array param h
		if err := r.SetQueryParam("h", joinedH...); err != nil {
			return err
		}
	}

	if o.L != nil {

		// query param l
		var qrL int32

		if o.L != nil {
			qrL = *o.L
		}
		qL := swag.FormatInt32(qrL)
		if qL != "" {

			if err := r.SetQueryParam("l", qL); err != nil {
				return err
			}
		}
	}

	// query param m
	qrM := o.M
	qM := qrM
	if qM != "" {

		if err := r.SetQueryParam("m", qM); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetMetricDetails binds the parameter h
func (o *GetMetricDetailsParams) bindParamH(formats strfmt.Registry) []string {
	hIR := o.H

	var hIC []string
	for _, hIIR := range hIR { // explode []string

		hIIV := hIIR // string as string
		hIC = append(hIC, hIIV)
	}

	// items.CollectionFormat: "multi"
	hIS := swag.JoinByFormat(hIC, "multi")

	return hIS
}
