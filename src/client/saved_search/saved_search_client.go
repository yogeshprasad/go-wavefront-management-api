// Code generated by go-swagger; DO NOT EDIT.

package saved_search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new saved search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for saved search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSavedSearch(params *CreateSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSavedSearchOK, error)

	DeleteSavedSearch(params *DeleteSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSavedSearchOK, error)

	GetAllEntityTypeSavedSearches(params *GetAllEntityTypeSavedSearchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllEntityTypeSavedSearchesOK, error)

	GetAllSavedSearches(params *GetAllSavedSearchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSavedSearchesOK, error)

	GetSavedSearch(params *GetSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedSearchOK, error)

	UpdateSavedSearch(params *UpdateSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSavedSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateSavedSearch creates a saved search
*/
func (a *Client) CreateSavedSearch(params *CreateSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSavedSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSavedSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSavedSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/savedsearch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSavedSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSavedSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSavedSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSavedSearch deletes a specific saved search
*/
func (a *Client) DeleteSavedSearch(params *DeleteSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSavedSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSavedSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSavedSearch",
		Method:             "DELETE",
		PathPattern:        "/api/v2/savedsearch/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSavedSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSavedSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSavedSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllEntityTypeSavedSearches gets all saved searches for a specific entity type for a user
*/
func (a *Client) GetAllEntityTypeSavedSearches(params *GetAllEntityTypeSavedSearchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllEntityTypeSavedSearchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllEntityTypeSavedSearchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllEntityTypeSavedSearches",
		Method:             "GET",
		PathPattern:        "/api/v2/savedsearch/type/{entitytype}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllEntityTypeSavedSearchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllEntityTypeSavedSearchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllEntityTypeSavedSearches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSavedSearches gets all saved searches for a user
*/
func (a *Client) GetAllSavedSearches(params *GetAllSavedSearchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSavedSearchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSavedSearchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSavedSearches",
		Method:             "GET",
		PathPattern:        "/api/v2/savedsearch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSavedSearchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSavedSearchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSavedSearches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSavedSearch gets a specific saved search
*/
func (a *Client) GetSavedSearch(params *GetSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSavedSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSavedSearch",
		Method:             "GET",
		PathPattern:        "/api/v2/savedsearch/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSavedSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSavedSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSavedSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSavedSearch updates a specific saved search
*/
func (a *Client) UpdateSavedSearch(params *UpdateSavedSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSavedSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSavedSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSavedSearch",
		Method:             "PUT",
		PathPattern:        "/api/v2/savedsearch/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSavedSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSavedSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSavedSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
