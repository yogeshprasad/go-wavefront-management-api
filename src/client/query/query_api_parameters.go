// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryAPIParams creates a new QueryAPIParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryAPIParams() *QueryAPIParams {
	return &QueryAPIParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryAPIParamsWithTimeout creates a new QueryAPIParams object
// with the ability to set a timeout on a request.
func NewQueryAPIParamsWithTimeout(timeout time.Duration) *QueryAPIParams {
	return &QueryAPIParams{
		timeout: timeout,
	}
}

// NewQueryAPIParamsWithContext creates a new QueryAPIParams object
// with the ability to set a context for a request.
func NewQueryAPIParamsWithContext(ctx context.Context) *QueryAPIParams {
	return &QueryAPIParams{
		Context: ctx,
	}
}

// NewQueryAPIParamsWithHTTPClient creates a new QueryAPIParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryAPIParamsWithHTTPClient(client *http.Client) *QueryAPIParams {
	return &QueryAPIParams{
		HTTPClient: client,
	}
}

/*
QueryAPIParams contains all the parameters to send to the API endpoint

	for the query Api operation.

	Typically these are written to a http.Request.
*/
type QueryAPIParams struct {

	/* AutoEvents.

	   whether events for sources included in the query will be automatically returned by the query
	*/
	AutoEvents *bool

	/* Cached.

	   whether the query cache is used, defaults to true

	   Default: true
	*/
	Cached *bool

	// DimensionTuples.
	DimensionTuples []string

	/* E.

	   the end time of the query window in epoch milliseconds (null to use now)
	*/
	E *string

	/* G.

	   the granularity of the points returned
	*/
	G string

	/* I.

	   whether series with only points that are outside of the query window will be returned (defaults to true)
	*/
	I *bool

	/* IncludeObsoleteMetrics.

	   include metrics that have not been reporting recently, defaults to false
	*/
	IncludeObsoleteMetrics *bool

	/* ListMode.

	   retrieve events more optimally displayed for a list
	*/
	ListMode *bool

	/* N.

	   name used to identify the query
	*/
	N *string

	/* P.

	   the approximate maximum number of points to return (may not limit number of points exactly)
	*/
	P *string

	/* Q.

	   the query expression to execute
	*/
	Q string

	/* QueryType.

	   the query type of the query

	   Default: "HYBRID"
	*/
	QueryType *string

	/* S.

	   the start time of the query window in epoch milliseconds
	*/
	S string

	/* Sorted.

	   sorts the output so that returned series are in order, defaults to false
	*/
	Sorted *bool

	/* Strict.

	   do not return points outside the query window [s;e), defaults to false
	*/
	Strict *bool

	/* Summarization.

	   summarization strategy to use when bucketing points together
	*/
	Summarization *string

	// UseRawQK.
	UseRawQK *bool

	/* View.

	   view of the query result, metric or histogram, defaults to metric

	   Default: "METRIC"
	*/
	View *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query Api params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryAPIParams) WithDefaults() *QueryAPIParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query Api params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryAPIParams) SetDefaults() {
	var (
		cachedDefault = bool(true)

		queryTypeDefault = string("HYBRID")

		sortedDefault = bool(false)

		useRawQKDefault = bool(false)

		viewDefault = string("METRIC")
	)

	val := QueryAPIParams{
		Cached:    &cachedDefault,
		QueryType: &queryTypeDefault,
		Sorted:    &sortedDefault,
		UseRawQK:  &useRawQKDefault,
		View:      &viewDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the query Api params
func (o *QueryAPIParams) WithTimeout(timeout time.Duration) *QueryAPIParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query Api params
func (o *QueryAPIParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query Api params
func (o *QueryAPIParams) WithContext(ctx context.Context) *QueryAPIParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query Api params
func (o *QueryAPIParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query Api params
func (o *QueryAPIParams) WithHTTPClient(client *http.Client) *QueryAPIParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query Api params
func (o *QueryAPIParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAutoEvents adds the autoEvents to the query Api params
func (o *QueryAPIParams) WithAutoEvents(autoEvents *bool) *QueryAPIParams {
	o.SetAutoEvents(autoEvents)
	return o
}

// SetAutoEvents adds the autoEvents to the query Api params
func (o *QueryAPIParams) SetAutoEvents(autoEvents *bool) {
	o.AutoEvents = autoEvents
}

// WithCached adds the cached to the query Api params
func (o *QueryAPIParams) WithCached(cached *bool) *QueryAPIParams {
	o.SetCached(cached)
	return o
}

// SetCached adds the cached to the query Api params
func (o *QueryAPIParams) SetCached(cached *bool) {
	o.Cached = cached
}

// WithDimensionTuples adds the dimensionTuples to the query Api params
func (o *QueryAPIParams) WithDimensionTuples(dimensionTuples []string) *QueryAPIParams {
	o.SetDimensionTuples(dimensionTuples)
	return o
}

// SetDimensionTuples adds the dimensionTuples to the query Api params
func (o *QueryAPIParams) SetDimensionTuples(dimensionTuples []string) {
	o.DimensionTuples = dimensionTuples
}

// WithE adds the e to the query Api params
func (o *QueryAPIParams) WithE(e *string) *QueryAPIParams {
	o.SetE(e)
	return o
}

// SetE adds the e to the query Api params
func (o *QueryAPIParams) SetE(e *string) {
	o.E = e
}

// WithG adds the g to the query Api params
func (o *QueryAPIParams) WithG(g string) *QueryAPIParams {
	o.SetG(g)
	return o
}

// SetG adds the g to the query Api params
func (o *QueryAPIParams) SetG(g string) {
	o.G = g
}

// WithI adds the i to the query Api params
func (o *QueryAPIParams) WithI(i *bool) *QueryAPIParams {
	o.SetI(i)
	return o
}

// SetI adds the i to the query Api params
func (o *QueryAPIParams) SetI(i *bool) {
	o.I = i
}

// WithIncludeObsoleteMetrics adds the includeObsoleteMetrics to the query Api params
func (o *QueryAPIParams) WithIncludeObsoleteMetrics(includeObsoleteMetrics *bool) *QueryAPIParams {
	o.SetIncludeObsoleteMetrics(includeObsoleteMetrics)
	return o
}

// SetIncludeObsoleteMetrics adds the includeObsoleteMetrics to the query Api params
func (o *QueryAPIParams) SetIncludeObsoleteMetrics(includeObsoleteMetrics *bool) {
	o.IncludeObsoleteMetrics = includeObsoleteMetrics
}

// WithListMode adds the listMode to the query Api params
func (o *QueryAPIParams) WithListMode(listMode *bool) *QueryAPIParams {
	o.SetListMode(listMode)
	return o
}

// SetListMode adds the listMode to the query Api params
func (o *QueryAPIParams) SetListMode(listMode *bool) {
	o.ListMode = listMode
}

// WithN adds the n to the query Api params
func (o *QueryAPIParams) WithN(n *string) *QueryAPIParams {
	o.SetN(n)
	return o
}

// SetN adds the n to the query Api params
func (o *QueryAPIParams) SetN(n *string) {
	o.N = n
}

// WithP adds the p to the query Api params
func (o *QueryAPIParams) WithP(p *string) *QueryAPIParams {
	o.SetP(p)
	return o
}

// SetP adds the p to the query Api params
func (o *QueryAPIParams) SetP(p *string) {
	o.P = p
}

// WithQ adds the q to the query Api params
func (o *QueryAPIParams) WithQ(q string) *QueryAPIParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the query Api params
func (o *QueryAPIParams) SetQ(q string) {
	o.Q = q
}

// WithQueryType adds the queryType to the query Api params
func (o *QueryAPIParams) WithQueryType(queryType *string) *QueryAPIParams {
	o.SetQueryType(queryType)
	return o
}

// SetQueryType adds the queryType to the query Api params
func (o *QueryAPIParams) SetQueryType(queryType *string) {
	o.QueryType = queryType
}

// WithS adds the s to the query Api params
func (o *QueryAPIParams) WithS(s string) *QueryAPIParams {
	o.SetS(s)
	return o
}

// SetS adds the s to the query Api params
func (o *QueryAPIParams) SetS(s string) {
	o.S = s
}

// WithSorted adds the sorted to the query Api params
func (o *QueryAPIParams) WithSorted(sorted *bool) *QueryAPIParams {
	o.SetSorted(sorted)
	return o
}

// SetSorted adds the sorted to the query Api params
func (o *QueryAPIParams) SetSorted(sorted *bool) {
	o.Sorted = sorted
}

// WithStrict adds the strict to the query Api params
func (o *QueryAPIParams) WithStrict(strict *bool) *QueryAPIParams {
	o.SetStrict(strict)
	return o
}

// SetStrict adds the strict to the query Api params
func (o *QueryAPIParams) SetStrict(strict *bool) {
	o.Strict = strict
}

// WithSummarization adds the summarization to the query Api params
func (o *QueryAPIParams) WithSummarization(summarization *string) *QueryAPIParams {
	o.SetSummarization(summarization)
	return o
}

// SetSummarization adds the summarization to the query Api params
func (o *QueryAPIParams) SetSummarization(summarization *string) {
	o.Summarization = summarization
}

// WithUseRawQK adds the useRawQK to the query Api params
func (o *QueryAPIParams) WithUseRawQK(useRawQK *bool) *QueryAPIParams {
	o.SetUseRawQK(useRawQK)
	return o
}

// SetUseRawQK adds the useRawQK to the query Api params
func (o *QueryAPIParams) SetUseRawQK(useRawQK *bool) {
	o.UseRawQK = useRawQK
}

// WithView adds the view to the query Api params
func (o *QueryAPIParams) WithView(view *string) *QueryAPIParams {
	o.SetView(view)
	return o
}

// SetView adds the view to the query Api params
func (o *QueryAPIParams) SetView(view *string) {
	o.View = view
}

// WriteToRequest writes these params to a swagger request
func (o *QueryAPIParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AutoEvents != nil {

		// query param autoEvents
		var qrAutoEvents bool

		if o.AutoEvents != nil {
			qrAutoEvents = *o.AutoEvents
		}
		qAutoEvents := swag.FormatBool(qrAutoEvents)
		if qAutoEvents != "" {

			if err := r.SetQueryParam("autoEvents", qAutoEvents); err != nil {
				return err
			}
		}
	}

	if o.Cached != nil {

		// query param cached
		var qrCached bool

		if o.Cached != nil {
			qrCached = *o.Cached
		}
		qCached := swag.FormatBool(qrCached)
		if qCached != "" {

			if err := r.SetQueryParam("cached", qCached); err != nil {
				return err
			}
		}
	}

	if o.DimensionTuples != nil {

		// binding items for dimensionTuples
		joinedDimensionTuples := o.bindParamDimensionTuples(reg)

		// query array param dimensionTuples
		if err := r.SetQueryParam("dimensionTuples", joinedDimensionTuples...); err != nil {
			return err
		}
	}

	if o.E != nil {

		// query param e
		var qrE string

		if o.E != nil {
			qrE = *o.E
		}
		qE := qrE
		if qE != "" {

			if err := r.SetQueryParam("e", qE); err != nil {
				return err
			}
		}
	}

	// query param g
	qrG := o.G
	qG := qrG
	if qG != "" {

		if err := r.SetQueryParam("g", qG); err != nil {
			return err
		}
	}

	if o.I != nil {

		// query param i
		var qrI bool

		if o.I != nil {
			qrI = *o.I
		}
		qI := swag.FormatBool(qrI)
		if qI != "" {

			if err := r.SetQueryParam("i", qI); err != nil {
				return err
			}
		}
	}

	if o.IncludeObsoleteMetrics != nil {

		// query param includeObsoleteMetrics
		var qrIncludeObsoleteMetrics bool

		if o.IncludeObsoleteMetrics != nil {
			qrIncludeObsoleteMetrics = *o.IncludeObsoleteMetrics
		}
		qIncludeObsoleteMetrics := swag.FormatBool(qrIncludeObsoleteMetrics)
		if qIncludeObsoleteMetrics != "" {

			if err := r.SetQueryParam("includeObsoleteMetrics", qIncludeObsoleteMetrics); err != nil {
				return err
			}
		}
	}

	if o.ListMode != nil {

		// query param listMode
		var qrListMode bool

		if o.ListMode != nil {
			qrListMode = *o.ListMode
		}
		qListMode := swag.FormatBool(qrListMode)
		if qListMode != "" {

			if err := r.SetQueryParam("listMode", qListMode); err != nil {
				return err
			}
		}
	}

	if o.N != nil {

		// query param n
		var qrN string

		if o.N != nil {
			qrN = *o.N
		}
		qN := qrN
		if qN != "" {

			if err := r.SetQueryParam("n", qN); err != nil {
				return err
			}
		}
	}

	if o.P != nil {

		// query param p
		var qrP string

		if o.P != nil {
			qrP = *o.P
		}
		qP := qrP
		if qP != "" {

			if err := r.SetQueryParam("p", qP); err != nil {
				return err
			}
		}
	}

	// query param q
	qrQ := o.Q
	qQ := qrQ
	if qQ != "" {

		if err := r.SetQueryParam("q", qQ); err != nil {
			return err
		}
	}

	if o.QueryType != nil {

		// query param queryType
		var qrQueryType string

		if o.QueryType != nil {
			qrQueryType = *o.QueryType
		}
		qQueryType := qrQueryType
		if qQueryType != "" {

			if err := r.SetQueryParam("queryType", qQueryType); err != nil {
				return err
			}
		}
	}

	// query param s
	qrS := o.S
	qS := qrS
	if qS != "" {

		if err := r.SetQueryParam("s", qS); err != nil {
			return err
		}
	}

	if o.Sorted != nil {

		// query param sorted
		var qrSorted bool

		if o.Sorted != nil {
			qrSorted = *o.Sorted
		}
		qSorted := swag.FormatBool(qrSorted)
		if qSorted != "" {

			if err := r.SetQueryParam("sorted", qSorted); err != nil {
				return err
			}
		}
	}

	if o.Strict != nil {

		// query param strict
		var qrStrict bool

		if o.Strict != nil {
			qrStrict = *o.Strict
		}
		qStrict := swag.FormatBool(qrStrict)
		if qStrict != "" {

			if err := r.SetQueryParam("strict", qStrict); err != nil {
				return err
			}
		}
	}

	if o.Summarization != nil {

		// query param summarization
		var qrSummarization string

		if o.Summarization != nil {
			qrSummarization = *o.Summarization
		}
		qSummarization := qrSummarization
		if qSummarization != "" {

			if err := r.SetQueryParam("summarization", qSummarization); err != nil {
				return err
			}
		}
	}

	if o.UseRawQK != nil {

		// query param useRawQK
		var qrUseRawQK bool

		if o.UseRawQK != nil {
			qrUseRawQK = *o.UseRawQK
		}
		qUseRawQK := swag.FormatBool(qrUseRawQK)
		if qUseRawQK != "" {

			if err := r.SetQueryParam("useRawQK", qUseRawQK); err != nil {
				return err
			}
		}
	}

	if o.View != nil {

		// query param view
		var qrView string

		if o.View != nil {
			qrView = *o.View
		}
		qView := qrView
		if qView != "" {

			if err := r.SetQueryParam("view", qView); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamQueryAPI binds the parameter dimensionTuples
func (o *QueryAPIParams) bindParamDimensionTuples(formats strfmt.Registry) []string {
	dimensionTuplesIR := o.DimensionTuples

	var dimensionTuplesIC []string
	for _, dimensionTuplesIIR := range dimensionTuplesIR { // explode []string

		dimensionTuplesIIV := dimensionTuplesIIR // string as string
		dimensionTuplesIC = append(dimensionTuplesIC, dimensionTuplesIIV)
	}

	// items.CollectionFormat: "multi"
	dimensionTuplesIS := swag.JoinByFormat(dimensionTuplesIC, "multi")

	return dimensionTuplesIS
}
