// Code generated by go-swagger; DO NOT EDIT.

package query

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewQueryRawParams creates a new QueryRawParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryRawParams() *QueryRawParams {
	return &QueryRawParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryRawParamsWithTimeout creates a new QueryRawParams object
// with the ability to set a timeout on a request.
func NewQueryRawParamsWithTimeout(timeout time.Duration) *QueryRawParams {
	return &QueryRawParams{
		timeout: timeout,
	}
}

// NewQueryRawParamsWithContext creates a new QueryRawParams object
// with the ability to set a context for a request.
func NewQueryRawParamsWithContext(ctx context.Context) *QueryRawParams {
	return &QueryRawParams{
		Context: ctx,
	}
}

// NewQueryRawParamsWithHTTPClient creates a new QueryRawParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryRawParamsWithHTTPClient(client *http.Client) *QueryRawParams {
	return &QueryRawParams{
		HTTPClient: client,
	}
}

/*
QueryRawParams contains all the parameters to send to the API endpoint

	for the query raw operation.

	Typically these are written to a http.Request.
*/
type QueryRawParams struct {

	/* EndTime.

	   end time in epoch milliseconds (cannot be more than a day in the past) null to use now

	   Format: int64
	*/
	EndTime *int64

	/* Host.

	   host to query ingested points for (cannot contain wildcards). host or source is equivalent, only one should be used.
	*/
	Host *string

	/* Metric.

	   metric to query ingested points for (cannot contain wildcards)
	*/
	Metric string

	/* Source.

	   source to query ingested points for (cannot contain wildcards). host or source is equivalent, only one should be used.
	*/
	Source *string

	/* StartTime.

	   start time in epoch milliseconds (cannot be more than a day in the past) null to use an hour before endTime

	   Format: int64
	*/
	StartTime *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query raw params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryRawParams) WithDefaults() *QueryRawParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query raw params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryRawParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the query raw params
func (o *QueryRawParams) WithTimeout(timeout time.Duration) *QueryRawParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query raw params
func (o *QueryRawParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query raw params
func (o *QueryRawParams) WithContext(ctx context.Context) *QueryRawParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query raw params
func (o *QueryRawParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query raw params
func (o *QueryRawParams) WithHTTPClient(client *http.Client) *QueryRawParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query raw params
func (o *QueryRawParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndTime adds the endTime to the query raw params
func (o *QueryRawParams) WithEndTime(endTime *int64) *QueryRawParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the query raw params
func (o *QueryRawParams) SetEndTime(endTime *int64) {
	o.EndTime = endTime
}

// WithHost adds the host to the query raw params
func (o *QueryRawParams) WithHost(host *string) *QueryRawParams {
	o.SetHost(host)
	return o
}

// SetHost adds the host to the query raw params
func (o *QueryRawParams) SetHost(host *string) {
	o.Host = host
}

// WithMetric adds the metric to the query raw params
func (o *QueryRawParams) WithMetric(metric string) *QueryRawParams {
	o.SetMetric(metric)
	return o
}

// SetMetric adds the metric to the query raw params
func (o *QueryRawParams) SetMetric(metric string) {
	o.Metric = metric
}

// WithSource adds the source to the query raw params
func (o *QueryRawParams) WithSource(source *string) *QueryRawParams {
	o.SetSource(source)
	return o
}

// SetSource adds the source to the query raw params
func (o *QueryRawParams) SetSource(source *string) {
	o.Source = source
}

// WithStartTime adds the startTime to the query raw params
func (o *QueryRawParams) WithStartTime(startTime *int64) *QueryRawParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the query raw params
func (o *QueryRawParams) SetStartTime(startTime *int64) {
	o.StartTime = startTime
}

// WriteToRequest writes these params to a swagger request
func (o *QueryRawParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime int64

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := swag.FormatInt64(qrEndTime)
		if qEndTime != "" {

			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.Host != nil {

		// query param host
		var qrHost string

		if o.Host != nil {
			qrHost = *o.Host
		}
		qHost := qrHost
		if qHost != "" {

			if err := r.SetQueryParam("host", qHost); err != nil {
				return err
			}
		}
	}

	// query param metric
	qrMetric := o.Metric
	qMetric := qrMetric
	if qMetric != "" {

		if err := r.SetQueryParam("metric", qMetric); err != nil {
			return err
		}
	}

	if o.Source != nil {

		// query param source
		var qrSource string

		if o.Source != nil {
			qrSource = *o.Source
		}
		qSource := qrSource
		if qSource != "" {

			if err := r.SetQueryParam("source", qSource); err != nil {
				return err
			}
		}
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime int64

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := swag.FormatInt64(qrStartTime)
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
