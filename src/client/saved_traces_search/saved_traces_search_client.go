// Code generated by go-swagger; DO NOT EDIT.

package saved_traces_search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new saved traces search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for saved traces search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSavedTracesSearch(params *CreateSavedTracesSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSavedTracesSearchOK, error)

	DefaultAppMapSearch3(params *DefaultAppMapSearch3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefaultAppMapSearch3OK, error)

	DefaultCustomerTracesSearch(params *DefaultCustomerTracesSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefaultCustomerTracesSearchOK, error)

	DefaultTracesSearch(params *DefaultTracesSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefaultTracesSearchOK, error)

	DeleteSavedTracesSearch(params *DeleteSavedTracesSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSavedTracesSearchOK, error)

	DeleteSavedTracesSearchForUser(params *DeleteSavedTracesSearchForUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSavedTracesSearchForUserOK, error)

	GetAllSavedTracesSearches(params *GetAllSavedTracesSearchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSavedTracesSearchesOK, error)

	GetAllSavedTracesSearchesForUser(params *GetAllSavedTracesSearchesForUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSavedTracesSearchesForUserOK, error)

	GetSavedTracesSearch(params *GetSavedTracesSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedTracesSearchOK, error)

	UpdateSavedTracesSearch(params *UpdateSavedTracesSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSavedTracesSearchOK, error)

	UpdateSavedTracesSearchForUser(params *UpdateSavedTracesSearchForUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSavedTracesSearchForUserOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateSavedTracesSearch creates a search
*/
func (a *Client) CreateSavedTracesSearch(params *CreateSavedTracesSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSavedTracesSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSavedTracesSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSavedTracesSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/savedtracessearch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSavedTracesSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSavedTracesSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSavedTracesSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DefaultAppMapSearch3 sets default traces search at user level
*/
func (a *Client) DefaultAppMapSearch3(params *DefaultAppMapSearch3Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefaultAppMapSearch3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDefaultAppMapSearch3Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "defaultAppMapSearch_3",
		Method:             "POST",
		PathPattern:        "/api/v2/savedtracessearch/defaultTracesSearch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DefaultAppMapSearch3Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DefaultAppMapSearch3OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for defaultAppMapSearch_3: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DefaultCustomerTracesSearch sets default traces search at customer level
*/
func (a *Client) DefaultCustomerTracesSearch(params *DefaultCustomerTracesSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefaultCustomerTracesSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDefaultCustomerTracesSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "defaultCustomerTracesSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/savedtracessearch/defaultCustomerTracesSearch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DefaultCustomerTracesSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DefaultCustomerTracesSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for defaultCustomerTracesSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DefaultTracesSearch gets default traces search for a user
*/
func (a *Client) DefaultTracesSearch(params *DefaultTracesSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DefaultTracesSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDefaultTracesSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "defaultTracesSearch",
		Method:             "GET",
		PathPattern:        "/api/v2/savedtracessearch/defaultTracesSearch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DefaultTracesSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DefaultTracesSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for defaultTracesSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSavedTracesSearch deletes a search
*/
func (a *Client) DeleteSavedTracesSearch(params *DeleteSavedTracesSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSavedTracesSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSavedTracesSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSavedTracesSearch",
		Method:             "DELETE",
		PathPattern:        "/api/v2/savedtracessearch/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSavedTracesSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSavedTracesSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSavedTracesSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSavedTracesSearchForUser deletes a search belonging to the user
*/
func (a *Client) DeleteSavedTracesSearchForUser(params *DeleteSavedTracesSearchForUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSavedTracesSearchForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSavedTracesSearchForUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSavedTracesSearchForUser",
		Method:             "DELETE",
		PathPattern:        "/api/v2/savedtracessearch/owned/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSavedTracesSearchForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSavedTracesSearchForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSavedTracesSearchForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSavedTracesSearches gets all searches for a customer
*/
func (a *Client) GetAllSavedTracesSearches(params *GetAllSavedTracesSearchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSavedTracesSearchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSavedTracesSearchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSavedTracesSearches",
		Method:             "GET",
		PathPattern:        "/api/v2/savedtracessearch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSavedTracesSearchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSavedTracesSearchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSavedTracesSearches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSavedTracesSearchesForUser gets all searches for a user
*/
func (a *Client) GetAllSavedTracesSearchesForUser(params *GetAllSavedTracesSearchesForUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSavedTracesSearchesForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSavedTracesSearchesForUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSavedTracesSearchesForUser",
		Method:             "GET",
		PathPattern:        "/api/v2/savedtracessearch/owned",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSavedTracesSearchesForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSavedTracesSearchesForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSavedTracesSearchesForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSavedTracesSearch gets a specific search
*/
func (a *Client) GetSavedTracesSearch(params *GetSavedTracesSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedTracesSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSavedTracesSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSavedTracesSearch",
		Method:             "GET",
		PathPattern:        "/api/v2/savedtracessearch/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSavedTracesSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSavedTracesSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSavedTracesSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSavedTracesSearch updates a search
*/
func (a *Client) UpdateSavedTracesSearch(params *UpdateSavedTracesSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSavedTracesSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSavedTracesSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSavedTracesSearch",
		Method:             "PUT",
		PathPattern:        "/api/v2/savedtracessearch/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSavedTracesSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSavedTracesSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSavedTracesSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSavedTracesSearchForUser updates a search belonging to the user
*/
func (a *Client) UpdateSavedTracesSearchForUser(params *UpdateSavedTracesSearchForUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSavedTracesSearchForUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSavedTracesSearchForUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSavedTracesSearchForUser",
		Method:             "PUT",
		PathPattern:        "/api/v2/savedtracessearch/owned/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSavedTracesSearchForUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSavedTracesSearchForUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSavedTracesSearchForUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
