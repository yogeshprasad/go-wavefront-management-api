// Code generated by go-swagger; DO NOT EDIT.

package direct_ingestion

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewReportParams creates a new ReportParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewReportParams() *ReportParams {
	return &ReportParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewReportParamsWithTimeout creates a new ReportParams object
// with the ability to set a timeout on a request.
func NewReportParamsWithTimeout(timeout time.Duration) *ReportParams {
	return &ReportParams{
		timeout: timeout,
	}
}

// NewReportParamsWithContext creates a new ReportParams object
// with the ability to set a context for a request.
func NewReportParamsWithContext(ctx context.Context) *ReportParams {
	return &ReportParams{
		Context: ctx,
	}
}

// NewReportParamsWithHTTPClient creates a new ReportParams object
// with the ability to set a custom HTTPClient for a request.
func NewReportParamsWithHTTPClient(client *http.Client) *ReportParams {
	return &ReportParams{
		HTTPClient: client,
	}
}

/*
ReportParams contains all the parameters to send to the API endpoint

	for the report operation.

	Typically these are written to a http.Request.
*/
type ReportParams struct {

	/* Body.

	     Data to be ingested, in the specified format.  See https://docs.wavefront.com/direct_ingestion.html for more detail on how to format the data. Example in "wavefront" format:
	<pre>test.metric 100 source=test.source</pre>
	which ingests a time series point with metric name "test.metric", source name "test.source", and value of 100 with timestamp of now.
	*/
	Body string

	/* F.

	   Format of data to be ingested

	   Default: "wavefront"
	*/
	F *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReportParams) WithDefaults() *ReportParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the report params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReportParams) SetDefaults() {
	var (
		fDefault = string("wavefront")
	)

	val := ReportParams{
		F: &fDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the report params
func (o *ReportParams) WithTimeout(timeout time.Duration) *ReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the report params
func (o *ReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the report params
func (o *ReportParams) WithContext(ctx context.Context) *ReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the report params
func (o *ReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the report params
func (o *ReportParams) WithHTTPClient(client *http.Client) *ReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the report params
func (o *ReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the report params
func (o *ReportParams) WithBody(body string) *ReportParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the report params
func (o *ReportParams) SetBody(body string) {
	o.Body = body
}

// WithF adds the f to the report params
func (o *ReportParams) WithF(f *string) *ReportParams {
	o.SetF(f)
	return o
}

// SetF adds the f to the report params
func (o *ReportParams) SetF(f *string) {
	o.F = f
}

// WriteToRequest writes these params to a swagger request
func (o *ReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.F != nil {

		// query param f
		var qrF string

		if o.F != nil {
			qrF = *o.F
		}
		qF := qrF
		if qF != "" {

			if err := r.SetQueryParam("f", qF); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
