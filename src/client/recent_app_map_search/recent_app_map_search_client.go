// Code generated by go-swagger; DO NOT EDIT.

package recent_app_map_search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new recent app map search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for recent app map search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRecentAppMapSearch(params *CreateRecentAppMapSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRecentAppMapSearchOK, error)

	GetAllRecentAppMapSearches(params *GetAllRecentAppMapSearchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllRecentAppMapSearchesOK, error)

	GetRecentAppMapSearch(params *GetRecentAppMapSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRecentAppMapSearchOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateRecentAppMapSearch creates a search
*/
func (a *Client) CreateRecentAppMapSearch(params *CreateRecentAppMapSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRecentAppMapSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRecentAppMapSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRecentAppMapSearch",
		Method:             "POST",
		PathPattern:        "/api/v2/recentappmapsearch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateRecentAppMapSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRecentAppMapSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRecentAppMapSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllRecentAppMapSearches gets all searches for a user
*/
func (a *Client) GetAllRecentAppMapSearches(params *GetAllRecentAppMapSearchesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllRecentAppMapSearchesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllRecentAppMapSearchesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllRecentAppMapSearches",
		Method:             "GET",
		PathPattern:        "/api/v2/recentappmapsearch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllRecentAppMapSearchesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllRecentAppMapSearchesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllRecentAppMapSearches: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetRecentAppMapSearch gets a specific search
*/
func (a *Client) GetRecentAppMapSearch(params *GetRecentAppMapSearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRecentAppMapSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecentAppMapSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRecentAppMapSearch",
		Method:             "GET",
		PathPattern:        "/api/v2/recentappmapsearch/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRecentAppMapSearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRecentAppMapSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRecentAppMapSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
