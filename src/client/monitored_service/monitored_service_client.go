// Code generated by go-swagger; DO NOT EDIT.

package monitored_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new monitored service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for monitored service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	BatchUpdate(params *BatchUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BatchUpdateOK, *BatchUpdateNoContent, *BatchUpdateMultiStatus, error)

	GetAllComponents(params *GetAllComponentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllComponentsOK, error)

	GetAllServices(params *GetAllServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllServicesOK, error)

	GetComponent(params *GetComponentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComponentOK, error)

	GetService(params *GetServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceOK, error)

	GetServicesOfApplication(params *GetServicesOfApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServicesOfApplicationOK, error)

	UpdateService2(params *UpdateService2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateService2OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
BatchUpdate updates multiple applications and services in a batch batch size is limited to 100
*/
func (a *Client) BatchUpdate(params *BatchUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*BatchUpdateOK, *BatchUpdateNoContent, *BatchUpdateMultiStatus, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewBatchUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "batchUpdate",
		Method:             "PUT",
		PathPattern:        "/api/v2/monitoredservice/services",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &BatchUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, nil, err
	}
	switch value := result.(type) {
	case *BatchUpdateOK:
		return value, nil, nil, nil
	case *BatchUpdateNoContent:
		return nil, value, nil, nil
	case *BatchUpdateMultiStatus:
		return nil, nil, value, nil
	}
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for monitored_service: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllComponents gets all monitored services with components
*/
func (a *Client) GetAllComponents(params *GetAllComponentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllComponentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllComponentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllComponents",
		Method:             "GET",
		PathPattern:        "/api/v2/monitoredservice/components",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllComponentsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllComponentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllComponents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllServices gets all monitored services
*/
func (a *Client) GetAllServices(params *GetAllServicesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllServicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllServicesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllServices",
		Method:             "GET",
		PathPattern:        "/api/v2/monitoredservice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllServicesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllServicesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllServices: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetComponent gets a specific application
*/
func (a *Client) GetComponent(params *GetComponentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetComponentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetComponentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getComponent",
		Method:             "GET",
		PathPattern:        "/api/v2/monitoredservice/{application}/{service}/{component}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetComponentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetComponentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getComponent: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetService gets a specific application
*/
func (a *Client) GetService(params *GetServiceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getService",
		Method:             "GET",
		PathPattern:        "/api/v2/monitoredservice/{application}/{service}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServiceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getService: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServicesOfApplication gets a specific application
*/
func (a *Client) GetServicesOfApplication(params *GetServicesOfApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServicesOfApplicationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesOfApplicationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServicesOfApplication",
		Method:             "GET",
		PathPattern:        "/api/v2/monitoredservice/{application}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesOfApplicationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicesOfApplicationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServicesOfApplication: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateService2 updates a specific service
*/
func (a *Client) UpdateService2(params *UpdateService2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateService2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateService2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateService_2",
		Method:             "PUT",
		PathPattern:        "/api/v2/monitoredservice/{application}/{service}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateService2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateService2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateService_2: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
