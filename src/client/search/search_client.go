// Code generated by go-swagger; DO NOT EDIT.

package search

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new search API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for search API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SearchAccountEntities(params *SearchAccountEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAccountEntitiesOK, error)

	SearchAccountForFacet(params *SearchAccountForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAccountForFacetOK, error)

	SearchAccountForFacets(params *SearchAccountForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAccountForFacetsOK, error)

	SearchAlertDeletedEntities(params *SearchAlertDeletedEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAlertDeletedEntitiesOK, error)

	SearchAlertDeletedForFacet(params *SearchAlertDeletedForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAlertDeletedForFacetOK, error)

	SearchAlertDeletedForFacets(params *SearchAlertDeletedForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAlertDeletedForFacetsOK, error)

	SearchAlertEntities(params *SearchAlertEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAlertEntitiesOK, error)

	SearchAlertForFacet(params *SearchAlertForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAlertForFacetOK, error)

	SearchAlertForFacets(params *SearchAlertForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAlertForFacetsOK, error)

	SearchCloudIntegrationDeletedEntities(params *SearchCloudIntegrationDeletedEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCloudIntegrationDeletedEntitiesOK, error)

	SearchCloudIntegrationDeletedForFacet(params *SearchCloudIntegrationDeletedForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCloudIntegrationDeletedForFacetOK, error)

	SearchCloudIntegrationDeletedForFacets(params *SearchCloudIntegrationDeletedForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCloudIntegrationDeletedForFacetsOK, error)

	SearchCloudIntegrationEntities(params *SearchCloudIntegrationEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCloudIntegrationEntitiesOK, error)

	SearchCloudIntegrationForFacet(params *SearchCloudIntegrationForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCloudIntegrationForFacetOK, error)

	SearchCloudIntegrationForFacets(params *SearchCloudIntegrationForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCloudIntegrationForFacetsOK, error)

	SearchDashboardDeletedEntities(params *SearchDashboardDeletedEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDashboardDeletedEntitiesOK, error)

	SearchDashboardDeletedForFacet(params *SearchDashboardDeletedForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDashboardDeletedForFacetOK, error)

	SearchDashboardDeletedForFacets(params *SearchDashboardDeletedForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDashboardDeletedForFacetsOK, error)

	SearchDashboardEntities(params *SearchDashboardEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDashboardEntitiesOK, error)

	SearchDashboardForFacet(params *SearchDashboardForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDashboardForFacetOK, error)

	SearchDashboardForFacets(params *SearchDashboardForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDashboardForFacetsOK, error)

	SearchExternalLinkEntities(params *SearchExternalLinkEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchExternalLinkEntitiesOK, error)

	SearchExternalLinksForFacet(params *SearchExternalLinksForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchExternalLinksForFacetOK, error)

	SearchExternalLinksForFacets(params *SearchExternalLinksForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchExternalLinksForFacetsOK, error)

	SearchIngestionPolicyEntities(params *SearchIngestionPolicyEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchIngestionPolicyEntitiesOK, error)

	SearchIngestionPolicyForFacet(params *SearchIngestionPolicyForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchIngestionPolicyForFacetOK, error)

	SearchIngestionPolicyForFacets(params *SearchIngestionPolicyForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchIngestionPolicyForFacetsOK, error)

	SearchMaintenanceWindowEntities(params *SearchMaintenanceWindowEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMaintenanceWindowEntitiesOK, error)

	SearchMaintenanceWindowForFacet(params *SearchMaintenanceWindowForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMaintenanceWindowForFacetOK, error)

	SearchMaintenanceWindowForFacets(params *SearchMaintenanceWindowForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMaintenanceWindowForFacetsOK, error)

	SearchMonitoredApplicationEntities(params *SearchMonitoredApplicationEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMonitoredApplicationEntitiesOK, error)

	SearchMonitoredApplicationForFacet(params *SearchMonitoredApplicationForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMonitoredApplicationForFacetOK, error)

	SearchMonitoredApplicationForFacets(params *SearchMonitoredApplicationForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMonitoredApplicationForFacetsOK, error)

	SearchMonitoredServiceEntities(params *SearchMonitoredServiceEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMonitoredServiceEntitiesOK, error)

	SearchMonitoredServiceForFacet(params *SearchMonitoredServiceForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMonitoredServiceForFacetOK, error)

	SearchMonitoredServiceForFacets(params *SearchMonitoredServiceForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMonitoredServiceForFacetsOK, error)

	SearchNotficantForFacets(params *SearchNotficantForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchNotficantForFacetsOK, error)

	SearchNotificantEntities(params *SearchNotificantEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchNotificantEntitiesOK, error)

	SearchNotificantForFacet(params *SearchNotificantForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchNotificantForFacetOK, error)

	SearchProxyDeletedEntities(params *SearchProxyDeletedEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProxyDeletedEntitiesOK, error)

	SearchProxyDeletedForFacet(params *SearchProxyDeletedForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProxyDeletedForFacetOK, error)

	SearchProxyDeletedForFacets(params *SearchProxyDeletedForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProxyDeletedForFacetsOK, error)

	SearchProxyEntities(params *SearchProxyEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProxyEntitiesOK, error)

	SearchProxyForFacet(params *SearchProxyForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProxyForFacetOK, error)

	SearchProxyForFacets(params *SearchProxyForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProxyForFacetsOK, error)

	SearchRegisteredQueryDeletedEntities(params *SearchRegisteredQueryDeletedEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRegisteredQueryDeletedEntitiesOK, error)

	SearchRegisteredQueryDeletedForFacet(params *SearchRegisteredQueryDeletedForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRegisteredQueryDeletedForFacetOK, error)

	SearchRegisteredQueryDeletedForFacets(params *SearchRegisteredQueryDeletedForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRegisteredQueryDeletedForFacetsOK, error)

	SearchRegisteredQueryEntities(params *SearchRegisteredQueryEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRegisteredQueryEntitiesOK, error)

	SearchRegisteredQueryForFacet(params *SearchRegisteredQueryForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRegisteredQueryForFacetOK, error)

	SearchRegisteredQueryForFacets(params *SearchRegisteredQueryForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRegisteredQueryForFacetsOK, error)

	SearchRelatedReportEventAnomalyEntities(params *SearchRelatedReportEventAnomalyEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRelatedReportEventAnomalyEntitiesOK, error)

	SearchRelatedReportEventEntities(params *SearchRelatedReportEventEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRelatedReportEventEntitiesOK, error)

	SearchReportEventEntities(params *SearchReportEventEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchReportEventEntitiesOK, error)

	SearchReportEventForFacet(params *SearchReportEventForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchReportEventForFacetOK, error)

	SearchReportEventForFacets(params *SearchReportEventForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchReportEventForFacetsOK, error)

	SearchRoleEntities(params *SearchRoleEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRoleEntitiesOK, error)

	SearchRoleForFacet(params *SearchRoleForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRoleForFacetOK, error)

	SearchRoleForFacets(params *SearchRoleForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRoleForFacetsOK, error)

	SearchSavedAppMapEntities(params *SearchSavedAppMapEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSavedAppMapEntitiesOK, error)

	SearchSavedAppMapForFacet(params *SearchSavedAppMapForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSavedAppMapForFacetOK, error)

	SearchSavedAppMapForFacets(params *SearchSavedAppMapForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSavedAppMapForFacetsOK, error)

	SearchSavedTracesEntities(params *SearchSavedTracesEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSavedTracesEntitiesOK, error)

	SearchServiceAccountEntities(params *SearchServiceAccountEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchServiceAccountEntitiesOK, error)

	SearchServiceAccountForFacet(params *SearchServiceAccountForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchServiceAccountForFacetOK, error)

	SearchServiceAccountForFacets(params *SearchServiceAccountForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchServiceAccountForFacetsOK, error)

	SearchSpanSamplingPolicyDeletedEntities(params *SearchSpanSamplingPolicyDeletedEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSpanSamplingPolicyDeletedEntitiesOK, error)

	SearchSpanSamplingPolicyDeletedForFacet(params *SearchSpanSamplingPolicyDeletedForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSpanSamplingPolicyDeletedForFacetOK, error)

	SearchSpanSamplingPolicyDeletedForFacets(params *SearchSpanSamplingPolicyDeletedForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSpanSamplingPolicyDeletedForFacetsOK, error)

	SearchSpanSamplingPolicyEntities(params *SearchSpanSamplingPolicyEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSpanSamplingPolicyEntitiesOK, error)

	SearchSpanSamplingPolicyForFacet(params *SearchSpanSamplingPolicyForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSpanSamplingPolicyForFacetOK, error)

	SearchSpanSamplingPolicyForFacets(params *SearchSpanSamplingPolicyForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSpanSamplingPolicyForFacetsOK, error)

	SearchTaggedSourceEntities(params *SearchTaggedSourceEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTaggedSourceEntitiesOK, error)

	SearchTaggedSourceForFacet(params *SearchTaggedSourceForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTaggedSourceForFacetOK, error)

	SearchTaggedSourceForFacets(params *SearchTaggedSourceForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTaggedSourceForFacetsOK, error)

	SearchTokenEntities(params *SearchTokenEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTokenEntitiesOK, error)

	SearchTokenForFacet(params *SearchTokenForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTokenForFacetOK, error)

	SearchTokenForFacets(params *SearchTokenForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTokenForFacetsOK, error)

	SearchTracesMapForFacet(params *SearchTracesMapForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTracesMapForFacetOK, error)

	SearchTracesMapForFacets(params *SearchTracesMapForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTracesMapForFacetsOK, error)

	SearchUserEntities(params *SearchUserEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchUserEntitiesOK, error)

	SearchUserForFacet(params *SearchUserForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchUserForFacetOK, error)

	SearchUserForFacets(params *SearchUserForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchUserForFacetsOK, error)

	SearchUserGroupEntities(params *SearchUserGroupEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchUserGroupEntitiesOK, error)

	SearchUserGroupForFacet(params *SearchUserGroupForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchUserGroupForFacetOK, error)

	SearchUserGroupForFacets(params *SearchUserGroupForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchUserGroupForFacetsOK, error)

	SearchWebHookEntities(params *SearchWebHookEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchWebHookEntitiesOK, error)

	SearchWebHookForFacet(params *SearchWebHookForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchWebHookForFacetOK, error)

	SearchWebhookForFacets(params *SearchWebhookForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchWebhookForFacetsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
SearchAccountEntities searches over a customer s accounts
*/
func (a *Client) SearchAccountEntities(params *SearchAccountEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAccountEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAccountEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchAccountEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchAccountEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAccountEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchAccountEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchAccountForFacet lists the values of a specific facet over the customer s accounts
*/
func (a *Client) SearchAccountForFacet(params *SearchAccountForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAccountForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAccountForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchAccountForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/account/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchAccountForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAccountForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchAccountForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchAccountForFacets lists the values of one or more facets over the customer s accounts
*/
func (a *Client) SearchAccountForFacets(params *SearchAccountForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAccountForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAccountForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchAccountForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/account/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchAccountForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAccountForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchAccountForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchAlertDeletedEntities searches over a customer s deleted alerts
*/
func (a *Client) SearchAlertDeletedEntities(params *SearchAlertDeletedEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAlertDeletedEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAlertDeletedEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchAlertDeletedEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/alert/deleted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchAlertDeletedEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAlertDeletedEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchAlertDeletedEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchAlertDeletedForFacet lists the values of a specific facet over the customer s deleted alerts
*/
func (a *Client) SearchAlertDeletedForFacet(params *SearchAlertDeletedForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAlertDeletedForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAlertDeletedForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchAlertDeletedForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/alert/deleted/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchAlertDeletedForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAlertDeletedForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchAlertDeletedForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchAlertDeletedForFacets lists the values of one or more facets over the customer s deleted alerts
*/
func (a *Client) SearchAlertDeletedForFacets(params *SearchAlertDeletedForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAlertDeletedForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAlertDeletedForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchAlertDeletedForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/alert/deleted/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchAlertDeletedForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAlertDeletedForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchAlertDeletedForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchAlertEntities searches over a customer s non deleted alerts
*/
func (a *Client) SearchAlertEntities(params *SearchAlertEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAlertEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAlertEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchAlertEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/alert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchAlertEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAlertEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchAlertEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchAlertForFacet lists the values of a specific facet over the customer s non deleted alerts
*/
func (a *Client) SearchAlertForFacet(params *SearchAlertForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAlertForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAlertForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchAlertForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/alert/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchAlertForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAlertForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchAlertForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchAlertForFacets lists the values of one or more facets over the customer s non deleted alerts
*/
func (a *Client) SearchAlertForFacets(params *SearchAlertForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchAlertForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchAlertForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchAlertForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/alert/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchAlertForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchAlertForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchAlertForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchCloudIntegrationDeletedEntities searches over a customer s deleted cloud integrations
*/
func (a *Client) SearchCloudIntegrationDeletedEntities(params *SearchCloudIntegrationDeletedEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCloudIntegrationDeletedEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchCloudIntegrationDeletedEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchCloudIntegrationDeletedEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/cloudintegration/deleted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchCloudIntegrationDeletedEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchCloudIntegrationDeletedEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchCloudIntegrationDeletedEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchCloudIntegrationDeletedForFacet lists the values of a specific facet over the customer s deleted cloud integrations
*/
func (a *Client) SearchCloudIntegrationDeletedForFacet(params *SearchCloudIntegrationDeletedForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCloudIntegrationDeletedForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchCloudIntegrationDeletedForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchCloudIntegrationDeletedForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/cloudintegration/deleted/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchCloudIntegrationDeletedForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchCloudIntegrationDeletedForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchCloudIntegrationDeletedForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchCloudIntegrationDeletedForFacets lists the values of one or more facets over the customer s deleted cloud integrations
*/
func (a *Client) SearchCloudIntegrationDeletedForFacets(params *SearchCloudIntegrationDeletedForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCloudIntegrationDeletedForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchCloudIntegrationDeletedForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchCloudIntegrationDeletedForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/cloudintegration/deleted/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchCloudIntegrationDeletedForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchCloudIntegrationDeletedForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchCloudIntegrationDeletedForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchCloudIntegrationEntities searches over a customer s non deleted cloud integrations
*/
func (a *Client) SearchCloudIntegrationEntities(params *SearchCloudIntegrationEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCloudIntegrationEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchCloudIntegrationEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchCloudIntegrationEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/cloudintegration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchCloudIntegrationEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchCloudIntegrationEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchCloudIntegrationEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchCloudIntegrationForFacet lists the values of a specific facet over the customer s non deleted cloud integrations
*/
func (a *Client) SearchCloudIntegrationForFacet(params *SearchCloudIntegrationForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCloudIntegrationForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchCloudIntegrationForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchCloudIntegrationForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/cloudintegration/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchCloudIntegrationForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchCloudIntegrationForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchCloudIntegrationForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchCloudIntegrationForFacets lists the values of one or more facets over the customer s non deleted cloud integrations
*/
func (a *Client) SearchCloudIntegrationForFacets(params *SearchCloudIntegrationForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchCloudIntegrationForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchCloudIntegrationForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchCloudIntegrationForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/cloudintegration/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchCloudIntegrationForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchCloudIntegrationForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchCloudIntegrationForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchDashboardDeletedEntities searches over a customer s deleted dashboards
*/
func (a *Client) SearchDashboardDeletedEntities(params *SearchDashboardDeletedEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDashboardDeletedEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchDashboardDeletedEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchDashboardDeletedEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/dashboard/deleted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchDashboardDeletedEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchDashboardDeletedEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchDashboardDeletedEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchDashboardDeletedForFacet lists the values of a specific facet over the customer s deleted dashboards
*/
func (a *Client) SearchDashboardDeletedForFacet(params *SearchDashboardDeletedForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDashboardDeletedForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchDashboardDeletedForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchDashboardDeletedForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/dashboard/deleted/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchDashboardDeletedForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchDashboardDeletedForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchDashboardDeletedForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchDashboardDeletedForFacets lists the values of one or more facets over the customer s deleted dashboards
*/
func (a *Client) SearchDashboardDeletedForFacets(params *SearchDashboardDeletedForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDashboardDeletedForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchDashboardDeletedForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchDashboardDeletedForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/dashboard/deleted/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchDashboardDeletedForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchDashboardDeletedForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchDashboardDeletedForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchDashboardEntities searches over a customer s non deleted dashboards
*/
func (a *Client) SearchDashboardEntities(params *SearchDashboardEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDashboardEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchDashboardEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchDashboardEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/dashboard",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchDashboardEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchDashboardEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchDashboardEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchDashboardForFacet lists the values of a specific facet over the customer s non deleted dashboards
*/
func (a *Client) SearchDashboardForFacet(params *SearchDashboardForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDashboardForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchDashboardForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchDashboardForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/dashboard/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchDashboardForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchDashboardForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchDashboardForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchDashboardForFacets lists the values of one or more facets over the customer s non deleted dashboards
*/
func (a *Client) SearchDashboardForFacets(params *SearchDashboardForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchDashboardForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchDashboardForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchDashboardForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/dashboard/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchDashboardForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchDashboardForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchDashboardForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchExternalLinkEntities searches over a customer s external links
*/
func (a *Client) SearchExternalLinkEntities(params *SearchExternalLinkEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchExternalLinkEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchExternalLinkEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchExternalLinkEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/extlink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchExternalLinkEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchExternalLinkEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchExternalLinkEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchExternalLinksForFacet lists the values of a specific facet over the customer s external links
*/
func (a *Client) SearchExternalLinksForFacet(params *SearchExternalLinksForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchExternalLinksForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchExternalLinksForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchExternalLinksForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/extlink/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchExternalLinksForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchExternalLinksForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchExternalLinksForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchExternalLinksForFacets lists the values of one or more facets over the customer s external links
*/
func (a *Client) SearchExternalLinksForFacets(params *SearchExternalLinksForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchExternalLinksForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchExternalLinksForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchExternalLinksForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/extlink/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchExternalLinksForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchExternalLinksForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchExternalLinksForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchIngestionPolicyEntities searches over a customer s ingestion policies
*/
func (a *Client) SearchIngestionPolicyEntities(params *SearchIngestionPolicyEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchIngestionPolicyEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchIngestionPolicyEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchIngestionPolicyEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/ingestionpolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchIngestionPolicyEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchIngestionPolicyEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchIngestionPolicyEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchIngestionPolicyForFacet lists the values of a specific facet over the customer s ingestion policies
*/
func (a *Client) SearchIngestionPolicyForFacet(params *SearchIngestionPolicyForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchIngestionPolicyForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchIngestionPolicyForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchIngestionPolicyForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/ingestionpolicy/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchIngestionPolicyForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchIngestionPolicyForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchIngestionPolicyForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchIngestionPolicyForFacets lists the values of one or more facets over the customer s ingestion policies
*/
func (a *Client) SearchIngestionPolicyForFacets(params *SearchIngestionPolicyForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchIngestionPolicyForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchIngestionPolicyForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchIngestionPolicyForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/ingestionpolicy/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchIngestionPolicyForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchIngestionPolicyForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchIngestionPolicyForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchMaintenanceWindowEntities searches over a customer s maintenance windows
*/
func (a *Client) SearchMaintenanceWindowEntities(params *SearchMaintenanceWindowEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMaintenanceWindowEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMaintenanceWindowEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchMaintenanceWindowEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/maintenancewindow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchMaintenanceWindowEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMaintenanceWindowEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchMaintenanceWindowEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchMaintenanceWindowForFacet lists the values of a specific facet over the customer s maintenance windows
*/
func (a *Client) SearchMaintenanceWindowForFacet(params *SearchMaintenanceWindowForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMaintenanceWindowForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMaintenanceWindowForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchMaintenanceWindowForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/maintenancewindow/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchMaintenanceWindowForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMaintenanceWindowForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchMaintenanceWindowForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchMaintenanceWindowForFacets lists the values of one or more facets over the customer s maintenance windows
*/
func (a *Client) SearchMaintenanceWindowForFacets(params *SearchMaintenanceWindowForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMaintenanceWindowForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMaintenanceWindowForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchMaintenanceWindowForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/maintenancewindow/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchMaintenanceWindowForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMaintenanceWindowForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchMaintenanceWindowForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchMonitoredApplicationEntities searches over all the customer s non deleted monitored applications
*/
func (a *Client) SearchMonitoredApplicationEntities(params *SearchMonitoredApplicationEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMonitoredApplicationEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMonitoredApplicationEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchMonitoredApplicationEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/monitoredapplication",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchMonitoredApplicationEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMonitoredApplicationEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchMonitoredApplicationEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchMonitoredApplicationForFacet lists the values of a specific facet over the customer s non deleted monitored application
*/
func (a *Client) SearchMonitoredApplicationForFacet(params *SearchMonitoredApplicationForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMonitoredApplicationForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMonitoredApplicationForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchMonitoredApplicationForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/monitoredapplication/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchMonitoredApplicationForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMonitoredApplicationForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchMonitoredApplicationForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchMonitoredApplicationForFacets lists the values of one or more facets over the customer s non deleted monitored clusters
*/
func (a *Client) SearchMonitoredApplicationForFacets(params *SearchMonitoredApplicationForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMonitoredApplicationForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMonitoredApplicationForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchMonitoredApplicationForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/monitoredapplication/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchMonitoredApplicationForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMonitoredApplicationForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchMonitoredApplicationForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchMonitoredServiceEntities searches over all the customer s non deleted monitored services
*/
func (a *Client) SearchMonitoredServiceEntities(params *SearchMonitoredServiceEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMonitoredServiceEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMonitoredServiceEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchMonitoredServiceEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/monitoredservice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchMonitoredServiceEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMonitoredServiceEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchMonitoredServiceEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchMonitoredServiceForFacet lists the values of a specific facet over the customer s non deleted monitored application
*/
func (a *Client) SearchMonitoredServiceForFacet(params *SearchMonitoredServiceForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMonitoredServiceForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMonitoredServiceForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchMonitoredServiceForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/monitoredservice/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchMonitoredServiceForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMonitoredServiceForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchMonitoredServiceForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchMonitoredServiceForFacets lists the values of one or more facets over the customer s non deleted monitored clusters
*/
func (a *Client) SearchMonitoredServiceForFacets(params *SearchMonitoredServiceForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchMonitoredServiceForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchMonitoredServiceForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchMonitoredServiceForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/monitoredservice/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchMonitoredServiceForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchMonitoredServiceForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchMonitoredServiceForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchNotficantForFacets lists the values of one or more facets over the customer s notificants
*/
func (a *Client) SearchNotficantForFacets(params *SearchNotficantForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchNotficantForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchNotficantForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchNotficantForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/notificant/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchNotficantForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchNotficantForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchNotficantForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchNotificantEntities searches over a customer s notificants
*/
func (a *Client) SearchNotificantEntities(params *SearchNotificantEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchNotificantEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchNotificantEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchNotificantEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/notificant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchNotificantEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchNotificantEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchNotificantEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchNotificantForFacet lists the values of a specific facet over the customer s notificants
*/
func (a *Client) SearchNotificantForFacet(params *SearchNotificantForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchNotificantForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchNotificantForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchNotificantForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/notificant/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchNotificantForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchNotificantForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchNotificantForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchProxyDeletedEntities searches over a customer s deleted proxies
*/
func (a *Client) SearchProxyDeletedEntities(params *SearchProxyDeletedEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProxyDeletedEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchProxyDeletedEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchProxyDeletedEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/proxy/deleted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchProxyDeletedEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchProxyDeletedEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchProxyDeletedEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchProxyDeletedForFacet lists the values of a specific facet over the customer s deleted proxies
*/
func (a *Client) SearchProxyDeletedForFacet(params *SearchProxyDeletedForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProxyDeletedForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchProxyDeletedForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchProxyDeletedForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/proxy/deleted/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchProxyDeletedForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchProxyDeletedForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchProxyDeletedForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchProxyDeletedForFacets lists the values of one or more facets over the customer s deleted proxies
*/
func (a *Client) SearchProxyDeletedForFacets(params *SearchProxyDeletedForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProxyDeletedForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchProxyDeletedForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchProxyDeletedForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/proxy/deleted/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchProxyDeletedForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchProxyDeletedForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchProxyDeletedForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchProxyEntities searches over a customer s non deleted proxies
*/
func (a *Client) SearchProxyEntities(params *SearchProxyEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProxyEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchProxyEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchProxyEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/proxy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchProxyEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchProxyEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchProxyEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchProxyForFacet lists the values of a specific facet over the customer s non deleted proxies
*/
func (a *Client) SearchProxyForFacet(params *SearchProxyForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProxyForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchProxyForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchProxyForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/proxy/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchProxyForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchProxyForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchProxyForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchProxyForFacets lists the values of one or more facets over the customer s non deleted proxies
*/
func (a *Client) SearchProxyForFacets(params *SearchProxyForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchProxyForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchProxyForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchProxyForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/proxy/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchProxyForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchProxyForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchProxyForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchRegisteredQueryDeletedEntities searches over a customer s deleted derived metric definitions
*/
func (a *Client) SearchRegisteredQueryDeletedEntities(params *SearchRegisteredQueryDeletedEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRegisteredQueryDeletedEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRegisteredQueryDeletedEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchRegisteredQueryDeletedEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/derivedmetric/deleted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchRegisteredQueryDeletedEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRegisteredQueryDeletedEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchRegisteredQueryDeletedEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchRegisteredQueryDeletedForFacet lists the values of a specific facet over the customer s deleted derived metric definitions
*/
func (a *Client) SearchRegisteredQueryDeletedForFacet(params *SearchRegisteredQueryDeletedForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRegisteredQueryDeletedForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRegisteredQueryDeletedForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchRegisteredQueryDeletedForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/derivedmetric/deleted/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchRegisteredQueryDeletedForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRegisteredQueryDeletedForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchRegisteredQueryDeletedForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchRegisteredQueryDeletedForFacets lists the values of one or more facets over the customer s deleted derived metric definitions
*/
func (a *Client) SearchRegisteredQueryDeletedForFacets(params *SearchRegisteredQueryDeletedForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRegisteredQueryDeletedForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRegisteredQueryDeletedForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchRegisteredQueryDeletedForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/derivedmetric/deleted/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchRegisteredQueryDeletedForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRegisteredQueryDeletedForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchRegisteredQueryDeletedForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchRegisteredQueryEntities searches over a customer s non deleted derived metric definitions
*/
func (a *Client) SearchRegisteredQueryEntities(params *SearchRegisteredQueryEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRegisteredQueryEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRegisteredQueryEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchRegisteredQueryEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/derivedmetric",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchRegisteredQueryEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRegisteredQueryEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchRegisteredQueryEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchRegisteredQueryForFacet lists the values of a specific facet over the customer s non deleted derived metric definitions
*/
func (a *Client) SearchRegisteredQueryForFacet(params *SearchRegisteredQueryForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRegisteredQueryForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRegisteredQueryForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchRegisteredQueryForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/derivedmetric/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchRegisteredQueryForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRegisteredQueryForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchRegisteredQueryForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchRegisteredQueryForFacets lists the values of one or more facets over the customer s non deleted derived metric definition
*/
func (a *Client) SearchRegisteredQueryForFacets(params *SearchRegisteredQueryForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRegisteredQueryForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRegisteredQueryForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchRegisteredQueryForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/derivedmetric/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchRegisteredQueryForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRegisteredQueryForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchRegisteredQueryForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchRelatedReportEventAnomalyEntities lists the related events and anomalies over a firing event
*/
func (a *Client) SearchRelatedReportEventAnomalyEntities(params *SearchRelatedReportEventAnomalyEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRelatedReportEventAnomalyEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRelatedReportEventAnomalyEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchRelatedReportEventAnomalyEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/event/related/{eventId}/withAnomalies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchRelatedReportEventAnomalyEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRelatedReportEventAnomalyEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchRelatedReportEventAnomalyEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchRelatedReportEventEntities lists the related events over a firing event
*/
func (a *Client) SearchRelatedReportEventEntities(params *SearchRelatedReportEventEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRelatedReportEventEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRelatedReportEventEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchRelatedReportEventEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/event/related/{eventId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchRelatedReportEventEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRelatedReportEventEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchRelatedReportEventEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchReportEventEntities searches over a customer s events
*/
func (a *Client) SearchReportEventEntities(params *SearchReportEventEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchReportEventEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchReportEventEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchReportEventEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/event",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchReportEventEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchReportEventEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchReportEventEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchReportEventForFacet lists the values of a specific facet over the customer s events
*/
func (a *Client) SearchReportEventForFacet(params *SearchReportEventForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchReportEventForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchReportEventForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchReportEventForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/event/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchReportEventForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchReportEventForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchReportEventForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchReportEventForFacets lists the values of one or more facets over the customer s events
*/
func (a *Client) SearchReportEventForFacets(params *SearchReportEventForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchReportEventForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchReportEventForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchReportEventForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/event/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchReportEventForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchReportEventForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchReportEventForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchRoleEntities searches over a customer s roles
*/
func (a *Client) SearchRoleEntities(params *SearchRoleEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRoleEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRoleEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchRoleEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/role",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchRoleEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRoleEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchRoleEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchRoleForFacet lists the values of a specific facet over the customer s roles
*/
func (a *Client) SearchRoleForFacet(params *SearchRoleForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRoleForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRoleForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchRoleForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/role/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchRoleForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRoleForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchRoleForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchRoleForFacets lists the values of one or more facets over the customer s roles
*/
func (a *Client) SearchRoleForFacets(params *SearchRoleForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchRoleForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchRoleForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchRoleForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/role/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchRoleForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchRoleForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchRoleForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchSavedAppMapEntities searches over all the customer s non deleted saved app map searches
*/
func (a *Client) SearchSavedAppMapEntities(params *SearchSavedAppMapEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSavedAppMapEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSavedAppMapEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchSavedAppMapEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/savedappmapsearch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchSavedAppMapEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSavedAppMapEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchSavedAppMapEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchSavedAppMapForFacet lists the values of a specific facet over the customer s non deleted app map searches
*/
func (a *Client) SearchSavedAppMapForFacet(params *SearchSavedAppMapForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSavedAppMapForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSavedAppMapForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchSavedAppMapForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/savedappmapsearch/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchSavedAppMapForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSavedAppMapForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchSavedAppMapForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchSavedAppMapForFacets lists the values of one or more facets over the customer s non deleted app map searches
*/
func (a *Client) SearchSavedAppMapForFacets(params *SearchSavedAppMapForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSavedAppMapForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSavedAppMapForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchSavedAppMapForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/savedappmapsearch/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchSavedAppMapForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSavedAppMapForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchSavedAppMapForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchSavedTracesEntities searches over all the customer s non deleted saved traces searches
*/
func (a *Client) SearchSavedTracesEntities(params *SearchSavedTracesEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSavedTracesEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSavedTracesEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchSavedTracesEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/savedtracessearch",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchSavedTracesEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSavedTracesEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchSavedTracesEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchServiceAccountEntities searches over a customer s service accounts
*/
func (a *Client) SearchServiceAccountEntities(params *SearchServiceAccountEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchServiceAccountEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchServiceAccountEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchServiceAccountEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/serviceaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchServiceAccountEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchServiceAccountEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchServiceAccountEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchServiceAccountForFacet lists the values of a specific facet over the customer s service accounts
*/
func (a *Client) SearchServiceAccountForFacet(params *SearchServiceAccountForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchServiceAccountForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchServiceAccountForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchServiceAccountForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/serviceaccount/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchServiceAccountForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchServiceAccountForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchServiceAccountForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchServiceAccountForFacets lists the values of one or more facets over the customer s service accounts
*/
func (a *Client) SearchServiceAccountForFacets(params *SearchServiceAccountForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchServiceAccountForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchServiceAccountForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchServiceAccountForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/serviceaccount/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchServiceAccountForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchServiceAccountForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchServiceAccountForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchSpanSamplingPolicyDeletedEntities searches over a customer s deleted span sampling policies
*/
func (a *Client) SearchSpanSamplingPolicyDeletedEntities(params *SearchSpanSamplingPolicyDeletedEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSpanSamplingPolicyDeletedEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSpanSamplingPolicyDeletedEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchSpanSamplingPolicyDeletedEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/spansamplingpolicy/deleted",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchSpanSamplingPolicyDeletedEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSpanSamplingPolicyDeletedEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchSpanSamplingPolicyDeletedEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchSpanSamplingPolicyDeletedForFacet lists the values of a specific facet over the customer s deleted span sampling policies
*/
func (a *Client) SearchSpanSamplingPolicyDeletedForFacet(params *SearchSpanSamplingPolicyDeletedForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSpanSamplingPolicyDeletedForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSpanSamplingPolicyDeletedForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchSpanSamplingPolicyDeletedForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/spansamplingpolicy/deleted/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchSpanSamplingPolicyDeletedForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSpanSamplingPolicyDeletedForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchSpanSamplingPolicyDeletedForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchSpanSamplingPolicyDeletedForFacets lists the values of one or more facets over the customer s deleted span sampling policies
*/
func (a *Client) SearchSpanSamplingPolicyDeletedForFacets(params *SearchSpanSamplingPolicyDeletedForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSpanSamplingPolicyDeletedForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSpanSamplingPolicyDeletedForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchSpanSamplingPolicyDeletedForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/spansamplingpolicy/deleted/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchSpanSamplingPolicyDeletedForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSpanSamplingPolicyDeletedForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchSpanSamplingPolicyDeletedForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchSpanSamplingPolicyEntities searches over a customer s non deleted span sampling policies
*/
func (a *Client) SearchSpanSamplingPolicyEntities(params *SearchSpanSamplingPolicyEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSpanSamplingPolicyEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSpanSamplingPolicyEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchSpanSamplingPolicyEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/spansamplingpolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchSpanSamplingPolicyEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSpanSamplingPolicyEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchSpanSamplingPolicyEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchSpanSamplingPolicyForFacet lists the values of a specific facet over the customer s non deleted span sampling policies
*/
func (a *Client) SearchSpanSamplingPolicyForFacet(params *SearchSpanSamplingPolicyForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSpanSamplingPolicyForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSpanSamplingPolicyForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchSpanSamplingPolicyForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/spansamplingpolicy/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchSpanSamplingPolicyForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSpanSamplingPolicyForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchSpanSamplingPolicyForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchSpanSamplingPolicyForFacets lists the values of one or more facets over the customer s non deleted span sampling policies
*/
func (a *Client) SearchSpanSamplingPolicyForFacets(params *SearchSpanSamplingPolicyForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchSpanSamplingPolicyForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchSpanSamplingPolicyForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchSpanSamplingPolicyForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/spansamplingpolicy/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchSpanSamplingPolicyForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchSpanSamplingPolicyForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchSpanSamplingPolicyForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchTaggedSourceEntities searches over a customer s sources
*/
func (a *Client) SearchTaggedSourceEntities(params *SearchTaggedSourceEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTaggedSourceEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTaggedSourceEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchTaggedSourceEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/source",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchTaggedSourceEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTaggedSourceEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchTaggedSourceEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchTaggedSourceForFacet lists the values of a specific facet over the customer s sources
*/
func (a *Client) SearchTaggedSourceForFacet(params *SearchTaggedSourceForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTaggedSourceForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTaggedSourceForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchTaggedSourceForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/source/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchTaggedSourceForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTaggedSourceForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchTaggedSourceForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchTaggedSourceForFacets lists the values of one or more facets over the customer s sources
*/
func (a *Client) SearchTaggedSourceForFacets(params *SearchTaggedSourceForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTaggedSourceForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTaggedSourceForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchTaggedSourceForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/source/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchTaggedSourceForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTaggedSourceForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchTaggedSourceForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchTokenEntities searches over a customer s api tokens
*/
func (a *Client) SearchTokenEntities(params *SearchTokenEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTokenEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTokenEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchTokenEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchTokenEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTokenEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchTokenEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchTokenForFacet lists the values of a specific facet over the customer s api tokens
*/
func (a *Client) SearchTokenForFacet(params *SearchTokenForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTokenForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTokenForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchTokenForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/token/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchTokenForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTokenForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchTokenForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchTokenForFacets lists the values of one or more facets over the customer s api tokens
*/
func (a *Client) SearchTokenForFacets(params *SearchTokenForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTokenForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTokenForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchTokenForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/token/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchTokenForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTokenForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchTokenForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchTracesMapForFacet lists the values of a specific facet over the customer s non deleted traces searches
*/
func (a *Client) SearchTracesMapForFacet(params *SearchTracesMapForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTracesMapForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTracesMapForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchTracesMapForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/savedtracessearch/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchTracesMapForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTracesMapForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchTracesMapForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchTracesMapForFacets lists the values of one or more facets over the customer s non deleted traces searches
*/
func (a *Client) SearchTracesMapForFacets(params *SearchTracesMapForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchTracesMapForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchTracesMapForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchTracesMapForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/savedtracessearch/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchTracesMapForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchTracesMapForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchTracesMapForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchUserEntities searches over a customer s users
*/
func (a *Client) SearchUserEntities(params *SearchUserEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchUserEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUserEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchUserEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchUserEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchUserEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchUserEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchUserForFacet lists the values of a specific facet over the customer s users
*/
func (a *Client) SearchUserForFacet(params *SearchUserForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchUserForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUserForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchUserForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/user/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchUserForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchUserForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchUserForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchUserForFacets lists the values of one or more facets over the customer s users
*/
func (a *Client) SearchUserForFacets(params *SearchUserForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchUserForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUserForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchUserForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/user/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchUserForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchUserForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchUserForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchUserGroupEntities searches over a customer s user groups
*/
func (a *Client) SearchUserGroupEntities(params *SearchUserGroupEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchUserGroupEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUserGroupEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchUserGroupEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/usergroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchUserGroupEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchUserGroupEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchUserGroupEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchUserGroupForFacet lists the values of a specific facet over the customer s user groups
*/
func (a *Client) SearchUserGroupForFacet(params *SearchUserGroupForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchUserGroupForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUserGroupForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchUserGroupForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/usergroup/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchUserGroupForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchUserGroupForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchUserGroupForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchUserGroupForFacets lists the values of one or more facets over the customer s user groups
*/
func (a *Client) SearchUserGroupForFacets(params *SearchUserGroupForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchUserGroupForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUserGroupForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchUserGroupForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/usergroup/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchUserGroupForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchUserGroupForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchUserGroupForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchWebHookEntities searches over a customer s webhooks
*/
func (a *Client) SearchWebHookEntities(params *SearchWebHookEntitiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchWebHookEntitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchWebHookEntitiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchWebHookEntities",
		Method:             "POST",
		PathPattern:        "/api/v2/search/webhook",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchWebHookEntitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchWebHookEntitiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchWebHookEntities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchWebHookForFacet lists the values of a specific facet over the customer s webhooks
*/
func (a *Client) SearchWebHookForFacet(params *SearchWebHookForFacetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchWebHookForFacetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchWebHookForFacetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchWebHookForFacet",
		Method:             "POST",
		PathPattern:        "/api/v2/search/webhook/{facet}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchWebHookForFacetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchWebHookForFacetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchWebHookForFacet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SearchWebhookForFacets lists the values of one or more facets over the customer s webhooks
*/
func (a *Client) SearchWebhookForFacets(params *SearchWebhookForFacetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchWebhookForFacetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchWebhookForFacetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchWebhookForFacets",
		Method:             "POST",
		PathPattern:        "/api/v2/search/webhook/facets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SearchWebhookForFacetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchWebhookForFacetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchWebhookForFacets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
