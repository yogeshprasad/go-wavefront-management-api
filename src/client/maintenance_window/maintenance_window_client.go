// Code generated by go-swagger; DO NOT EDIT.

package maintenance_window

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new maintenance window API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for maintenance window API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMaintenanceWindow(params *CreateMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMaintenanceWindowOK, error)

	DeleteMaintenanceWindow(params *DeleteMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMaintenanceWindowOK, error)

	GetAllMaintenanceWindow(params *GetAllMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllMaintenanceWindowOK, error)

	GetMaintenanceWindow(params *GetMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMaintenanceWindowOK, error)

	UpdateMaintenanceWindow(params *UpdateMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMaintenanceWindowOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateMaintenanceWindow creates a maintenance window
*/
func (a *Client) CreateMaintenanceWindow(params *CreateMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateMaintenanceWindowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMaintenanceWindowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createMaintenanceWindow",
		Method:             "POST",
		PathPattern:        "/api/v2/maintenancewindow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMaintenanceWindowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createMaintenanceWindow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMaintenanceWindow deletes a specific maintenance window
*/
func (a *Client) DeleteMaintenanceWindow(params *DeleteMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMaintenanceWindowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMaintenanceWindowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMaintenanceWindow",
		Method:             "DELETE",
		PathPattern:        "/api/v2/maintenancewindow/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMaintenanceWindowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMaintenanceWindow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllMaintenanceWindow gets all maintenance windows for a customer
*/
func (a *Client) GetAllMaintenanceWindow(params *GetAllMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllMaintenanceWindowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllMaintenanceWindowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllMaintenanceWindow",
		Method:             "GET",
		PathPattern:        "/api/v2/maintenancewindow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllMaintenanceWindowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllMaintenanceWindow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetMaintenanceWindow gets a specific maintenance window
*/
func (a *Client) GetMaintenanceWindow(params *GetMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetMaintenanceWindowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMaintenanceWindowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getMaintenanceWindow",
		Method:             "GET",
		PathPattern:        "/api/v2/maintenancewindow/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMaintenanceWindowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getMaintenanceWindow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateMaintenanceWindow updates a specific maintenance window
*/
func (a *Client) UpdateMaintenanceWindow(params *UpdateMaintenanceWindowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateMaintenanceWindowOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMaintenanceWindowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateMaintenanceWindow",
		Method:             "PUT",
		PathPattern:        "/api/v2/maintenancewindow/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateMaintenanceWindowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMaintenanceWindowOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateMaintenanceWindow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
