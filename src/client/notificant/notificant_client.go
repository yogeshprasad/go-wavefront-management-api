// Code generated by go-swagger; DO NOT EDIT.

package notificant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new notificant API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for notificant API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNotificant(params *CreateNotificantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNotificantOK, error)

	DeleteNotificant(params *DeleteNotificantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNotificantOK, error)

	GetAllNotificants(params *GetAllNotificantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllNotificantsOK, error)

	GetNotificant(params *GetNotificantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNotificantOK, error)

	TestNotificant(params *TestNotificantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TestNotificantOK, error)

	UpdateNotificant(params *UpdateNotificantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNotificantOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateNotificant creates a notification target
*/
func (a *Client) CreateNotificant(params *CreateNotificantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNotificantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNotificantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNotificant",
		Method:             "POST",
		PathPattern:        "/api/v2/notificant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNotificantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateNotificantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createNotificant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteNotificant deletes a specific notification target
*/
func (a *Client) DeleteNotificant(params *DeleteNotificantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNotificantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNotificantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNotificant",
		Method:             "DELETE",
		PathPattern:        "/api/v2/notificant/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNotificantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNotificantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteNotificant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllNotificants gets all notification targets for a customer
*/
func (a *Client) GetAllNotificants(params *GetAllNotificantsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllNotificantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllNotificantsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllNotificants",
		Method:             "GET",
		PathPattern:        "/api/v2/notificant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllNotificantsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllNotificantsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllNotificants: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetNotificant gets a specific notification target
*/
func (a *Client) GetNotificant(params *GetNotificantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNotificantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNotificantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNotificant",
		Method:             "GET",
		PathPattern:        "/api/v2/notificant/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNotificantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNotificantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getNotificant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
TestNotificant tests a specific notification target
*/
func (a *Client) TestNotificant(params *TestNotificantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TestNotificantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestNotificantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "testNotificant",
		Method:             "POST",
		PathPattern:        "/api/v2/notificant/test/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestNotificantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TestNotificantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for testNotificant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateNotificant updates a specific notification target
*/
func (a *Client) UpdateNotificant(params *UpdateNotificantParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateNotificantOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNotificantParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNotificant",
		Method:             "PUT",
		PathPattern:        "/api/v2/notificant/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateNotificantReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNotificantOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateNotificant: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
