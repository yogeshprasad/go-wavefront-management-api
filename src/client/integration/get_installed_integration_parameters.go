// Code generated by go-swagger; DO NOT EDIT.

package integration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetInstalledIntegrationParams creates a new GetInstalledIntegrationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetInstalledIntegrationParams() *GetInstalledIntegrationParams {
	return &GetInstalledIntegrationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetInstalledIntegrationParamsWithTimeout creates a new GetInstalledIntegrationParams object
// with the ability to set a timeout on a request.
func NewGetInstalledIntegrationParamsWithTimeout(timeout time.Duration) *GetInstalledIntegrationParams {
	return &GetInstalledIntegrationParams{
		timeout: timeout,
	}
}

// NewGetInstalledIntegrationParamsWithContext creates a new GetInstalledIntegrationParams object
// with the ability to set a context for a request.
func NewGetInstalledIntegrationParamsWithContext(ctx context.Context) *GetInstalledIntegrationParams {
	return &GetInstalledIntegrationParams{
		Context: ctx,
	}
}

// NewGetInstalledIntegrationParamsWithHTTPClient creates a new GetInstalledIntegrationParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetInstalledIntegrationParamsWithHTTPClient(client *http.Client) *GetInstalledIntegrationParams {
	return &GetInstalledIntegrationParams{
		HTTPClient: client,
	}
}

/*
GetInstalledIntegrationParams contains all the parameters to send to the API endpoint

	for the get installed integration operation.

	Typically these are written to a http.Request.
*/
type GetInstalledIntegrationParams struct {

	// HasContent.
	HasContent *bool

	// ReturnContent.
	//
	// Default: true
	ReturnContent *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get installed integration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInstalledIntegrationParams) WithDefaults() *GetInstalledIntegrationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get installed integration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInstalledIntegrationParams) SetDefaults() {
	var (
		hasContentDefault = bool(false)

		returnContentDefault = bool(true)
	)

	val := GetInstalledIntegrationParams{
		HasContent:    &hasContentDefault,
		ReturnContent: &returnContentDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get installed integration params
func (o *GetInstalledIntegrationParams) WithTimeout(timeout time.Duration) *GetInstalledIntegrationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get installed integration params
func (o *GetInstalledIntegrationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get installed integration params
func (o *GetInstalledIntegrationParams) WithContext(ctx context.Context) *GetInstalledIntegrationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get installed integration params
func (o *GetInstalledIntegrationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get installed integration params
func (o *GetInstalledIntegrationParams) WithHTTPClient(client *http.Client) *GetInstalledIntegrationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get installed integration params
func (o *GetInstalledIntegrationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHasContent adds the hasContent to the get installed integration params
func (o *GetInstalledIntegrationParams) WithHasContent(hasContent *bool) *GetInstalledIntegrationParams {
	o.SetHasContent(hasContent)
	return o
}

// SetHasContent adds the hasContent to the get installed integration params
func (o *GetInstalledIntegrationParams) SetHasContent(hasContent *bool) {
	o.HasContent = hasContent
}

// WithReturnContent adds the returnContent to the get installed integration params
func (o *GetInstalledIntegrationParams) WithReturnContent(returnContent *bool) *GetInstalledIntegrationParams {
	o.SetReturnContent(returnContent)
	return o
}

// SetReturnContent adds the returnContent to the get installed integration params
func (o *GetInstalledIntegrationParams) SetReturnContent(returnContent *bool) {
	o.ReturnContent = returnContent
}

// WriteToRequest writes these params to a swagger request
func (o *GetInstalledIntegrationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.HasContent != nil {

		// query param hasContent
		var qrHasContent bool

		if o.HasContent != nil {
			qrHasContent = *o.HasContent
		}
		qHasContent := swag.FormatBool(qrHasContent)
		if qHasContent != "" {

			if err := r.SetQueryParam("hasContent", qHasContent); err != nil {
				return err
			}
		}
	}

	if o.ReturnContent != nil {

		// query param returnContent
		var qrReturnContent bool

		if o.ReturnContent != nil {
			qrReturnContent = *o.ReturnContent
		}
		qReturnContent := swag.FormatBool(qrReturnContent)
		if qReturnContent != "" {

			if err := r.SetQueryParam("returnContent", qReturnContent); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
