// Code generated by go-swagger; DO NOT EDIT.

package integration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new integration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for integration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAllIntegration(params *GetAllIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIntegrationOK, error)

	GetAllIntegrationInManifests(params *GetAllIntegrationInManifestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIntegrationInManifestsOK, error)

	GetAllIntegrationInManifestsMin(params *GetAllIntegrationInManifestsMinParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIntegrationInManifestsMinOK, error)

	GetAllIntegrationStatuses(params *GetAllIntegrationStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIntegrationStatusesOK, error)

	GetInstalledIntegration(params *GetInstalledIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstalledIntegrationOK, error)

	GetIntegration(params *GetIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntegrationOK, error)

	GetIntegrationStatus(params *GetIntegrationStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntegrationStatusOK, error)

	InstallAllIntegrationAlerts(params *InstallAllIntegrationAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstallAllIntegrationAlertsOK, error)

	InstallIntegration(params *InstallIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstallIntegrationOK, error)

	UninstallAllIntegrationAlerts(params *UninstallAllIntegrationAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UninstallAllIntegrationAlertsOK, error)

	UninstallIntegration(params *UninstallIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UninstallIntegrationOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAllIntegration gets a flat list of all wavefront integrations available along with their status
*/
func (a *Client) GetAllIntegration(params *GetAllIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllIntegration",
		Method:             "GET",
		PathPattern:        "/api/v2/integration",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllIntegrationInManifests gets all wavefront integrations as structured in their integration manifests along with their status and content
*/
func (a *Client) GetAllIntegrationInManifests(params *GetAllIntegrationInManifestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIntegrationInManifestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllIntegrationInManifestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllIntegrationInManifests",
		Method:             "GET",
		PathPattern:        "/api/v2/integration/manifests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllIntegrationInManifestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllIntegrationInManifestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllIntegrationInManifests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllIntegrationInManifestsMin gets all wavefront integrations as structured in their integration manifests
*/
func (a *Client) GetAllIntegrationInManifestsMin(params *GetAllIntegrationInManifestsMinParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIntegrationInManifestsMinOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllIntegrationInManifestsMinParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllIntegrationInManifestsMin",
		Method:             "GET",
		PathPattern:        "/api/v2/integration/manifests/min",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllIntegrationInManifestsMinReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllIntegrationInManifestsMinOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllIntegrationInManifestsMin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllIntegrationStatuses gets the status of all wavefront integrations
*/
func (a *Client) GetAllIntegrationStatuses(params *GetAllIntegrationStatusesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIntegrationStatusesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllIntegrationStatusesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllIntegrationStatuses",
		Method:             "GET",
		PathPattern:        "/api/v2/integration/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllIntegrationStatusesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllIntegrationStatusesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllIntegrationStatuses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetInstalledIntegration gets a flat list of all integrations that are installed along with their status
*/
func (a *Client) GetInstalledIntegration(params *GetInstalledIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInstalledIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInstalledIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInstalledIntegration",
		Method:             "GET",
		PathPattern:        "/api/v2/integration/installed",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetInstalledIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInstalledIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInstalledIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegration gets a single wavefront integration by its id along with its status
*/
func (a *Client) GetIntegration(params *GetIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIntegration",
		Method:             "GET",
		PathPattern:        "/api/v2/integration/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIntegrationStatus gets the status of a single wavefront integration
*/
func (a *Client) GetIntegrationStatus(params *GetIntegrationStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIntegrationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIntegrationStatus",
		Method:             "GET",
		PathPattern:        "/api/v2/integration/{id}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIntegrationStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIntegrationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIntegrationStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InstallAllIntegrationAlerts enables all alerts associated with this integration
*/
func (a *Client) InstallAllIntegrationAlerts(params *InstallAllIntegrationAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstallAllIntegrationAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallAllIntegrationAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "installAllIntegrationAlerts",
		Method:             "POST",
		PathPattern:        "/api/v2/integration/{id}/install-all-alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InstallAllIntegrationAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstallAllIntegrationAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for installAllIntegrationAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InstallIntegration installs a wavefront integration
*/
func (a *Client) InstallIntegration(params *InstallIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InstallIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInstallIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "installIntegration",
		Method:             "POST",
		PathPattern:        "/api/v2/integration/{id}/install",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InstallIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InstallIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for installIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UninstallAllIntegrationAlerts disables all alerts associated with this integration
*/
func (a *Client) UninstallAllIntegrationAlerts(params *UninstallAllIntegrationAlertsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UninstallAllIntegrationAlertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUninstallAllIntegrationAlertsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uninstallAllIntegrationAlerts",
		Method:             "POST",
		PathPattern:        "/api/v2/integration/{id}/uninstall-all-alerts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UninstallAllIntegrationAlertsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UninstallAllIntegrationAlertsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uninstallAllIntegrationAlerts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UninstallIntegration uninstalls a wavefront integration
*/
func (a *Client) UninstallIntegration(params *UninstallIntegrationParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UninstallIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUninstallIntegrationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "uninstallIntegration",
		Method:             "POST",
		PathPattern:        "/api/v2/integration/{id}/uninstall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UninstallIntegrationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UninstallIntegrationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for uninstallIntegration: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
