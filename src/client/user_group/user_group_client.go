// Code generated by go-swagger; DO NOT EDIT.

package user_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddRolesToUserGroup(params *AddRolesToUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddRolesToUserGroupOK, error)

	AddUsersToUserGroup(params *AddUsersToUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUsersToUserGroupOK, error)

	CreateUserGroup(params *CreateUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserGroupOK, error)

	DeleteUserGroup(params *DeleteUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserGroupOK, error)

	GetAllUserGroups(params *GetAllUserGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUserGroupsOK, error)

	GetUserGroup(params *GetUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserGroupOK, error)

	RemoveRolesFromUserGroup(params *RemoveRolesFromUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveRolesFromUserGroupOK, error)

	RemoveUsersFromUserGroup(params *RemoveUsersFromUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveUsersFromUserGroupOK, error)

	UpdateUserGroup(params *UpdateUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddRolesToUserGroup adds multiple roles to a specific user group
*/
func (a *Client) AddRolesToUserGroup(params *AddRolesToUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddRolesToUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddRolesToUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addRolesToUserGroup",
		Method:             "POST",
		PathPattern:        "/api/v2/usergroup/{id}/addRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddRolesToUserGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddRolesToUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addRolesToUserGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddUsersToUserGroup adds multiple users to a specific user group
*/
func (a *Client) AddUsersToUserGroup(params *AddUsersToUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUsersToUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUsersToUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUsersToUserGroup",
		Method:             "POST",
		PathPattern:        "/api/v2/usergroup/{id}/addUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddUsersToUserGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUsersToUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addUsersToUserGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateUserGroup creates a specific user group
*/
func (a *Client) CreateUserGroup(params *CreateUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUserGroup",
		Method:             "POST",
		PathPattern:        "/api/v2/usergroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUserGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUserGroup deletes a specific user group
*/
func (a *Client) DeleteUserGroup(params *DeleteUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserGroup",
		Method:             "DELETE",
		PathPattern:        "/api/v2/usergroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteUserGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllUserGroups gets all user groups for a customer
*/
func (a *Client) GetAllUserGroups(params *GetAllUserGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUserGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUserGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUserGroups",
		Method:             "GET",
		PathPattern:        "/api/v2/usergroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllUserGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUserGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUserGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserGroup gets a specific user group
*/
func (a *Client) GetUserGroup(params *GetUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserGroup",
		Method:             "GET",
		PathPattern:        "/api/v2/usergroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveRolesFromUserGroup removes multiple roles from a specific user group
*/
func (a *Client) RemoveRolesFromUserGroup(params *RemoveRolesFromUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveRolesFromUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveRolesFromUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeRolesFromUserGroup",
		Method:             "POST",
		PathPattern:        "/api/v2/usergroup/{id}/removeRoles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveRolesFromUserGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveRolesFromUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeRolesFromUserGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveUsersFromUserGroup removes multiple users from a specific user group
*/
func (a *Client) RemoveUsersFromUserGroup(params *RemoveUsersFromUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveUsersFromUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveUsersFromUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeUsersFromUserGroup",
		Method:             "POST",
		PathPattern:        "/api/v2/usergroup/{id}/removeUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveUsersFromUserGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveUsersFromUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeUsersFromUserGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUserGroup updates a specific user group
*/
func (a *Client) UpdateUserGroup(params *UpdateUserGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserGroup",
		Method:             "PUT",
		PathPattern:        "/api/v2/usergroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUserGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
