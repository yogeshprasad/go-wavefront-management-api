// Code generated by go-swagger; DO NOT EDIT.

package source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllSourceParams creates a new GetAllSourceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllSourceParams() *GetAllSourceParams {
	return &GetAllSourceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllSourceParamsWithTimeout creates a new GetAllSourceParams object
// with the ability to set a timeout on a request.
func NewGetAllSourceParamsWithTimeout(timeout time.Duration) *GetAllSourceParams {
	return &GetAllSourceParams{
		timeout: timeout,
	}
}

// NewGetAllSourceParamsWithContext creates a new GetAllSourceParams object
// with the ability to set a context for a request.
func NewGetAllSourceParamsWithContext(ctx context.Context) *GetAllSourceParams {
	return &GetAllSourceParams{
		Context: ctx,
	}
}

// NewGetAllSourceParamsWithHTTPClient creates a new GetAllSourceParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllSourceParamsWithHTTPClient(client *http.Client) *GetAllSourceParams {
	return &GetAllSourceParams{
		HTTPClient: client,
	}
}

/*
GetAllSourceParams contains all the parameters to send to the API endpoint

	for the get all source operation.

	Typically these are written to a http.Request.
*/
type GetAllSourceParams struct {

	// Cursor.
	Cursor *string

	/* Limit.

	   max limit: 1000

	   Format: int32
	   Default: 100
	*/
	Limit *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all source params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllSourceParams) WithDefaults() *GetAllSourceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all source params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllSourceParams) SetDefaults() {
	var (
		limitDefault = int32(100)
	)

	val := GetAllSourceParams{
		Limit: &limitDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get all source params
func (o *GetAllSourceParams) WithTimeout(timeout time.Duration) *GetAllSourceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all source params
func (o *GetAllSourceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all source params
func (o *GetAllSourceParams) WithContext(ctx context.Context) *GetAllSourceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all source params
func (o *GetAllSourceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all source params
func (o *GetAllSourceParams) WithHTTPClient(client *http.Client) *GetAllSourceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all source params
func (o *GetAllSourceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCursor adds the cursor to the get all source params
func (o *GetAllSourceParams) WithCursor(cursor *string) *GetAllSourceParams {
	o.SetCursor(cursor)
	return o
}

// SetCursor adds the cursor to the get all source params
func (o *GetAllSourceParams) SetCursor(cursor *string) {
	o.Cursor = cursor
}

// WithLimit adds the limit to the get all source params
func (o *GetAllSourceParams) WithLimit(limit *int32) *GetAllSourceParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get all source params
func (o *GetAllSourceParams) SetLimit(limit *int32) {
	o.Limit = limit
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllSourceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cursor != nil {

		// query param cursor
		var qrCursor string

		if o.Cursor != nil {
			qrCursor = *o.Cursor
		}
		qCursor := qrCursor
		if qCursor != "" {

			if err := r.SetQueryParam("cursor", qCursor); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int32

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt32(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
