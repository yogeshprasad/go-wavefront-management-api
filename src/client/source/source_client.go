// Code generated by go-swagger; DO NOT EDIT.

package source

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new source API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for source API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddSourceTag(params *AddSourceTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddSourceTagOK, error)

	CreateSource(params *CreateSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSourceOK, error)

	DeleteSource(params *DeleteSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSourceOK, error)

	GetAllSource(params *GetAllSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSourceOK, error)

	GetSource(params *GetSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSourceOK, error)

	GetSourceTags(params *GetSourceTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSourceTagsOK, error)

	RemoveDescription(params *RemoveDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveDescriptionOK, error)

	RemoveSourceTag(params *RemoveSourceTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveSourceTagOK, error)

	SetDescription(params *SetDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetDescriptionOK, error)

	SetSourceTags(params *SetSourceTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetSourceTagsOK, error)

	UpdateSource(params *UpdateSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSourceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddSourceTag adds a tag to a specific source
*/
func (a *Client) AddSourceTag(params *AddSourceTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddSourceTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSourceTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addSourceTag",
		Method:             "PUT",
		PathPattern:        "/api/v2/source/{id}/tag/{tagValue}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddSourceTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSourceTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSourceTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSource creates metadata description or tags for a specific source
*/
func (a *Client) CreateSource(params *CreateSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSource",
		Method:             "POST",
		PathPattern:        "/api/v2/source",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSource deletes metadata description and tags for a specific source
*/
func (a *Client) DeleteSource(params *DeleteSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSource",
		Method:             "DELETE",
		PathPattern:        "/api/v2/source/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSource gets all sources for a customer
*/
func (a *Client) GetAllSource(params *GetAllSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSource",
		Method:             "GET",
		PathPattern:        "/api/v2/source",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSource gets a specific source for a customer
*/
func (a *Client) GetSource(params *GetSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSource",
		Method:             "GET",
		PathPattern:        "/api/v2/source/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSourceTags gets all tags associated with a specific source
*/
func (a *Client) GetSourceTags(params *GetSourceTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSourceTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSourceTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSourceTags",
		Method:             "GET",
		PathPattern:        "/api/v2/source/{id}/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSourceTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSourceTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSourceTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveDescription removes description from a specific source
*/
func (a *Client) RemoveDescription(params *RemoveDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveDescriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveDescriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeDescription",
		Method:             "DELETE",
		PathPattern:        "/api/v2/source/{id}/description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveDescriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveDescriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeDescription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveSourceTag removes a tag from a specific source
*/
func (a *Client) RemoveSourceTag(params *RemoveSourceTagParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveSourceTagOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveSourceTagParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeSourceTag",
		Method:             "DELETE",
		PathPattern:        "/api/v2/source/{id}/tag/{tagValue}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveSourceTagReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveSourceTagOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeSourceTag: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetDescription sets description associated with a specific source
*/
func (a *Client) SetDescription(params *SetDescriptionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetDescriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetDescriptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setDescription",
		Method:             "POST",
		PathPattern:        "/api/v2/source/{id}/description",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetDescriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetDescriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setDescription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetSourceTags sets all tags associated with a specific source
*/
func (a *Client) SetSourceTags(params *SetSourceTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetSourceTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetSourceTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setSourceTags",
		Method:             "POST",
		PathPattern:        "/api/v2/source/{id}/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetSourceTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetSourceTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setSourceTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSource updates metadata description or tags for a specific source

The "hidden" property is stored as a tag. To set the value, add "hidden": &lt;value&gt; to the list of tags.
*/
func (a *Client) UpdateSource(params *UpdateSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSource",
		Method:             "PUT",
		PathPattern:        "/api/v2/source/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
