// Code generated by go-swagger; DO NOT EDIT.

package api_token

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new api token API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api token API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateToken(params *CreateTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTokenOK, error)

	DeleteCustomerToken(params *DeleteCustomerTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCustomerTokenOK, error)

	DeleteToken(params *DeleteTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTokenOK, error)

	DeleteTokenServiceAccount(params *DeleteTokenServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTokenServiceAccountOK, error)

	GenerateTokenServiceAccount(params *GenerateTokenServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateTokenServiceAccountOK, error)

	GetAllTokens(params *GetAllTokensParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllTokensOK, error)

	GetCustomerToken(params *GetCustomerTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCustomerTokenOK, error)

	GetCustomerTokens(params *GetCustomerTokensParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCustomerTokensOK, error)

	GetTokensServiceAccount(params *GetTokensServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTokensServiceAccountOK, error)

	UpdateTokenName(params *UpdateTokenNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTokenNameOK, error)

	UpdateTokenNameServiceAccount(params *UpdateTokenNameServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTokenNameServiceAccountOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateToken creates new api token

Returns the list of all api tokens for a user. The newly created api token is the last element of returned list.
*/
func (a *Client) CreateToken(params *CreateTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createToken",
		Method:             "POST",
		PathPattern:        "/api/v2/apitoken",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteCustomerToken deletes the specified api token for a customer
*/
func (a *Client) DeleteCustomerToken(params *DeleteCustomerTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCustomerTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCustomerTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCustomerToken",
		Method:             "PUT",
		PathPattern:        "/api/v2/apitoken/customertokens/revoke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteCustomerTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCustomerTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCustomerToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteToken deletes the specified api token
*/
func (a *Client) DeleteToken(params *DeleteTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteToken",
		Method:             "DELETE",
		PathPattern:        "/api/v2/apitoken/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteTokenServiceAccount deletes the specified api token of the given service account
*/
func (a *Client) DeleteTokenServiceAccount(params *DeleteTokenServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteTokenServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTokenServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteTokenServiceAccount",
		Method:             "DELETE",
		PathPattern:        "/api/v2/apitoken/serviceaccount/{id}/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTokenServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTokenServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteTokenServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GenerateTokenServiceAccount creates a new api token for the service account

Returns the list of all api tokens for the service account. The newly created api token is the last element of returned list.
*/
func (a *Client) GenerateTokenServiceAccount(params *GenerateTokenServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GenerateTokenServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateTokenServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateTokenServiceAccount",
		Method:             "POST",
		PathPattern:        "/api/v2/apitoken/serviceaccount/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GenerateTokenServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateTokenServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generateTokenServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllTokens gets all api tokens for a user
*/
func (a *Client) GetAllTokens(params *GetAllTokensParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllTokensParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllTokens",
		Method:             "GET",
		PathPattern:        "/api/v2/apitoken",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllTokensOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllTokens: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCustomerToken gets the specified api token for a customer
*/
func (a *Client) GetCustomerToken(params *GetCustomerTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCustomerTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomerTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCustomerToken",
		Method:             "GET",
		PathPattern:        "/api/v2/apitoken/customertokens/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomerTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCustomerTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCustomerToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetCustomerTokens gets all api tokens for a customer
*/
func (a *Client) GetCustomerTokens(params *GetCustomerTokensParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCustomerTokensOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCustomerTokensParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCustomerTokens",
		Method:             "GET",
		PathPattern:        "/api/v2/apitoken/customertokens",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCustomerTokensReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCustomerTokensOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCustomerTokens: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetTokensServiceAccount gets all api tokens for the given service account
*/
func (a *Client) GetTokensServiceAccount(params *GetTokensServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTokensServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTokensServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTokensServiceAccount",
		Method:             "GET",
		PathPattern:        "/api/v2/apitoken/serviceaccount/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetTokensServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTokensServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTokensServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTokenName updates the name of the specified api token
*/
func (a *Client) UpdateTokenName(params *UpdateTokenNameParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTokenNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTokenNameParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTokenName",
		Method:             "PUT",
		PathPattern:        "/api/v2/apitoken/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTokenNameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTokenNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTokenName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateTokenNameServiceAccount updates the name of the specified api token for the given service account
*/
func (a *Client) UpdateTokenNameServiceAccount(params *UpdateTokenNameServiceAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTokenNameServiceAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTokenNameServiceAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateTokenNameServiceAccount",
		Method:             "PUT",
		PathPattern:        "/api/v2/apitoken/serviceaccount/{id}/{token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTokenNameServiceAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTokenNameServiceAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateTokenNameServiceAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
