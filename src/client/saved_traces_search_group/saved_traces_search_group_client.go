// Code generated by go-swagger; DO NOT EDIT.

package saved_traces_search_group

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new saved traces search group API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for saved traces search group API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddSavedTracesSearchToGroup(params *AddSavedTracesSearchToGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddSavedTracesSearchToGroupOK, error)

	CreateSavedTracesSearchGroup(params *CreateSavedTracesSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSavedTracesSearchGroupOK, error)

	DeleteSavedTracesSearchGroup(params *DeleteSavedTracesSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSavedTracesSearchGroupOK, error)

	GetAllSavedTracesSearchGroup(params *GetAllSavedTracesSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSavedTracesSearchGroupOK, error)

	GetSavedTracesSearchGroup(params *GetSavedTracesSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedTracesSearchGroupOK, error)

	GetSavedTracesSearchesForGroup(params *GetSavedTracesSearchesForGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedTracesSearchesForGroupOK, error)

	RemoveSavedTracesSearchFromGroup(params *RemoveSavedTracesSearchFromGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveSavedTracesSearchFromGroupOK, error)

	UpdateSavedTracesSearchGroup(params *UpdateSavedTracesSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSavedTracesSearchGroupOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddSavedTracesSearchToGroup adds a search to a search group
*/
func (a *Client) AddSavedTracesSearchToGroup(params *AddSavedTracesSearchToGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddSavedTracesSearchToGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddSavedTracesSearchToGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addSavedTracesSearchToGroup",
		Method:             "POST",
		PathPattern:        "/api/v2/savedtracessearchgroup/{id}/addSearch/{searchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddSavedTracesSearchToGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddSavedTracesSearchToGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addSavedTracesSearchToGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSavedTracesSearchGroup creates a search group
*/
func (a *Client) CreateSavedTracesSearchGroup(params *CreateSavedTracesSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateSavedTracesSearchGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSavedTracesSearchGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSavedTracesSearchGroup",
		Method:             "POST",
		PathPattern:        "/api/v2/savedtracessearchgroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSavedTracesSearchGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSavedTracesSearchGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSavedTracesSearchGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteSavedTracesSearchGroup deletes a search group
*/
func (a *Client) DeleteSavedTracesSearchGroup(params *DeleteSavedTracesSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteSavedTracesSearchGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSavedTracesSearchGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSavedTracesSearchGroup",
		Method:             "DELETE",
		PathPattern:        "/api/v2/savedtracessearchgroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSavedTracesSearchGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSavedTracesSearchGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSavedTracesSearchGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllSavedTracesSearchGroup gets all search groups for a user
*/
func (a *Client) GetAllSavedTracesSearchGroup(params *GetAllSavedTracesSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllSavedTracesSearchGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSavedTracesSearchGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllSavedTracesSearchGroup",
		Method:             "GET",
		PathPattern:        "/api/v2/savedtracessearchgroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllSavedTracesSearchGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllSavedTracesSearchGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllSavedTracesSearchGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSavedTracesSearchGroup gets a specific search group
*/
func (a *Client) GetSavedTracesSearchGroup(params *GetSavedTracesSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedTracesSearchGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSavedTracesSearchGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSavedTracesSearchGroup",
		Method:             "GET",
		PathPattern:        "/api/v2/savedtracessearchgroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSavedTracesSearchGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSavedTracesSearchGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSavedTracesSearchGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSavedTracesSearchesForGroup gets all searches for a search group
*/
func (a *Client) GetSavedTracesSearchesForGroup(params *GetSavedTracesSearchesForGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetSavedTracesSearchesForGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSavedTracesSearchesForGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSavedTracesSearchesForGroup",
		Method:             "GET",
		PathPattern:        "/api/v2/savedtracessearchgroup/{id}/searches",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSavedTracesSearchesForGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSavedTracesSearchesForGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSavedTracesSearchesForGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveSavedTracesSearchFromGroup removes a search from a search group
*/
func (a *Client) RemoveSavedTracesSearchFromGroup(params *RemoveSavedTracesSearchFromGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveSavedTracesSearchFromGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveSavedTracesSearchFromGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeSavedTracesSearchFromGroup",
		Method:             "POST",
		PathPattern:        "/api/v2/savedtracessearchgroup/{id}/removeSearch/{searchId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveSavedTracesSearchFromGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveSavedTracesSearchFromGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeSavedTracesSearchFromGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSavedTracesSearchGroup updates a search group
*/
func (a *Client) UpdateSavedTracesSearchGroup(params *UpdateSavedTracesSearchGroupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateSavedTracesSearchGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSavedTracesSearchGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSavedTracesSearchGroup",
		Method:             "PUT",
		PathPattern:        "/api/v2/savedtracessearchgroup/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSavedTracesSearchGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSavedTracesSearchGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSavedTracesSearchGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
