// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddUserToUserGroups(params *AddUserToUserGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUserToUserGroupsOK, error)

	CreateUser(params *CreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserOK, error)

	DeleteMultipleUsers(params *DeleteMultipleUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMultipleUsersOK, error)

	DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	GetAllUsers(params *GetAllUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUsersOK, error)

	GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserOK, error)

	GetUserBusinessFunctions(params *GetUserBusinessFunctionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserBusinessFunctionsOK, error)

	GrantPermissionToUsers(params *GrantPermissionToUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GrantPermissionToUsersOK, error)

	GrantUserPermission(params *GrantUserPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GrantUserPermissionOK, error)

	InviteUsers(params *InviteUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InviteUsersOK, error)

	RemoveUserFromUserGroups(params *RemoveUserFromUserGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveUserFromUserGroupsOK, error)

	RevokePermissionFromUsers(params *RevokePermissionFromUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokePermissionFromUsersOK, error)

	RevokeUserPermission(params *RevokeUserPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeUserPermissionOK, error)

	UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserOK, error)

	ValidateUsers(params *ValidateUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateUsersOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddUserToUserGroups adds specific groups to the user or service account
*/
func (a *Client) AddUserToUserGroups(params *AddUserToUserGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddUserToUserGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddUserToUserGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addUserToUserGroups",
		Method:             "POST",
		PathPattern:        "/api/v2/user/{id}/addUserGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddUserToUserGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddUserToUserGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addUserToUserGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateUser creates an user if the user doesn t already exist
*/
func (a *Client) CreateUser(params *CreateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createUser",
		Method:             "POST",
		PathPattern:        "/api/v2/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteMultipleUsers deletes multiple users or service accounts
*/
func (a *Client) DeleteMultipleUsers(params *DeleteMultipleUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteMultipleUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMultipleUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteMultipleUsers",
		Method:             "POST",
		PathPattern:        "/api/v2/user/deleteUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteMultipleUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMultipleUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteMultipleUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteUser deletes a user or service account identified by id
*/
func (a *Client) DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUser",
		Method:             "DELETE",
		PathPattern:        "/api/v2/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetAllUsers gets all users

Returns all users
*/
func (a *Client) GetAllUsers(params *GetAllUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllUsers",
		Method:             "GET",
		PathPattern:        "/api/v2/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUser retrieves a user by identifier email address
*/
func (a *Client) GetUser(params *GetUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUser",
		Method:             "GET",
		PathPattern:        "/api/v2/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetUserBusinessFunctions returns business functions of a specific user or service account
*/
func (a *Client) GetUserBusinessFunctions(params *GetUserBusinessFunctionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserBusinessFunctionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserBusinessFunctionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserBusinessFunctions",
		Method:             "GET",
		PathPattern:        "/api/v2/user/{id}/businessFunctions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetUserBusinessFunctionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserBusinessFunctionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUserBusinessFunctions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GrantPermissionToUsers grants a specific permission to multiple users or service accounts
*/
func (a *Client) GrantPermissionToUsers(params *GrantPermissionToUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GrantPermissionToUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGrantPermissionToUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "grantPermissionToUsers",
		Method:             "POST",
		PathPattern:        "/api/v2/user/grant/{permission}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GrantPermissionToUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GrantPermissionToUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for grantPermissionToUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GrantUserPermission grants a specific permission to user or service account
*/
func (a *Client) GrantUserPermission(params *GrantUserPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GrantUserPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGrantUserPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "grantUserPermission",
		Method:             "POST",
		PathPattern:        "/api/v2/user/{id}/grant",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GrantUserPermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GrantUserPermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for grantUserPermission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
InviteUsers invites users with given user groups and permissions
*/
func (a *Client) InviteUsers(params *InviteUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*InviteUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInviteUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "inviteUsers",
		Method:             "POST",
		PathPattern:        "/api/v2/user/invite",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &InviteUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InviteUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for inviteUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveUserFromUserGroups removes specific groups from the user or service account
*/
func (a *Client) RemoveUserFromUserGroups(params *RemoveUserFromUserGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveUserFromUserGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveUserFromUserGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeUserFromUserGroups",
		Method:             "POST",
		PathPattern:        "/api/v2/user/{id}/removeUserGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveUserFromUserGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveUserFromUserGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeUserFromUserGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokePermissionFromUsers revokes a specific permission from multiple users or service accounts
*/
func (a *Client) RevokePermissionFromUsers(params *RevokePermissionFromUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokePermissionFromUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokePermissionFromUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokePermissionFromUsers",
		Method:             "POST",
		PathPattern:        "/api/v2/user/revoke/{permission}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokePermissionFromUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokePermissionFromUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokePermissionFromUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokeUserPermission revokes a specific permission from user or service account
*/
func (a *Client) RevokeUserPermission(params *RevokeUserPermissionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RevokeUserPermissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeUserPermissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeUserPermission",
		Method:             "POST",
		PathPattern:        "/api/v2/user/{id}/revoke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeUserPermissionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeUserPermissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeUserPermission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateUser updates user with given user groups permissions and ingestion policy
*/
func (a *Client) UpdateUser(params *UpdateUserParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUser",
		Method:             "PUT",
		PathPattern:        "/api/v2/user/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ValidateUsers returns valid users and service accounts also invalid identifiers from the given list
*/
func (a *Client) ValidateUsers(params *ValidateUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateUsers",
		Method:             "POST",
		PathPattern:        "/api/v2/user/validateUsers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ValidateUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
