// Code generated by go-swagger; DO NOT EDIT.

package usage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new usage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for usage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddAccounts(params *AddAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddAccountsOK, error)

	AddGroups(params *AddGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddGroupsOK, error)

	CreateIngestionPolicy(params *CreateIngestionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIngestionPolicyOK, error)

	DeleteIngestionPolicy(params *DeleteIngestionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIngestionPolicyOK, error)

	ExportCSV(params *ExportCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	GetAllIngestionPolicies(params *GetAllIngestionPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIngestionPoliciesOK, error)

	GetIngestionPolicy(params *GetIngestionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngestionPolicyOK, error)

	GetIngestionPolicyHistory(params *GetIngestionPolicyHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngestionPolicyHistoryOK, error)

	RemoveAccounts(params *RemoveAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveAccountsOK, error)

	RemoveGroups(params *RemoveGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveGroupsOK, error)

	UpdateIngestionPolicy(params *UpdateIngestionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIngestionPolicyOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddAccounts adds accounts to ingestion policy
*/
func (a *Client) AddAccounts(params *AddAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAccounts",
		Method:             "POST",
		PathPattern:        "/api/v2/usage/ingestionpolicy/{id}/addAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddGroups adds groups to the ingestion policy
*/
func (a *Client) AddGroups(params *AddGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addGroups",
		Method:             "POST",
		PathPattern:        "/api/v2/usage/ingestionpolicy/{id}/addGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateIngestionPolicy creates a specific ingestion policy
*/
func (a *Client) CreateIngestionPolicy(params *CreateIngestionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateIngestionPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIngestionPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createIngestionPolicy",
		Method:             "POST",
		PathPattern:        "/api/v2/usage/ingestionpolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateIngestionPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateIngestionPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createIngestionPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteIngestionPolicy deletes a specific ingestion policy
*/
func (a *Client) DeleteIngestionPolicy(params *DeleteIngestionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteIngestionPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIngestionPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteIngestionPolicy",
		Method:             "DELETE",
		PathPattern:        "/api/v2/usage/ingestionpolicy/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteIngestionPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteIngestionPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteIngestionPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ExportCSV exports a c s v report
*/
func (a *Client) ExportCSV(params *ExportCSVParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportCSVParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "exportCSV",
		Method:             "GET",
		PathPattern:        "/api/v2/usage/exportcsv",
		ProducesMediaTypes: []string{"application/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ExportCSVReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
GetAllIngestionPolicies gets all ingestion policies for a customer
*/
func (a *Client) GetAllIngestionPolicies(params *GetAllIngestionPoliciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllIngestionPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllIngestionPoliciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllIngestionPolicies",
		Method:             "GET",
		PathPattern:        "/api/v2/usage/ingestionpolicy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllIngestionPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllIngestionPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllIngestionPolicies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIngestionPolicy gets a specific ingestion policy
*/
func (a *Client) GetIngestionPolicy(params *GetIngestionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngestionPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngestionPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngestionPolicy",
		Method:             "GET",
		PathPattern:        "/api/v2/usage/ingestionpolicy/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngestionPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngestionPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIngestionPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetIngestionPolicyHistory gets the version history of ingestion policy
*/
func (a *Client) GetIngestionPolicyHistory(params *GetIngestionPolicyHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetIngestionPolicyHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIngestionPolicyHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getIngestionPolicyHistory",
		Method:             "GET",
		PathPattern:        "/api/v2/usage/ingestionpolicy/{id}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIngestionPolicyHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetIngestionPolicyHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getIngestionPolicyHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveAccounts removes accounts from ingestion policy
*/
func (a *Client) RemoveAccounts(params *RemoveAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeAccounts",
		Method:             "POST",
		PathPattern:        "/api/v2/usage/ingestionpolicy/{id}/removeAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveGroups removes groups from the ingestion policy
*/
func (a *Client) RemoveGroups(params *RemoveGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeGroups",
		Method:             "POST",
		PathPattern:        "/api/v2/usage/ingestionpolicy/{id}/removeGroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateIngestionPolicy updates a specific ingestion policy
*/
func (a *Client) UpdateIngestionPolicy(params *UpdateIngestionPolicyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateIngestionPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIngestionPolicyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateIngestionPolicy",
		Method:             "PUT",
		PathPattern:        "/api/v2/usage/ingestionpolicy/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateIngestionPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateIngestionPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateIngestionPolicy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
