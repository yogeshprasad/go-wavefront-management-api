// Code generated by go-swagger; DO NOT EDIT.

package derived_metric

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new derived metric API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for derived metric API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddTagToDerivedMetric(params *AddTagToDerivedMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddTagToDerivedMetricOK, error)

	CreateDerivedMetric(params *CreateDerivedMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDerivedMetricOK, error)

	DeleteDerivedMetric(params *DeleteDerivedMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDerivedMetricOK, error)

	GetAllDerivedMetrics(params *GetAllDerivedMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDerivedMetricsOK, error)

	GetDerivedMetric(params *GetDerivedMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDerivedMetricOK, error)

	GetDerivedMetricByVersion(params *GetDerivedMetricByVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDerivedMetricByVersionOK, error)

	GetDerivedMetricHistory(params *GetDerivedMetricHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDerivedMetricHistoryOK, error)

	GetDerivedMetricTags(params *GetDerivedMetricTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDerivedMetricTagsOK, error)

	RemoveTagFromDerivedMetric(params *RemoveTagFromDerivedMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveTagFromDerivedMetricOK, error)

	SetDerivedMetricTags(params *SetDerivedMetricTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetDerivedMetricTagsOK, error)

	UndeleteDerivedMetric(params *UndeleteDerivedMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UndeleteDerivedMetricOK, error)

	UpdateDerivedMetric(params *UpdateDerivedMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDerivedMetricOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AddTagToDerivedMetric adds a tag to a specific derived metric
*/
func (a *Client) AddTagToDerivedMetric(params *AddTagToDerivedMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddTagToDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTagToDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addTagToDerivedMetric",
		Method:             "PUT",
		PathPattern:        "/api/v2/derivedmetric/{id}/tag/{tagValue}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddTagToDerivedMetricReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTagToDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTagToDerivedMetric: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateDerivedMetric creates a specific derived metric definition
*/
func (a *Client) CreateDerivedMetric(params *CreateDerivedMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDerivedMetric",
		Method:             "POST",
		PathPattern:        "/api/v2/derivedmetric",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateDerivedMetricReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDerivedMetric: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteDerivedMetric deletes a specific derived metric definition
*/
func (a *Client) DeleteDerivedMetric(params *DeleteDerivedMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDerivedMetric",
		Method:             "DELETE",
		PathPattern:        "/api/v2/derivedmetric/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteDerivedMetricReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDerivedMetric: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAllDerivedMetrics gets all derived metric definitions for a customer
*/
func (a *Client) GetAllDerivedMetrics(params *GetAllDerivedMetricsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllDerivedMetricsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllDerivedMetricsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllDerivedMetrics",
		Method:             "GET",
		PathPattern:        "/api/v2/derivedmetric",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllDerivedMetricsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllDerivedMetricsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAllDerivedMetrics: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDerivedMetric gets a specific registered query
*/
func (a *Client) GetDerivedMetric(params *GetDerivedMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDerivedMetric",
		Method:             "GET",
		PathPattern:        "/api/v2/derivedmetric/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDerivedMetricReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDerivedMetric: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDerivedMetricByVersion gets a specific historical version of a specific derived metric definition
*/
func (a *Client) GetDerivedMetricByVersion(params *GetDerivedMetricByVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDerivedMetricByVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDerivedMetricByVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDerivedMetricByVersion",
		Method:             "GET",
		PathPattern:        "/api/v2/derivedmetric/{id}/history/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDerivedMetricByVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDerivedMetricByVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDerivedMetricByVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDerivedMetricHistory gets the version history of a specific derived metric definition
*/
func (a *Client) GetDerivedMetricHistory(params *GetDerivedMetricHistoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDerivedMetricHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDerivedMetricHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDerivedMetricHistory",
		Method:             "GET",
		PathPattern:        "/api/v2/derivedmetric/{id}/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDerivedMetricHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDerivedMetricHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDerivedMetricHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetDerivedMetricTags gets all tags associated with a specific derived metric definition
*/
func (a *Client) GetDerivedMetricTags(params *GetDerivedMetricTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDerivedMetricTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDerivedMetricTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDerivedMetricTags",
		Method:             "GET",
		PathPattern:        "/api/v2/derivedmetric/{id}/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetDerivedMetricTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDerivedMetricTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDerivedMetricTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RemoveTagFromDerivedMetric removes a tag from a specific derived metric
*/
func (a *Client) RemoveTagFromDerivedMetric(params *RemoveTagFromDerivedMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveTagFromDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveTagFromDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeTagFromDerivedMetric",
		Method:             "DELETE",
		PathPattern:        "/api/v2/derivedmetric/{id}/tag/{tagValue}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RemoveTagFromDerivedMetricReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveTagFromDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeTagFromDerivedMetric: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SetDerivedMetricTags sets all tags associated with a specific derived metric definition
*/
func (a *Client) SetDerivedMetricTags(params *SetDerivedMetricTagsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SetDerivedMetricTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetDerivedMetricTagsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setDerivedMetricTags",
		Method:             "POST",
		PathPattern:        "/api/v2/derivedmetric/{id}/tag",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetDerivedMetricTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetDerivedMetricTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setDerivedMetricTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UndeleteDerivedMetric undeletes a specific derived metric definition
*/
func (a *Client) UndeleteDerivedMetric(params *UndeleteDerivedMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UndeleteDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUndeleteDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "undeleteDerivedMetric",
		Method:             "POST",
		PathPattern:        "/api/v2/derivedmetric/{id}/undelete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UndeleteDerivedMetricReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UndeleteDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for undeleteDerivedMetric: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateDerivedMetric updates a specific derived metric definition
*/
func (a *Client) UpdateDerivedMetric(params *UpdateDerivedMetricParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDerivedMetricOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDerivedMetricParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDerivedMetric",
		Method:             "PUT",
		PathPattern:        "/api/v2/derivedmetric/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateDerivedMetricReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDerivedMetricOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDerivedMetric: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
