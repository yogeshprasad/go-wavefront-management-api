// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudIntegration Wavefront Cloud Integration
//
// swagger:model CloudIntegration
type CloudIntegration struct {

	// A list of point tag key-values to add to every point ingested using this integration
	AdditionalTags map[string]string `json:"additionalTags,omitempty"`

	// app dynamics
	AppDynamics *AppDynamicsConfiguration `json:"appDynamics,omitempty"`

	// azure
	Azure *AzureConfiguration `json:"azure,omitempty"`

	// azure activity log
	AzureActivityLog *AzureActivityLogConfiguration `json:"azureActivityLog,omitempty"`

	// cloud trail
	CloudTrail *CloudTrailConfiguration `json:"cloudTrail,omitempty"`

	// cloud watch
	CloudWatch *CloudWatchConfiguration `json:"cloudWatch,omitempty"`

	// created epoch millis
	// Read Only: true
	CreatedEpochMillis int64 `json:"createdEpochMillis,omitempty"`

	// creator Id
	// Read Only: true
	CreatorID string `json:"creatorId,omitempty"`

	// deleted
	// Read Only: true
	Deleted *bool `json:"deleted,omitempty"`

	// True when an aws credential failed to authenticate.
	// Read Only: true
	Disabled *bool `json:"disabled,omitempty"`

	// dynatrace
	Dynatrace *DynatraceConfiguration `json:"dynatrace,omitempty"`

	// ec2
	Ec2 *EC2Configuration `json:"ec2,omitempty"`

	// force save
	ForceSave bool `json:"forceSave,omitempty"`

	// gcp
	Gcp *GCPConfiguration `json:"gcp,omitempty"`

	// gcp billing
	GcpBilling *GCPBillingConfiguration `json:"gcpBilling,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// in trash
	// Read Only: true
	InTrash *bool `json:"inTrash,omitempty"`

	// Digest of the last error encountered by Wavefront servers when fetching data using this integration
	// Read Only: true
	LastError string `json:"lastError,omitempty"`

	// last error event
	LastErrorEvent *Event `json:"lastErrorEvent,omitempty"`

	// Time, in epoch millis, of the last error encountered by Wavefront servers when fetching data using this integration
	// Read Only: true
	LastErrorMs int64 `json:"lastErrorMs,omitempty"`

	// Number of metrics / events ingested by this integration the last time it ran
	// Read Only: true
	LastMetricCount int64 `json:"lastMetricCount,omitempty"`

	// Time, in epoch millis, that this integration was last processed
	// Read Only: true
	LastProcessingTimestamp int64 `json:"lastProcessingTimestamp,omitempty"`

	// Opaque id of the last Wavefront integrations service to act on this integration
	// Read Only: true
	LastProcessorID string `json:"lastProcessorId,omitempty"`

	// Time that this integration last received a data point, in epoch millis
	// Read Only: true
	LastReceivedDataPointMs int64 `json:"lastReceivedDataPointMs,omitempty"`

	// The human-readable name of this integration
	// Required: true
	Name *string `json:"name"`

	// new relic
	NewRelic *NewRelicConfiguration `json:"newRelic,omitempty"`

	// reuse external Id credential
	ReuseExternalIDCredential string `json:"reuseExternalIdCredential,omitempty"`

	// A value denoting which cloud service this integration integrates with
	// Required: true
	// Enum: [CLOUDWATCH CLOUDTRAIL EC2 GCP GCPBILLING AZURE AZUREACTIVITYLOG NEWRELIC APPDYNAMICS VROPS SNOWFLAKE DYNATRACE]
	Service *string `json:"service"`

	// Service refresh rate in minutes.
	ServiceRefreshRateInMins int32 `json:"serviceRefreshRateInMins,omitempty"`

	// snowflake
	Snowflake *SnowflakeConfiguration `json:"snowflake,omitempty"`

	// updated epoch millis
	// Read Only: true
	UpdatedEpochMillis int64 `json:"updatedEpochMillis,omitempty"`

	// updater Id
	// Read Only: true
	UpdaterID string `json:"updaterId,omitempty"`

	// vrops
	Vrops *VropsConfiguration `json:"vrops,omitempty"`
}

// Validate validates this cloud integration
func (m *CloudIntegration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppDynamics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureActivityLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudTrail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudWatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDynatrace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEc2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpBilling(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastErrorEvent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewRelic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnowflake(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVrops(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudIntegration) validateAppDynamics(formats strfmt.Registry) error {
	if swag.IsZero(m.AppDynamics) { // not required
		return nil
	}

	if m.AppDynamics != nil {
		if err := m.AppDynamics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appDynamics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appDynamics")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) validateAzure(formats strfmt.Registry) error {
	if swag.IsZero(m.Azure) { // not required
		return nil
	}

	if m.Azure != nil {
		if err := m.Azure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) validateAzureActivityLog(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureActivityLog) { // not required
		return nil
	}

	if m.AzureActivityLog != nil {
		if err := m.AzureActivityLog.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureActivityLog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureActivityLog")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) validateCloudTrail(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudTrail) { // not required
		return nil
	}

	if m.CloudTrail != nil {
		if err := m.CloudTrail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudTrail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudTrail")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) validateCloudWatch(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudWatch) { // not required
		return nil
	}

	if m.CloudWatch != nil {
		if err := m.CloudWatch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudWatch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudWatch")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) validateDynatrace(formats strfmt.Registry) error {
	if swag.IsZero(m.Dynatrace) { // not required
		return nil
	}

	if m.Dynatrace != nil {
		if err := m.Dynatrace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dynatrace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dynatrace")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) validateEc2(formats strfmt.Registry) error {
	if swag.IsZero(m.Ec2) { // not required
		return nil
	}

	if m.Ec2 != nil {
		if err := m.Ec2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ec2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ec2")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) validateGcp(formats strfmt.Registry) error {
	if swag.IsZero(m.Gcp) { // not required
		return nil
	}

	if m.Gcp != nil {
		if err := m.Gcp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcp")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) validateGcpBilling(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpBilling) { // not required
		return nil
	}

	if m.GcpBilling != nil {
		if err := m.GcpBilling.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpBilling")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpBilling")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) validateLastErrorEvent(formats strfmt.Registry) error {
	if swag.IsZero(m.LastErrorEvent) { // not required
		return nil
	}

	if m.LastErrorEvent != nil {
		if err := m.LastErrorEvent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastErrorEvent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastErrorEvent")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) validateNewRelic(formats strfmt.Registry) error {
	if swag.IsZero(m.NewRelic) { // not required
		return nil
	}

	if m.NewRelic != nil {
		if err := m.NewRelic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newRelic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newRelic")
			}
			return err
		}
	}

	return nil
}

var cloudIntegrationTypeServicePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLOUDWATCH","CLOUDTRAIL","EC2","GCP","GCPBILLING","AZURE","AZUREACTIVITYLOG","NEWRELIC","APPDYNAMICS","VROPS","SNOWFLAKE","DYNATRACE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudIntegrationTypeServicePropEnum = append(cloudIntegrationTypeServicePropEnum, v)
	}
}

const (

	// CloudIntegrationServiceCLOUDWATCH captures enum value "CLOUDWATCH"
	CloudIntegrationServiceCLOUDWATCH string = "CLOUDWATCH"

	// CloudIntegrationServiceCLOUDTRAIL captures enum value "CLOUDTRAIL"
	CloudIntegrationServiceCLOUDTRAIL string = "CLOUDTRAIL"

	// CloudIntegrationServiceEC2 captures enum value "EC2"
	CloudIntegrationServiceEC2 string = "EC2"

	// CloudIntegrationServiceGCP captures enum value "GCP"
	CloudIntegrationServiceGCP string = "GCP"

	// CloudIntegrationServiceGCPBILLING captures enum value "GCPBILLING"
	CloudIntegrationServiceGCPBILLING string = "GCPBILLING"

	// CloudIntegrationServiceAZURE captures enum value "AZURE"
	CloudIntegrationServiceAZURE string = "AZURE"

	// CloudIntegrationServiceAZUREACTIVITYLOG captures enum value "AZUREACTIVITYLOG"
	CloudIntegrationServiceAZUREACTIVITYLOG string = "AZUREACTIVITYLOG"

	// CloudIntegrationServiceNEWRELIC captures enum value "NEWRELIC"
	CloudIntegrationServiceNEWRELIC string = "NEWRELIC"

	// CloudIntegrationServiceAPPDYNAMICS captures enum value "APPDYNAMICS"
	CloudIntegrationServiceAPPDYNAMICS string = "APPDYNAMICS"

	// CloudIntegrationServiceVROPS captures enum value "VROPS"
	CloudIntegrationServiceVROPS string = "VROPS"

	// CloudIntegrationServiceSNOWFLAKE captures enum value "SNOWFLAKE"
	CloudIntegrationServiceSNOWFLAKE string = "SNOWFLAKE"

	// CloudIntegrationServiceDYNATRACE captures enum value "DYNATRACE"
	CloudIntegrationServiceDYNATRACE string = "DYNATRACE"
)

// prop value enum
func (m *CloudIntegration) validateServiceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cloudIntegrationTypeServicePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CloudIntegration) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	// value enum
	if err := m.validateServiceEnum("service", "body", *m.Service); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) validateSnowflake(formats strfmt.Registry) error {
	if swag.IsZero(m.Snowflake) { // not required
		return nil
	}

	if m.Snowflake != nil {
		if err := m.Snowflake.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snowflake")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snowflake")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) validateVrops(formats strfmt.Registry) error {
	if swag.IsZero(m.Vrops) { // not required
		return nil
	}

	if m.Vrops != nil {
		if err := m.Vrops.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vrops")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vrops")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cloud integration based on the context it is used
func (m *CloudIntegration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppDynamics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzure(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureActivityLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudTrail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudWatch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedEpochMillis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatorID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisabled(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDynatrace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEc2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpBilling(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInTrash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastErrorEvent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastErrorMs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastMetricCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastProcessingTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastProcessorID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastReceivedDataPointMs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNewRelic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnowflake(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedEpochMillis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdaterID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVrops(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudIntegration) contextValidateAppDynamics(ctx context.Context, formats strfmt.Registry) error {

	if m.AppDynamics != nil {
		if err := m.AppDynamics.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appDynamics")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appDynamics")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) contextValidateAzure(ctx context.Context, formats strfmt.Registry) error {

	if m.Azure != nil {
		if err := m.Azure.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azure")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) contextValidateAzureActivityLog(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureActivityLog != nil {
		if err := m.AzureActivityLog.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureActivityLog")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureActivityLog")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) contextValidateCloudTrail(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudTrail != nil {
		if err := m.CloudTrail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudTrail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudTrail")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) contextValidateCloudWatch(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudWatch != nil {
		if err := m.CloudWatch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudWatch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudWatch")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) contextValidateCreatedEpochMillis(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdEpochMillis", "body", int64(m.CreatedEpochMillis)); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) contextValidateCreatorID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "creatorId", "body", string(m.CreatorID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) contextValidateDeleted(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleted", "body", m.Deleted); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) contextValidateDisabled(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "disabled", "body", m.Disabled); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) contextValidateDynatrace(ctx context.Context, formats strfmt.Registry) error {

	if m.Dynatrace != nil {
		if err := m.Dynatrace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dynatrace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dynatrace")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) contextValidateEc2(ctx context.Context, formats strfmt.Registry) error {

	if m.Ec2 != nil {
		if err := m.Ec2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ec2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ec2")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) contextValidateGcp(ctx context.Context, formats strfmt.Registry) error {

	if m.Gcp != nil {
		if err := m.Gcp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcp")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) contextValidateGcpBilling(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpBilling != nil {
		if err := m.GcpBilling.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpBilling")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpBilling")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) contextValidateInTrash(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "inTrash", "body", m.InTrash); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) contextValidateLastError(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastError", "body", string(m.LastError)); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) contextValidateLastErrorEvent(ctx context.Context, formats strfmt.Registry) error {

	if m.LastErrorEvent != nil {
		if err := m.LastErrorEvent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastErrorEvent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastErrorEvent")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) contextValidateLastErrorMs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastErrorMs", "body", int64(m.LastErrorMs)); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) contextValidateLastMetricCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastMetricCount", "body", int64(m.LastMetricCount)); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) contextValidateLastProcessingTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastProcessingTimestamp", "body", int64(m.LastProcessingTimestamp)); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) contextValidateLastProcessorID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastProcessorId", "body", string(m.LastProcessorID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) contextValidateLastReceivedDataPointMs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastReceivedDataPointMs", "body", int64(m.LastReceivedDataPointMs)); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) contextValidateNewRelic(ctx context.Context, formats strfmt.Registry) error {

	if m.NewRelic != nil {
		if err := m.NewRelic.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("newRelic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("newRelic")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) contextValidateSnowflake(ctx context.Context, formats strfmt.Registry) error {

	if m.Snowflake != nil {
		if err := m.Snowflake.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snowflake")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snowflake")
			}
			return err
		}
	}

	return nil
}

func (m *CloudIntegration) contextValidateUpdatedEpochMillis(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedEpochMillis", "body", int64(m.UpdatedEpochMillis)); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) contextValidateUpdaterID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updaterId", "body", string(m.UpdaterID)); err != nil {
		return err
	}

	return nil
}

func (m *CloudIntegration) contextValidateVrops(ctx context.Context, formats strfmt.Registry) error {

	if m.Vrops != nil {
		if err := m.Vrops.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vrops")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vrops")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudIntegration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudIntegration) UnmarshalBinary(b []byte) error {
	var res CloudIntegration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
