// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Message A message for display to a particular user, all users within a customer, or all users on a cluster
//
// swagger:model Message
type Message struct {

	// A string->string map of additional properties associated with this message
	Attributes map[string]string `json:"attributes,omitempty"`

	// Message content
	// Required: true
	Content *string `json:"content"`

	// The form of display for this message
	// Required: true
	// Enum: [BANNER TOASTER MODAL]
	Display *string `json:"display"`

	// When this message will stop being displayed, in epoch millis
	// Required: true
	EndEpochMillis *int64 `json:"endEpochMillis"`

	// id
	ID string `json:"id,omitempty"`

	// A derived field for whether the current user has read this message
	Read bool `json:"read,omitempty"`

	// The audience scope that this message should reach
	// Required: true
	// Enum: [CLUSTER CUSTOMER USER]
	Scope *string `json:"scope"`

	// Message severity
	// Required: true
	// Enum: [MARKETING INFO WARN SEVERE]
	Severity *string `json:"severity"`

	// Message source.  System messages will com from 'system@wavefront.com'
	// Required: true
	Source *string `json:"source"`

	// When this message will begin to be displayed, in epoch millis
	// Required: true
	StartEpochMillis *int64 `json:"startEpochMillis"`

	// For scope=CUSTOMER or scope=USER, the individual customer or user id
	Target string `json:"target,omitempty"`

	// Title of this message
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this message
func (m *Message) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndEpochMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartEpochMillis(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Message) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

var messageTypeDisplayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BANNER","TOASTER","MODAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageTypeDisplayPropEnum = append(messageTypeDisplayPropEnum, v)
	}
}

const (

	// MessageDisplayBANNER captures enum value "BANNER"
	MessageDisplayBANNER string = "BANNER"

	// MessageDisplayTOASTER captures enum value "TOASTER"
	MessageDisplayTOASTER string = "TOASTER"

	// MessageDisplayMODAL captures enum value "MODAL"
	MessageDisplayMODAL string = "MODAL"
)

// prop value enum
func (m *Message) validateDisplayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, messageTypeDisplayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Message) validateDisplay(formats strfmt.Registry) error {

	if err := validate.Required("display", "body", m.Display); err != nil {
		return err
	}

	// value enum
	if err := m.validateDisplayEnum("display", "body", *m.Display); err != nil {
		return err
	}

	return nil
}

func (m *Message) validateEndEpochMillis(formats strfmt.Registry) error {

	if err := validate.Required("endEpochMillis", "body", m.EndEpochMillis); err != nil {
		return err
	}

	return nil
}

var messageTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLUSTER","CUSTOMER","USER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageTypeScopePropEnum = append(messageTypeScopePropEnum, v)
	}
}

const (

	// MessageScopeCLUSTER captures enum value "CLUSTER"
	MessageScopeCLUSTER string = "CLUSTER"

	// MessageScopeCUSTOMER captures enum value "CUSTOMER"
	MessageScopeCUSTOMER string = "CUSTOMER"

	// MessageScopeUSER captures enum value "USER"
	MessageScopeUSER string = "USER"
)

// prop value enum
func (m *Message) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, messageTypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Message) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", *m.Scope); err != nil {
		return err
	}

	return nil
}

var messageTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MARKETING","INFO","WARN","SEVERE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		messageTypeSeverityPropEnum = append(messageTypeSeverityPropEnum, v)
	}
}

const (

	// MessageSeverityMARKETING captures enum value "MARKETING"
	MessageSeverityMARKETING string = "MARKETING"

	// MessageSeverityINFO captures enum value "INFO"
	MessageSeverityINFO string = "INFO"

	// MessageSeverityWARN captures enum value "WARN"
	MessageSeverityWARN string = "WARN"

	// MessageSeveritySEVERE captures enum value "SEVERE"
	MessageSeveritySEVERE string = "SEVERE"
)

// prop value enum
func (m *Message) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, messageTypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Message) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", *m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *Message) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	return nil
}

func (m *Message) validateStartEpochMillis(formats strfmt.Registry) error {

	if err := validate.Required("startEpochMillis", "body", m.StartEpochMillis); err != nil {
		return err
	}

	return nil
}

func (m *Message) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this message based on context it is used
func (m *Message) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Message) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Message) UnmarshalBinary(b []byte) error {
	var res Message
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
