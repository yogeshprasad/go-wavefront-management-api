// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Sorting Specifies how returned items should be sorted
//
// swagger:model Sorting
type Sorting struct {

	// Whether to sort ascending.  If undefined, sorting is not guaranteed
	// Required: true
	Ascending *bool `json:"ascending"`

	// Whether this sort requests the default ranking order.  Ascending/descending does not matter if this attribute is true.
	// Read Only: true
	Default *bool `json:"default,omitempty"`

	// The facet by which to sort
	// Required: true
	Field *string `json:"field"`
}

// Validate validates this sorting
func (m *Sorting) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAscending(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateField(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Sorting) validateAscending(formats strfmt.Registry) error {

	if err := validate.Required("ascending", "body", m.Ascending); err != nil {
		return err
	}

	return nil
}

func (m *Sorting) validateField(formats strfmt.Registry) error {

	if err := validate.Required("field", "body", m.Field); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this sorting based on the context it is used
func (m *Sorting) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDefault(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Sorting) contextValidateDefault(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "default", "body", m.Default); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Sorting) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Sorting) UnmarshalBinary(b []byte) error {
	var res Sorting
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
