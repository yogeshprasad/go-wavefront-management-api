// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GCPBillingConfiguration Configurations specific to the Google Cloud Platform Billing integration.  Only applicable when the containing Credential has service=GCPBilling
//
// swagger:model GCPBillingConfiguration
type GCPBillingConfiguration struct {

	// API key for Google Cloud Platform (GCP). Use 'saved_api_key' to retain existing API key when updating
	// Required: true
	GcpAPIKey *string `json:"gcpApiKey"`

	// Private key for a Google Cloud Platform (GCP) service account within your project.  The account must at least be granted Monitoring Viewer permissions.  This key must be in the JSON format generated by GCP. Use '{"project_id": "%s"}' to retain the existing key when updating.
	// Required: true
	GcpJSONKey *string `json:"gcpJsonKey"`

	// The Google Cloud Platform (GCP) project id.
	// Required: true
	ProjectID *string `json:"projectId"`
}

// Validate validates this g c p billing configuration
func (m *GCPBillingConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGcpAPIKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpJSONKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GCPBillingConfiguration) validateGcpAPIKey(formats strfmt.Registry) error {

	if err := validate.Required("gcpApiKey", "body", m.GcpAPIKey); err != nil {
		return err
	}

	return nil
}

func (m *GCPBillingConfiguration) validateGcpJSONKey(formats strfmt.Registry) error {

	if err := validate.Required("gcpJsonKey", "body", m.GcpJSONKey); err != nil {
		return err
	}

	return nil
}

func (m *GCPBillingConfiguration) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this g c p billing configuration based on context it is used
func (m *GCPBillingConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GCPBillingConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GCPBillingConfiguration) UnmarshalBinary(b []byte) error {
	var res GCPBillingConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
