// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Module module
//
// swagger:model Module
type Module struct {

	// annotations
	Annotations []*Annotation `json:"annotations"`

	// class loader
	ClassLoader *ClassLoader `json:"classLoader,omitempty"`

	// declared annotations
	DeclaredAnnotations []*Annotation `json:"declaredAnnotations"`

	// descriptor
	Descriptor *ModuleDescriptor `json:"descriptor,omitempty"`

	// layer
	Layer ModuleLayer `json:"layer,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// named
	Named bool `json:"named,omitempty"`

	// packages
	// Unique: true
	Packages []string `json:"packages"`
}

// Validate validates this module
func (m *Module) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnnotations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClassLoader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeclaredAnnotations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Module) validateAnnotations(formats strfmt.Registry) error {
	if swag.IsZero(m.Annotations) { // not required
		return nil
	}

	for i := 0; i < len(m.Annotations); i++ {
		if swag.IsZero(m.Annotations[i]) { // not required
			continue
		}

		if m.Annotations[i] != nil {
			if err := m.Annotations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("annotations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("annotations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Module) validateClassLoader(formats strfmt.Registry) error {
	if swag.IsZero(m.ClassLoader) { // not required
		return nil
	}

	if m.ClassLoader != nil {
		if err := m.ClassLoader.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classLoader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classLoader")
			}
			return err
		}
	}

	return nil
}

func (m *Module) validateDeclaredAnnotations(formats strfmt.Registry) error {
	if swag.IsZero(m.DeclaredAnnotations) { // not required
		return nil
	}

	for i := 0; i < len(m.DeclaredAnnotations); i++ {
		if swag.IsZero(m.DeclaredAnnotations[i]) { // not required
			continue
		}

		if m.DeclaredAnnotations[i] != nil {
			if err := m.DeclaredAnnotations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("declaredAnnotations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("declaredAnnotations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Module) validateDescriptor(formats strfmt.Registry) error {
	if swag.IsZero(m.Descriptor) { // not required
		return nil
	}

	if m.Descriptor != nil {
		if err := m.Descriptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptor")
			}
			return err
		}
	}

	return nil
}

func (m *Module) validatePackages(formats strfmt.Registry) error {
	if swag.IsZero(m.Packages) { // not required
		return nil
	}

	if err := validate.UniqueItems("packages", "body", m.Packages); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this module based on the context it is used
func (m *Module) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAnnotations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClassLoader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeclaredAnnotations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescriptor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Module) contextValidateAnnotations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Annotations); i++ {

		if m.Annotations[i] != nil {
			if err := m.Annotations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("annotations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("annotations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Module) contextValidateClassLoader(ctx context.Context, formats strfmt.Registry) error {

	if m.ClassLoader != nil {
		if err := m.ClassLoader.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classLoader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classLoader")
			}
			return err
		}
	}

	return nil
}

func (m *Module) contextValidateDeclaredAnnotations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DeclaredAnnotations); i++ {

		if m.DeclaredAnnotations[i] != nil {
			if err := m.DeclaredAnnotations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("declaredAnnotations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("declaredAnnotations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Module) contextValidateDescriptor(ctx context.Context, formats strfmt.Registry) error {

	if m.Descriptor != nil {
		if err := m.Descriptor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Module) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Module) UnmarshalBinary(b []byte) error {
	var res Module
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
