// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResponseContainerSetBusinessFunction JSON container for the HTTP response along with status
//
// swagger:model ResponseContainerSetBusinessFunction
type ResponseContainerSetBusinessFunction struct {

	// response
	// Unique: true
	Response []string `json:"response"`

	// status
	// Required: true
	Status *ResponseStatus `json:"status"`
}

// Validate validates this response container set business function
func (m *ResponseContainerSetBusinessFunction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var responseContainerSetBusinessFunctionResponseItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VIEW_MONITORED_APPLICATION_SERVICE","VIEW_MONITORED_CLUSTER","VIEW_MONITORED_CLUSTER_TAGS","VIEW_DASHBOARDS","VIEW_DASHBOARDS_TAGS","VIEW_METRIC_TIMESERIES","VIEW_HOSTS","VIEW_HOST_TAGS","VIEW_AGENT_TAGS","VIEW_EVENTS","VIEW_EVENT_TAGS","VIEW_ALERTS","VIEW_ALERT_TAGS","VIEW_REGISTERED_QUERIES","VIEW_REGISTERED_QUERY_TAGS","VIEW_MAINTENANCE_WINDOWS","VIEW_NOTIFICANTS","VIEW_CUSTOM_METRICS","VIEW_TARGETS","VIEW_AGENTS","VIEW_SSH_CONFIGS","VIEW_EXTERNAL_SERVICES","VIEW_EXTERNAL_SERVICES_TAGS","VIEW_EXTERNAL_LINKS","VIEW_EXTERNAL_LINK_DIGESTS","VIEW_EXTERNAL_LINK_TAGS","VIEW_LOGS","VIEW_SLOW_QUERY_PAGE","VIEW_SAVED_SEARCHES","VIEW_MY_MESSAGES","VIEW_APPLICATIONS","VIEW_ANOMALY","SPY_ON_POINTS","SPY_ON_ID_CREATIONS","SPY_UNUSED_METRICS","VIEW_SAML_SSO_SETTINGS","VIEW_INGESTION_POLICY","MODIFY_MONITORED_APPLICATION_SERVICE","MODIFY_MONITORED_CLUSTER","MODIFY_MONITORED_CLUSTER_TAGS","MODIFY_PRIVATE_TAGS","MODIFY_CUSTOM_METRICS","MODIFY_DASHBOARDS","MODIFY_EVENTS","MODIFY_EVENT_TAGS","MODIFY_AGENTS","MODIFY_AGENT_TAGS","MODIFY_HOSTS","MODIFY_HOST_TAGS","MODIFY_MACHINES","MODIFY_SSH_CONFIGS","MODIFY_ALERTS","MODIFY_ALERT_TAGS","MODIFY_REGISTERED_QUERIES","MODIFY_REGISTERED_QUERY_TAGS","MODIFY_MAINTENANCE_WINDOWS","MODIFY_NOTIFICANTS","MODIFY_DASHBOARD_TAGS","MODIFY_TARGETS","MODIFY_EXTERNAL_SERVICES","MODIFY_EXTERNAL_SERVICES_TAGS","CREATE_EMBEDDED_CHARTS","MODIFY_METRIC_VISIBILITY","MODIFY_EXTERNAL_LINKS","MODIFY_EXTERNAL_LINK_TAGS","MODIFY_SAVED_SEARCHES","MODIFY_SAVED_TRACES_SEARCH","MODIFY_OWN_ONBOARDING_STATE","MODIFY_APPLICATIONS","INGESTION_POLICY_MANAGEMENT","METRICS_POLICY_MANAGEMENT","MODIFY_SAML_SSO_SETTINGS","METRIC_INGESTION","METRIC_INGESTION_LISTENER","LOGIN","LOGOUT","CHANGE_PASSWORD","SEND_FORGOTTEN_PASSWORD_EMAILS","CHANGE_USER_PREFERENCE","CREATE_TOKEN","REVOKE_ALL_SESSIONS","REVOKE_ALL_TOKENS","REVOKE_TOKEN","GET_TOKENS","GET_ALL_ACCOUNTS","GET_ALL_USERS","GET_ALL_SERVICE_ACCOUNTS","ADMINISTER_GROUPS","DELETE_ACCOUNT","INVITE_USER","ADMINISTER_SERVICE_ACCOUNTS","NO_REAUTH_INVITE_USER","ADMINISTER_USER_GROUPS","ADMINISTER_ALL_TOKENS","ADMINISTER_CUSTOMER_PREFERENCES","ROLES_MANAGEMENT","VIEW_CUSTOMERS","MODIFY_CUSTOMER","DELETE_CUSTOMER","SEND_UI_METRICS","TOKEN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responseContainerSetBusinessFunctionResponseItemsEnum = append(responseContainerSetBusinessFunctionResponseItemsEnum, v)
	}
}

func (m *ResponseContainerSetBusinessFunction) validateResponseItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, responseContainerSetBusinessFunctionResponseItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResponseContainerSetBusinessFunction) validateResponse(formats strfmt.Registry) error {
	if swag.IsZero(m.Response) { // not required
		return nil
	}

	if err := validate.UniqueItems("response", "body", m.Response); err != nil {
		return err
	}

	for i := 0; i < len(m.Response); i++ {

		// value enum
		if err := m.validateResponseItemsEnum("response"+"."+strconv.Itoa(i), "body", m.Response[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ResponseContainerSetBusinessFunction) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this response container set business function based on the context it is used
func (m *ResponseContainerSetBusinessFunction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseContainerSetBusinessFunction) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResponseContainerSetBusinessFunction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseContainerSetBusinessFunction) UnmarshalBinary(b []byte) error {
	var res ResponseContainerSetBusinessFunction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
