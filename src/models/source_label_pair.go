// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SourceLabelPair Convenience wrapper for the identifier of a unique series, which consists of a source (host) and a metric or aggregation (label)
//
// swagger:model SourceLabelPair
type SourceLabelPair struct {

	// firing
	Firing int32 `json:"firing,omitempty"`

	// Source (or host).  "Source" and "host" are synonyms in current versions of wavefront, but the host terminology is deprecated
	Host string `json:"host,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// observed
	Observed int32 `json:"observed,omitempty"`

	// severity
	// Enum: [INFO SMOKE WARN SEVERE]
	Severity string `json:"severity,omitempty"`

	// Start time of this failing HLP, in epoch millis.
	StartTime int64 `json:"startTime,omitempty"`

	// tags
	Tags map[string]string `json:"tags,omitempty"`
}

// Validate validates this source label pair
func (m *SourceLabelPair) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sourceLabelPairTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INFO","SMOKE","WARN","SEVERE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sourceLabelPairTypeSeverityPropEnum = append(sourceLabelPairTypeSeverityPropEnum, v)
	}
}

const (

	// SourceLabelPairSeverityINFO captures enum value "INFO"
	SourceLabelPairSeverityINFO string = "INFO"

	// SourceLabelPairSeveritySMOKE captures enum value "SMOKE"
	SourceLabelPairSeveritySMOKE string = "SMOKE"

	// SourceLabelPairSeverityWARN captures enum value "WARN"
	SourceLabelPairSeverityWARN string = "WARN"

	// SourceLabelPairSeveritySEVERE captures enum value "SEVERE"
	SourceLabelPairSeveritySEVERE string = "SEVERE"
)

// prop value enum
func (m *SourceLabelPair) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, sourceLabelPairTypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SourceLabelPair) validateSeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this source label pair based on context it is used
func (m *SourceLabelPair) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SourceLabelPair) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SourceLabelPair) UnmarshalBinary(b []byte) error {
	var res SourceLabelPair
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
