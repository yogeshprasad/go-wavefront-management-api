// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertSource An AlertSource represents a single query used in an alert. Like ChartSource inDashboard, it includes the query and all the related fields.
//
// swagger:model Alert Source
type AlertSource struct {

	// The types of the alert source (an array of CONDITION, AUDIT, VARIABLE) and the default one is [VARIABLE]. CONDITION alert source is the condition query in the alert. AUDIT alert source is the query to get more details when the alert changes state. VARIABLE alert source is a variable used in the other queries.
	AlertSourceType []string `json:"alertSourceType"`

	// The color of the alert source.
	Color string `json:"color,omitempty"`

	// The additional long description of the alert source.
	Description string `json:"description,omitempty"`

	// A flag to indicate whether the alert source is hidden or not.
	Hidden bool `json:"hidden,omitempty"`

	// The alert source query name. Used as the variable name in the other query.
	Name string `json:"name,omitempty"`

	// The alert query. Support both Wavefront Query and Prometheus Query.
	Query string `json:"query,omitempty"`

	// A flag indicate whether the alert source query builder enabled or not.
	QueryBuilderEnabled bool `json:"queryBuilderEnabled,omitempty"`

	// The string serialization of the alert source query builder, mostly used by Wavefront UI.
	QueryBuilderSerialization string `json:"queryBuilderSerialization,omitempty"`

	// The type of the alert query. Supported types are [PROMQL, WQL].
	// Enum: [WQL PROMQL HYBRID]
	QueryType string `json:"queryType,omitempty"`
}

// Validate validates this alert source
func (m *AlertSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var alertSourceAlertSourceTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VARIABLE","CONDITION","AUDIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertSourceAlertSourceTypeItemsEnum = append(alertSourceAlertSourceTypeItemsEnum, v)
	}
}

func (m *AlertSource) validateAlertSourceTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, alertSourceAlertSourceTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AlertSource) validateAlertSourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertSourceType) { // not required
		return nil
	}

	for i := 0; i < len(m.AlertSourceType); i++ {

		// value enum
		if err := m.validateAlertSourceTypeItemsEnum("alertSourceType"+"."+strconv.Itoa(i), "body", m.AlertSourceType[i]); err != nil {
			return err
		}

	}

	return nil
}

var alertSourceTypeQueryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WQL","PROMQL","HYBRID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertSourceTypeQueryTypePropEnum = append(alertSourceTypeQueryTypePropEnum, v)
	}
}

const (

	// AlertSourceQueryTypeWQL captures enum value "WQL"
	AlertSourceQueryTypeWQL string = "WQL"

	// AlertSourceQueryTypePROMQL captures enum value "PROMQL"
	AlertSourceQueryTypePROMQL string = "PROMQL"

	// AlertSourceQueryTypeHYBRID captures enum value "HYBRID"
	AlertSourceQueryTypeHYBRID string = "HYBRID"
)

// prop value enum
func (m *AlertSource) validateQueryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, alertSourceTypeQueryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AlertSource) validateQueryType(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateQueryTypeEnum("queryType", "body", m.QueryType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this alert source based on context it is used
func (m *AlertSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AlertSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertSource) UnmarshalBinary(b []byte) error {
	var res AlertSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
