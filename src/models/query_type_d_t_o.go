// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryTypeDTO query type d t o
//
// swagger:model QueryTypeDTO
type QueryTypeDTO struct {

	// input query
	InputQuery string `json:"inputQuery,omitempty"`

	// query type
	// Enum: [WQL PROMQL HYBRID]
	QueryType string `json:"queryType,omitempty"`

	// translated input
	TranslatedInput string `json:"translatedInput,omitempty"`
}

// Validate validates this query type d t o
func (m *QueryTypeDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQueryType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var queryTypeDTOTypeQueryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WQL","PROMQL","HYBRID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryTypeDTOTypeQueryTypePropEnum = append(queryTypeDTOTypeQueryTypePropEnum, v)
	}
}

const (

	// QueryTypeDTOQueryTypeWQL captures enum value "WQL"
	QueryTypeDTOQueryTypeWQL string = "WQL"

	// QueryTypeDTOQueryTypePROMQL captures enum value "PROMQL"
	QueryTypeDTOQueryTypePROMQL string = "PROMQL"

	// QueryTypeDTOQueryTypeHYBRID captures enum value "HYBRID"
	QueryTypeDTOQueryTypeHYBRID string = "HYBRID"
)

// prop value enum
func (m *QueryTypeDTO) validateQueryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, queryTypeDTOTypeQueryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QueryTypeDTO) validateQueryType(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateQueryTypeEnum("queryType", "body", m.QueryType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this query type d t o based on context it is used
func (m *QueryTypeDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QueryTypeDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryTypeDTO) UnmarshalBinary(b []byte) error {
	var res QueryTypeDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
