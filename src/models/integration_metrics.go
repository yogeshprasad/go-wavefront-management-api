// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationMetrics Definition of the metrics belonging this integration
//
// swagger:model IntegrationMetrics
type IntegrationMetrics struct {

	// Chart JSONs materialized from the links in `charts`
	ChartObjs []*Chart `json:"chartObjs"`

	// URLs for JSON definitions of charts that display info about this integration's metrics
	// Required: true
	Charts []string `json:"charts"`

	// Set of metrics that are displayed in the metric panel during integration setup
	// Required: true
	Display []string `json:"display"`

	// For reported points belonging to this integration, these point tags are escalated to the internal point-rate counters so that reporting can be broken out by these dimensions
	PpsDimensions []string `json:"ppsDimensions"`

	// Set of metric prefix namespaces belonging to this integration
	// Required: true
	Prefixes []string `json:"prefixes"`

	// Set of "canary" metrics that define the "liveness" of this integration's metric ingestion
	// Required: true
	Required []string `json:"required"`
}

// Validate validates this integration metrics
func (m *IntegrationMetrics) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChartObjs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCharts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefixes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequired(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationMetrics) validateChartObjs(formats strfmt.Registry) error {
	if swag.IsZero(m.ChartObjs) { // not required
		return nil
	}

	for i := 0; i < len(m.ChartObjs); i++ {
		if swag.IsZero(m.ChartObjs[i]) { // not required
			continue
		}

		if m.ChartObjs[i] != nil {
			if err := m.ChartObjs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("chartObjs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("chartObjs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IntegrationMetrics) validateCharts(formats strfmt.Registry) error {

	if err := validate.Required("charts", "body", m.Charts); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationMetrics) validateDisplay(formats strfmt.Registry) error {

	if err := validate.Required("display", "body", m.Display); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationMetrics) validatePrefixes(formats strfmt.Registry) error {

	if err := validate.Required("prefixes", "body", m.Prefixes); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationMetrics) validateRequired(formats strfmt.Registry) error {

	if err := validate.Required("required", "body", m.Required); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this integration metrics based on the context it is used
func (m *IntegrationMetrics) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChartObjs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationMetrics) contextValidateChartObjs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChartObjs); i++ {

		if m.ChartObjs[i] != nil {
			if err := m.ChartObjs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("chartObjs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("chartObjs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationMetrics) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationMetrics) UnmarshalBinary(b []byte) error {
	var res IntegrationMetrics
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
