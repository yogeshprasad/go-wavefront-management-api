// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppSearchFilter app search filter
//
// swagger:model AppSearchFilter
type AppSearchFilter struct {

	// filter type
	// Enum: [OPERATION TAG RAW_TAG SPAN_LOG DURATION SPAN_DURATION LIMIT ERROR TRACE_ID SOURCE]
	FilterType string `json:"filterType,omitempty"`

	// values
	Values *AppSearchFilterValue `json:"values,omitempty"`
}

// Validate validates this app search filter
func (m *AppSearchFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var appSearchFilterTypeFilterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPERATION","TAG","RAW_TAG","SPAN_LOG","DURATION","SPAN_DURATION","LIMIT","ERROR","TRACE_ID","SOURCE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appSearchFilterTypeFilterTypePropEnum = append(appSearchFilterTypeFilterTypePropEnum, v)
	}
}

const (

	// AppSearchFilterFilterTypeOPERATION captures enum value "OPERATION"
	AppSearchFilterFilterTypeOPERATION string = "OPERATION"

	// AppSearchFilterFilterTypeTAG captures enum value "TAG"
	AppSearchFilterFilterTypeTAG string = "TAG"

	// AppSearchFilterFilterTypeRAWTAG captures enum value "RAW_TAG"
	AppSearchFilterFilterTypeRAWTAG string = "RAW_TAG"

	// AppSearchFilterFilterTypeSPANLOG captures enum value "SPAN_LOG"
	AppSearchFilterFilterTypeSPANLOG string = "SPAN_LOG"

	// AppSearchFilterFilterTypeDURATION captures enum value "DURATION"
	AppSearchFilterFilterTypeDURATION string = "DURATION"

	// AppSearchFilterFilterTypeSPANDURATION captures enum value "SPAN_DURATION"
	AppSearchFilterFilterTypeSPANDURATION string = "SPAN_DURATION"

	// AppSearchFilterFilterTypeLIMIT captures enum value "LIMIT"
	AppSearchFilterFilterTypeLIMIT string = "LIMIT"

	// AppSearchFilterFilterTypeERROR captures enum value "ERROR"
	AppSearchFilterFilterTypeERROR string = "ERROR"

	// AppSearchFilterFilterTypeTRACEID captures enum value "TRACE_ID"
	AppSearchFilterFilterTypeTRACEID string = "TRACE_ID"

	// AppSearchFilterFilterTypeSOURCE captures enum value "SOURCE"
	AppSearchFilterFilterTypeSOURCE string = "SOURCE"
)

// prop value enum
func (m *AppSearchFilter) validateFilterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, appSearchFilterTypeFilterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AppSearchFilter) validateFilterType(formats strfmt.Registry) error {
	if swag.IsZero(m.FilterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFilterTypeEnum("filterType", "body", m.FilterType); err != nil {
		return err
	}

	return nil
}

func (m *AppSearchFilter) validateValues(formats strfmt.Registry) error {
	if swag.IsZero(m.Values) { // not required
		return nil
	}

	if m.Values != nil {
		if err := m.Values.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("values")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("values")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this app search filter based on the context it is used
func (m *AppSearchFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppSearchFilter) contextValidateValues(ctx context.Context, formats strfmt.Registry) error {

	if m.Values != nil {
		if err := m.Values.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("values")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("values")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppSearchFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppSearchFilter) UnmarshalBinary(b []byte) error {
	var res AppSearchFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
