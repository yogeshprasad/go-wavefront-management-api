// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceAccount Wavefront service account entity.
//
// swagger:model ServiceAccount
type ServiceAccount struct {

	// The state of the service account.
	// Required: true
	Active *bool `json:"active"`

	// The description of the service account.
	Description string `json:"description,omitempty"`

	// The list of service account's permissions.
	Groups []string `json:"groups"`

	// The unique identifier of a service account.
	// Required: true
	Identifier *string `json:"identifier"`

	// The list of service account's ingestion policies.
	IngestionPolicies []*IngestionPolicy `json:"ingestionPolicies"`

	// The ingestion policy object linked with service account.
	IngestionPolicy *IngestionPolicy `json:"ingestionPolicy,omitempty"`

	// The last time when a token of the service account was used.
	LastUsed int64 `json:"lastUsed,omitempty"`

	// The list of service account's roles.
	Roles []*RoleDTO `json:"roles"`

	// The service account's API tokens.
	Tokens []*UserAPIToken `json:"tokens"`

	// The list of account's permissions assigned directly or through united roles assigned to it
	// Unique: true
	UnitedPermissions []string `json:"unitedPermissions"`

	// The list of account's roles assigned directly or through user groups assigned to it
	// Unique: true
	UnitedRoles []string `json:"unitedRoles"`

	// The list of service account's user groups.
	UserGroups []*UserGroup `json:"userGroups"`
}

// Validate validates this service account
func (m *ServiceAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngestionPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngestionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokens(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitedPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitedRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceAccount) validateActive(formats strfmt.Registry) error {

	if err := validate.Required("active", "body", m.Active); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccount) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccount) validateIngestionPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.IngestionPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.IngestionPolicies); i++ {
		if swag.IsZero(m.IngestionPolicies[i]) { // not required
			continue
		}

		if m.IngestionPolicies[i] != nil {
			if err := m.IngestionPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingestionPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ingestionPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceAccount) validateIngestionPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.IngestionPolicy) { // not required
		return nil
	}

	if m.IngestionPolicy != nil {
		if err := m.IngestionPolicy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingestionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ingestionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceAccount) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceAccount) validateTokens(formats strfmt.Registry) error {
	if swag.IsZero(m.Tokens) { // not required
		return nil
	}

	for i := 0; i < len(m.Tokens); i++ {
		if swag.IsZero(m.Tokens[i]) { // not required
			continue
		}

		if m.Tokens[i] != nil {
			if err := m.Tokens[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tokens" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tokens" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceAccount) validateUnitedPermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.UnitedPermissions) { // not required
		return nil
	}

	if err := validate.UniqueItems("unitedPermissions", "body", m.UnitedPermissions); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccount) validateUnitedRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.UnitedRoles) { // not required
		return nil
	}

	if err := validate.UniqueItems("unitedRoles", "body", m.UnitedRoles); err != nil {
		return err
	}

	return nil
}

func (m *ServiceAccount) validateUserGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.UserGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.UserGroups); i++ {
		if swag.IsZero(m.UserGroups[i]) { // not required
			continue
		}

		if m.UserGroups[i] != nil {
			if err := m.UserGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this service account based on the context it is used
func (m *ServiceAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIngestionPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIngestionPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTokens(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceAccount) contextValidateIngestionPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IngestionPolicies); i++ {

		if m.IngestionPolicies[i] != nil {
			if err := m.IngestionPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingestionPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ingestionPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceAccount) contextValidateIngestionPolicy(ctx context.Context, formats strfmt.Registry) error {

	if m.IngestionPolicy != nil {
		if err := m.IngestionPolicy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingestionPolicy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ingestionPolicy")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceAccount) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Roles); i++ {

		if m.Roles[i] != nil {
			if err := m.Roles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceAccount) contextValidateTokens(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tokens); i++ {

		if m.Tokens[i] != nil {
			if err := m.Tokens[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tokens" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tokens" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceAccount) contextValidateUserGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UserGroups); i++ {

		if m.UserGroups[i] != nil {
			if err := m.UserGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("userGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("userGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceAccount) UnmarshalBinary(b []byte) error {
	var res ServiceAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
