// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Paged paged
//
// swagger:model Paged
type Paged struct {

	// The id at which the current (limited) search can be continued to obtain more matching items
	Cursor string `json:"cursor,omitempty"`

	// List of requested items
	Items []interface{} `json:"items"`

	// limit
	Limit int32 `json:"limit,omitempty"`

	// Whether more items are available for return by increment offset or cursor
	MoreItems bool `json:"moreItems,omitempty"`

	// offset
	// Read Only: true
	Offset int32 `json:"offset,omitempty"`

	// sort
	Sort *Sorting `json:"sort,omitempty"`

	// An estimate (lower-bound) of the total number of items available for return.  May not be a tight estimate for facet queries
	TotalItems int32 `json:"totalItems,omitempty"`
}

// Validate validates this paged
func (m *Paged) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Paged) validateSort(formats strfmt.Registry) error {
	if swag.IsZero(m.Sort) { // not required
		return nil
	}

	if m.Sort != nil {
		if err := m.Sort.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sort")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sort")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this paged based on the context it is used
func (m *Paged) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOffset(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSort(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Paged) contextValidateOffset(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "offset", "body", int32(m.Offset)); err != nil {
		return err
	}

	return nil
}

func (m *Paged) contextValidateSort(ctx context.Context, formats strfmt.Registry) error {

	if m.Sort != nil {
		if err := m.Sort.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sort")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sort")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Paged) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Paged) UnmarshalBinary(b []byte) error {
	var res Paged
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
