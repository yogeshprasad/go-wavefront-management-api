// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SavedSearch Saved queries for searches over Wavefront entities
//
// swagger:model SavedSearch
type SavedSearch struct {

	// created epoch millis
	// Read Only: true
	CreatedEpochMillis int64 `json:"createdEpochMillis,omitempty"`

	// creator Id
	// Read Only: true
	CreatorID string `json:"creatorId,omitempty"`

	// The Wavefront entity type over which to search
	// Required: true
	// Enum: [DASHBOARD ALERT MAINTENANCE_WINDOW NOTIFICANT EVENT SOURCE EXTERNAL_LINK AGENT CLOUD_INTEGRATION APPLICATION REGISTERED_QUERY USER USER_GROUP SERVICE_ACCOUNT INGESTION_POLICY ROLE TOKEN]
	EntityType *string `json:"entityType"`

	// id
	ID string `json:"id,omitempty"`

	// The map corresponding to the search query.  The key is the name of the query, and the value is a JSON representation of the query
	// Required: true
	Query map[string]string `json:"query"`

	// updated epoch millis
	// Read Only: true
	UpdatedEpochMillis int64 `json:"updatedEpochMillis,omitempty"`

	// updater Id
	// Read Only: true
	UpdaterID string `json:"updaterId,omitempty"`

	// The user for whom this search is saved
	// Read Only: true
	UserID string `json:"userId,omitempty"`
}

// Validate validates this saved search
func (m *SavedSearch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var savedSearchTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DASHBOARD","ALERT","MAINTENANCE_WINDOW","NOTIFICANT","EVENT","SOURCE","EXTERNAL_LINK","AGENT","CLOUD_INTEGRATION","APPLICATION","REGISTERED_QUERY","USER","USER_GROUP","SERVICE_ACCOUNT","INGESTION_POLICY","ROLE","TOKEN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		savedSearchTypeEntityTypePropEnum = append(savedSearchTypeEntityTypePropEnum, v)
	}
}

const (

	// SavedSearchEntityTypeDASHBOARD captures enum value "DASHBOARD"
	SavedSearchEntityTypeDASHBOARD string = "DASHBOARD"

	// SavedSearchEntityTypeALERT captures enum value "ALERT"
	SavedSearchEntityTypeALERT string = "ALERT"

	// SavedSearchEntityTypeMAINTENANCEWINDOW captures enum value "MAINTENANCE_WINDOW"
	SavedSearchEntityTypeMAINTENANCEWINDOW string = "MAINTENANCE_WINDOW"

	// SavedSearchEntityTypeNOTIFICANT captures enum value "NOTIFICANT"
	SavedSearchEntityTypeNOTIFICANT string = "NOTIFICANT"

	// SavedSearchEntityTypeEVENT captures enum value "EVENT"
	SavedSearchEntityTypeEVENT string = "EVENT"

	// SavedSearchEntityTypeSOURCE captures enum value "SOURCE"
	SavedSearchEntityTypeSOURCE string = "SOURCE"

	// SavedSearchEntityTypeEXTERNALLINK captures enum value "EXTERNAL_LINK"
	SavedSearchEntityTypeEXTERNALLINK string = "EXTERNAL_LINK"

	// SavedSearchEntityTypeAGENT captures enum value "AGENT"
	SavedSearchEntityTypeAGENT string = "AGENT"

	// SavedSearchEntityTypeCLOUDINTEGRATION captures enum value "CLOUD_INTEGRATION"
	SavedSearchEntityTypeCLOUDINTEGRATION string = "CLOUD_INTEGRATION"

	// SavedSearchEntityTypeAPPLICATION captures enum value "APPLICATION"
	SavedSearchEntityTypeAPPLICATION string = "APPLICATION"

	// SavedSearchEntityTypeREGISTEREDQUERY captures enum value "REGISTERED_QUERY"
	SavedSearchEntityTypeREGISTEREDQUERY string = "REGISTERED_QUERY"

	// SavedSearchEntityTypeUSER captures enum value "USER"
	SavedSearchEntityTypeUSER string = "USER"

	// SavedSearchEntityTypeUSERGROUP captures enum value "USER_GROUP"
	SavedSearchEntityTypeUSERGROUP string = "USER_GROUP"

	// SavedSearchEntityTypeSERVICEACCOUNT captures enum value "SERVICE_ACCOUNT"
	SavedSearchEntityTypeSERVICEACCOUNT string = "SERVICE_ACCOUNT"

	// SavedSearchEntityTypeINGESTIONPOLICY captures enum value "INGESTION_POLICY"
	SavedSearchEntityTypeINGESTIONPOLICY string = "INGESTION_POLICY"

	// SavedSearchEntityTypeROLE captures enum value "ROLE"
	SavedSearchEntityTypeROLE string = "ROLE"

	// SavedSearchEntityTypeTOKEN captures enum value "TOKEN"
	SavedSearchEntityTypeTOKEN string = "TOKEN"
)

// prop value enum
func (m *SavedSearch) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, savedSearchTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SavedSearch) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entityType", "body", m.EntityType); err != nil {
		return err
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", *m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *SavedSearch) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this saved search based on the context it is used
func (m *SavedSearch) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedEpochMillis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatorID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedEpochMillis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdaterID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SavedSearch) contextValidateCreatedEpochMillis(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdEpochMillis", "body", int64(m.CreatedEpochMillis)); err != nil {
		return err
	}

	return nil
}

func (m *SavedSearch) contextValidateCreatorID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "creatorId", "body", string(m.CreatorID)); err != nil {
		return err
	}

	return nil
}

func (m *SavedSearch) contextValidateUpdatedEpochMillis(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedEpochMillis", "body", int64(m.UpdatedEpochMillis)); err != nil {
		return err
	}

	return nil
}

func (m *SavedSearch) contextValidateUpdaterID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updaterId", "body", string(m.UpdaterID)); err != nil {
		return err
	}

	return nil
}

func (m *SavedSearch) contextValidateUserID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "userId", "body", string(m.UserID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SavedSearch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SavedSearch) UnmarshalBinary(b []byte) error {
	var res SavedSearch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
