// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IngestionPolicyMapping Api model for ingestion policy mapping
//
// swagger:model IngestionPolicyMapping
type IngestionPolicyMapping struct {

	// The list of accounts that should be linked/unlinked to/from the ingestion policy
	// Unique: true
	Accounts []string `json:"accounts"`

	// The list of groups that should be linked/unlinked to/from the ingestion policy
	// Unique: true
	Groups []string `json:"groups"`

	// The unique identifier of the ingestion policy
	// Required: true
	IngestionPolicyID *string `json:"ingestionPolicyId"`
}

// Validate validates this ingestion policy mapping
func (m *IngestionPolicyMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIngestionPolicyID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IngestionPolicyMapping) validateAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.Accounts) { // not required
		return nil
	}

	if err := validate.UniqueItems("accounts", "body", m.Accounts); err != nil {
		return err
	}

	return nil
}

func (m *IngestionPolicyMapping) validateGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.Groups) { // not required
		return nil
	}

	if err := validate.UniqueItems("groups", "body", m.Groups); err != nil {
		return err
	}

	return nil
}

func (m *IngestionPolicyMapping) validateIngestionPolicyID(formats strfmt.Registry) error {

	if err := validate.Required("ingestionPolicyId", "body", m.IngestionPolicyID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ingestion policy mapping based on context it is used
func (m *IngestionPolicyMapping) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IngestionPolicyMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IngestionPolicyMapping) UnmarshalBinary(b []byte) error {
	var res IngestionPolicyMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
