// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomerFacingUserObject customer facing user object
//
// swagger:model CustomerFacingUserObject
type CustomerFacingUserObject struct {

	// The id of the customer to which the user belongs
	// Required: true
	Customer *string `json:"customer"`

	// URL Escaped Identifier
	EscapedIdentifier string `json:"escapedIdentifier,omitempty"`

	// URL id For User's gravatar (see gravatar.com), if one exists.
	GravatarURL string `json:"gravatarUrl,omitempty"`

	// List of permission groups this user has been granted access to
	Groups []string `json:"groups"`

	// The unique identifier of this user, which should be their valid email address
	// Required: true
	ID *string `json:"id"`

	// The unique identifier of this user, which should be their valid email address
	// Required: true
	Identifier *string `json:"identifier"`

	// The identifier of the ingestion policy linked with user.
	IngestionPolicyID string `json:"ingestionPolicyId,omitempty"`

	// The last time the user logged in, in epoch milliseconds
	LastSuccessfulLogin int64 `json:"lastSuccessfulLogin,omitempty"`

	// Whether this user is the one calling the API
	// Required: true
	Self *bool `json:"self"`

	// The list of account's permissions assigned directly or through united roles assigned to it
	// Unique: true
	UnitedPermissions []string `json:"unitedPermissions"`

	// The list of account's roles assigned directly or through user groups assigned to it
	// Unique: true
	UnitedRoles []string `json:"unitedRoles"`

	// List of user group identifiers this user belongs to
	UserGroups []string `json:"userGroups"`
}

// Validate validates this customer facing user object
func (m *CustomerFacingUserObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitedPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitedRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomerFacingUserObject) validateCustomer(formats strfmt.Registry) error {

	if err := validate.Required("customer", "body", m.Customer); err != nil {
		return err
	}

	return nil
}

func (m *CustomerFacingUserObject) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *CustomerFacingUserObject) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

func (m *CustomerFacingUserObject) validateSelf(formats strfmt.Registry) error {

	if err := validate.Required("self", "body", m.Self); err != nil {
		return err
	}

	return nil
}

func (m *CustomerFacingUserObject) validateUnitedPermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.UnitedPermissions) { // not required
		return nil
	}

	if err := validate.UniqueItems("unitedPermissions", "body", m.UnitedPermissions); err != nil {
		return err
	}

	return nil
}

func (m *CustomerFacingUserObject) validateUnitedRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.UnitedRoles) { // not required
		return nil
	}

	if err := validate.UniqueItems("unitedRoles", "body", m.UnitedRoles); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this customer facing user object based on context it is used
func (m *CustomerFacingUserObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomerFacingUserObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomerFacingUserObject) UnmarshalBinary(b []byte) error {
	var res CustomerFacingUserObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
