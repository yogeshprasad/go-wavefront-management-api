// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GCPConfiguration Configurations specific to the Google Cloud Platform integration.  Only applicable when the containing Credential has service=GCP
//
// swagger:model GCPConfiguration
type GCPConfiguration struct {

	// A list of Google Cloud Platform (GCP) services (such as ComputeEngine, PubSub, etc) from which to pull metrics.  Allowable values are APPENGINE, BIGQUERY, BIGTABLE, CLOUDFUNCTIONS, CLOUDIOT, CLOUDSQL, CLOUDTASKS, COMPUTE, CONTAINER, DATAFLOW, DATAPROC, DATASTORE, FIREBASEDATABASE, FIREBASEHOSTING, FIRESTORE, INTERCONNECT, KUBERNETES, LOADBALANCING, LOGGING, ML, MONITORING, PUBSUB, REDIS, ROUTER, SERVICERUNTIME, SPANNER, STORAGE, TPU, VPN
	CategoriesToFetch []string `json:"categoriesToFetch"`

	// List of custom metric prefix to fetch the data from
	// Example: [\"custom.googleapis.com/\"]
	CustomMetricPrefix []string `json:"customMetricPrefix"`

	// Whether to disable the ingestion of counts for GCP delta metrics. Ingestion is enabled by default.
	DisableDeltaCounts bool `json:"disableDeltaCounts,omitempty"`

	// Whether to disable the ingestion of bucket data for GCP distributions. Ingestion is enabled by default.
	DisableHistogramToMetricConversion bool `json:"disableHistogramToMetricConversion,omitempty"`

	// Private key for a Google Cloud Platform (GCP) service account within your project.  The account must at least be granted Monitoring Viewer permissions.  This key must be in the JSON format generated by GCP. Use '{"project_id": "%s"}' to retain the existing key when updating.
	// Required: true
	GcpJSONKey *string `json:"gcpJsonKey"`

	// A regular expression that a metric name must match (case-insensitively) in order to be ingested
	// Example: ^gcp.(compute|container|pubsub).*$
	MetricFilterRegex string `json:"metricFilterRegex,omitempty"`

	// The Google Cloud Platform (GCP) project id.
	// Required: true
	ProjectID *string `json:"projectId"`
}

// Validate validates this g c p configuration
func (m *GCPConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoriesToFetch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpJSONKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gCPConfigurationCategoriesToFetchItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["APPENGINE","BIGQUERY","BIGTABLE","CLOUDFUNCTIONS","CLOUDIOT","CLOUDSQL","CLOUDTASKS","COMPUTE","CONTAINER","DATAFLOW","DATAPROC","DATASTORE","FIREBASEDATABASE","FIREBASEHOSTING","FIRESTORE","INTERCONNECT","KUBERNETES","LOADBALANCING","LOGGING","ML","MONITORING","PUBSUB","REDIS","ROUTER","SERVICERUNTIME","SPANNER","STORAGE","TPU","VPN","APIGEE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gCPConfigurationCategoriesToFetchItemsEnum = append(gCPConfigurationCategoriesToFetchItemsEnum, v)
	}
}

func (m *GCPConfiguration) validateCategoriesToFetchItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gCPConfigurationCategoriesToFetchItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GCPConfiguration) validateCategoriesToFetch(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoriesToFetch) { // not required
		return nil
	}

	for i := 0; i < len(m.CategoriesToFetch); i++ {

		// value enum
		if err := m.validateCategoriesToFetchItemsEnum("categoriesToFetch"+"."+strconv.Itoa(i), "body", m.CategoriesToFetch[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *GCPConfiguration) validateGcpJSONKey(formats strfmt.Registry) error {

	if err := validate.Required("gcpJsonKey", "body", m.GcpJSONKey); err != nil {
		return err
	}

	return nil
}

func (m *GCPConfiguration) validateProjectID(formats strfmt.Registry) error {

	if err := validate.Required("projectId", "body", m.ProjectID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this g c p configuration based on context it is used
func (m *GCPConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GCPConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GCPConfiguration) UnmarshalBinary(b []byte) error {
	var res GCPConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
