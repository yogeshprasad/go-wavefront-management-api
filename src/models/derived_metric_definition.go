// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DerivedMetricDefinition Wavefront Derived Metric
//
// swagger:model DerivedMetricDefinition
type DerivedMetricDefinition struct {

	// User-supplied additional explanatory information for the derived metric
	AdditionalInformation string `json:"additionalInformation,omitempty"`

	// create user Id
	// Read Only: true
	CreateUserID string `json:"createUserId,omitempty"`

	// When this derived metric was created, in epoch millis
	// Read Only: true
	Created int64 `json:"created,omitempty"`

	// created epoch millis
	// Read Only: true
	CreatedEpochMillis int64 `json:"createdEpochMillis,omitempty"`

	// creator Id
	// Read Only: true
	CreatorID string `json:"creatorId,omitempty"`

	// deleted
	// Read Only: true
	Deleted *bool `json:"deleted,omitempty"`

	// Number of hosts checked by the query
	// Read Only: true
	HostsUsed []string `json:"hostsUsed"`

	// id
	ID string `json:"id,omitempty"`

	// in trash
	InTrash bool `json:"inTrash,omitempty"`

	// Whether to include obsolete metrics in query
	IncludeObsoleteMetrics bool `json:"includeObsoleteMetrics,omitempty"`

	// The last error encountered when running the query
	// Read Only: true
	LastErrorMessage string `json:"lastErrorMessage,omitempty"`

	// The time of the last error encountered when running the query, in epoch millis
	// Read Only: true
	LastFailedTime int64 `json:"lastFailedTime,omitempty"`

	// The last time when the derived metric query was run, in epoch millis
	// Read Only: true
	LastProcessedMillis int64 `json:"lastProcessedMillis,omitempty"`

	// Time for the query execute, averaged on hourly basis
	// Read Only: true
	LastQueryTime int64 `json:"lastQueryTime,omitempty"`

	// Number of metrics checked by the query
	// Read Only: true
	MetricsUsed []string `json:"metricsUsed"`

	// Number of minutes to query for the derived metric
	// Required: true
	Minutes *int32 `json:"minutes"`

	// name
	// Required: true
	Name *string `json:"name"`

	// A derived field recording the number of data points scanned when the system last computed the query
	// Read Only: true
	PointsScannedAtLastQuery int64 `json:"pointsScannedAtLastQuery,omitempty"`

	// The interval between executing the query, in minutes.  Defaults to 1 minute
	ProcessRateMinutes int32 `json:"processRateMinutes,omitempty"`

	// A Wavefront query that is evaluated at regular intervals (default 1m).
	// Required: true
	Query *string `json:"query"`

	// Whether there was an exception when the query last ran
	// Read Only: true
	QueryFailing *bool `json:"queryFailing,omitempty"`

	// Whether the query was created using the Query Builder. Default false
	QueryQBEnabled bool `json:"queryQBEnabled,omitempty"`

	// The special serialization of the Query Builder that corresponds to the query.  Applicable only when queryQBEnabled is true
	QueryQBSerialization string `json:"queryQBSerialization,omitempty"`

	// Lists the current state of the derived metric. Can be one or more of: INVALID, ACTIVE, TRASH, NO_DATA
	// Read Only: true
	Status []string `json:"status"`

	// tagpaths
	// Read Only: true
	Tagpaths []string `json:"tagpaths"`

	// tags
	Tags *WFTags `json:"tags,omitempty"`

	// The user that last updated this derived metric definition
	// Read Only: true
	UpdateUserID string `json:"updateUserId,omitempty"`

	// When the derived metric definition was last updated, in epoch millis
	// Read Only: true
	Updated int64 `json:"updated,omitempty"`

	// updated epoch millis
	// Read Only: true
	UpdatedEpochMillis int64 `json:"updatedEpochMillis,omitempty"`

	// updater Id
	// Read Only: true
	UpdaterID string `json:"updaterId,omitempty"`
}

// Validate validates this derived metric definition
func (m *DerivedMetricDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMinutes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DerivedMetricDefinition) validateMinutes(formats strfmt.Registry) error {

	if err := validate.Required("minutes", "body", m.Minutes); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if m.Tags != nil {
		if err := m.Tags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this derived metric definition based on the context it is used
func (m *DerivedMetricDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreateUserID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedEpochMillis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatorID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHostsUsed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastErrorMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastFailedTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastProcessedMillis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastQueryTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricsUsed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePointsScannedAtLastQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueryFailing(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTagpaths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateUserID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedEpochMillis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdaterID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DerivedMetricDefinition) contextValidateCreateUserID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createUserId", "body", string(m.CreateUserID)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created", "body", int64(m.Created)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateCreatedEpochMillis(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdEpochMillis", "body", int64(m.CreatedEpochMillis)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateCreatorID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "creatorId", "body", string(m.CreatorID)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateDeleted(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleted", "body", m.Deleted); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateHostsUsed(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "hostsUsed", "body", []string(m.HostsUsed)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateLastErrorMessage(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastErrorMessage", "body", string(m.LastErrorMessage)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateLastFailedTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastFailedTime", "body", int64(m.LastFailedTime)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateLastProcessedMillis(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastProcessedMillis", "body", int64(m.LastProcessedMillis)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateLastQueryTime(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastQueryTime", "body", int64(m.LastQueryTime)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateMetricsUsed(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "metricsUsed", "body", []string(m.MetricsUsed)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidatePointsScannedAtLastQuery(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "pointsScannedAtLastQuery", "body", int64(m.PointsScannedAtLastQuery)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateQueryFailing(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "queryFailing", "body", m.QueryFailing); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", []string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateTagpaths(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "tagpaths", "body", []string(m.Tagpaths)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	if m.Tags != nil {
		if err := m.Tags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateUpdateUserID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updateUserId", "body", string(m.UpdateUserID)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateUpdated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updated", "body", int64(m.Updated)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateUpdatedEpochMillis(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedEpochMillis", "body", int64(m.UpdatedEpochMillis)); err != nil {
		return err
	}

	return nil
}

func (m *DerivedMetricDefinition) contextValidateUpdaterID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updaterId", "body", string(m.UpdaterID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DerivedMetricDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DerivedMetricDefinition) UnmarshalBinary(b []byte) error {
	var res DerivedMetricDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
