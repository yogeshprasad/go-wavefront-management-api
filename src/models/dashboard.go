// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Dashboard Wavefront dashboard entity
//
// swagger:model Dashboard
type Dashboard struct {

	// acl
	// Read Only: true
	ACL *AccessControlListSimple `json:"acl,omitempty"`

	// Background color of the chart title text area, in rgba(rvalue,gvalue,bvalue,avalue)
	ChartTitleBgColor string `json:"chartTitleBgColor,omitempty"`

	// Text color of the chart title text are, in rgba(rvalue,gvalue,bvalue,avalue)
	ChartTitleColor string `json:"chartTitleColor,omitempty"`

	// Scale (normally 100) of chart title text size
	ChartTitleScalar int32 `json:"chartTitleScalar,omitempty"`

	// created epoch millis
	// Read Only: true
	CreatedEpochMillis int64 `json:"createdEpochMillis,omitempty"`

	// creator Id
	// Read Only: true
	CreatorID string `json:"creatorId,omitempty"`

	// id of the customer to which this dashboard belongs
	// Read Only: true
	Customer string `json:"customer,omitempty"`

	// Experimental Dashboard Attributes
	DashboardAttributes JSONNode `json:"dashboardAttributes,omitempty"`

	// Default end time in milliseconds to query charts
	DefaultEndTime int64 `json:"defaultEndTime,omitempty"`

	// Default start time in milliseconds to query charts
	DefaultStartTime int64 `json:"defaultStartTime,omitempty"`

	// Default time window to query charts
	DefaultTimeWindow string `json:"defaultTimeWindow,omitempty"`

	// deleted
	// Read Only: true
	Deleted *bool `json:"deleted,omitempty"`

	// Human-readable description of the dashboard
	Description string `json:"description,omitempty"`

	// Refresh variables in Live Mode
	DisableRefreshInLiveMode bool `json:"disableRefreshInLiveMode,omitempty"`

	// Whether the dashboard description section is opened by default when the dashboard is shown
	DisplayDescription bool `json:"displayDescription,omitempty"`

	// Whether the dashboard parameters section is opened by default when the dashboard is shown
	DisplayQueryParameters bool `json:"displayQueryParameters,omitempty"`

	// Whether the "pills" quick-linked the sections of the dashboard are displayed by default when the dashboard is shown
	DisplaySectionTableOfContents bool `json:"displaySectionTableOfContents,omitempty"`

	// How charts belonging to this dashboard should display events.  BYCHART is default if unspecified
	// Enum: [BYCHART AUTOMATIC ALL NONE BYDASHBOARD BYCHARTANDDASHBOARD]
	EventFilterType string `json:"eventFilterType,omitempty"`

	// Event query to run on dashboard charts
	EventQuery string `json:"eventQuery,omitempty"`

	// favorite
	// Read Only: true
	Favorite *bool `json:"favorite,omitempty"`

	// Whether to force this dashboard to use the V2 UI
	ForceV2UI bool `json:"forceV2UI,omitempty"`

	// hidden
	// Read Only: true
	Hidden *bool `json:"hidden,omitempty"`

	// Hide chart warning
	HideChartWarning bool `json:"hideChartWarning,omitempty"`

	// Unique identifier, also URL slug, of the dashboard
	// Required: true
	ID *string `json:"id"`

	// Whether to include the obsolete metrics
	IncludeObsoleteMetrics bool `json:"includeObsoleteMetrics,omitempty"`

	// Whether the user has modify ACL access to the dashboard.
	ModifyACLAccess bool `json:"modifyAclAccess,omitempty"`

	// Name of the dashboard
	// Required: true
	Name *string `json:"name"`

	// num charts
	// Read Only: true
	NumCharts int32 `json:"numCharts,omitempty"`

	// num favorites
	// Read Only: true
	NumFavorites int32 `json:"numFavorites,omitempty"`

	// orphan
	// Read Only: true
	Orphan *bool `json:"orphan,omitempty"`

	// The current (as of Wavefront 4.0) JSON representation of dashboard parameters.  This is a map from a parameter name to its representation
	ParameterDetails map[string]DashboardParameterValue `json:"parameterDetails,omitempty"`

	// Deprecated.  An obsolete representation of dashboard parameters
	Parameters map[string]string `json:"parameters,omitempty"`

	// Dashboard chart sections
	// Required: true
	Sections []*DashboardSection `json:"sections"`

	// Whether this dashboard is system-owned and not writeable
	// Read Only: true
	SystemOwned *bool `json:"systemOwned,omitempty"`

	// tags
	Tags *WFTags `json:"tags,omitempty"`

	// updated epoch millis
	// Read Only: true
	UpdatedEpochMillis int64 `json:"updatedEpochMillis,omitempty"`

	// updater Id
	// Read Only: true
	UpdaterID string `json:"updaterId,omitempty"`

	// Unique identifier, also URL slug, of the dashboard
	// Required: true
	URL *string `json:"url"`

	// views last day
	// Read Only: true
	ViewsLastDay int32 `json:"viewsLastDay,omitempty"`

	// views last month
	// Read Only: true
	ViewsLastMonth int32 `json:"viewsLastMonth,omitempty"`

	// views last week
	// Read Only: true
	ViewsLastWeek int32 `json:"viewsLastWeek,omitempty"`
}

// Validate validates this dashboard
func (m *Dashboard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventFilterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dashboard) validateACL(formats strfmt.Registry) error {
	if swag.IsZero(m.ACL) { // not required
		return nil
	}

	if m.ACL != nil {
		if err := m.ACL.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acl")
			}
			return err
		}
	}

	return nil
}

var dashboardTypeEventFilterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BYCHART","AUTOMATIC","ALL","NONE","BYDASHBOARD","BYCHARTANDDASHBOARD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dashboardTypeEventFilterTypePropEnum = append(dashboardTypeEventFilterTypePropEnum, v)
	}
}

const (

	// DashboardEventFilterTypeBYCHART captures enum value "BYCHART"
	DashboardEventFilterTypeBYCHART string = "BYCHART"

	// DashboardEventFilterTypeAUTOMATIC captures enum value "AUTOMATIC"
	DashboardEventFilterTypeAUTOMATIC string = "AUTOMATIC"

	// DashboardEventFilterTypeALL captures enum value "ALL"
	DashboardEventFilterTypeALL string = "ALL"

	// DashboardEventFilterTypeNONE captures enum value "NONE"
	DashboardEventFilterTypeNONE string = "NONE"

	// DashboardEventFilterTypeBYDASHBOARD captures enum value "BYDASHBOARD"
	DashboardEventFilterTypeBYDASHBOARD string = "BYDASHBOARD"

	// DashboardEventFilterTypeBYCHARTANDDASHBOARD captures enum value "BYCHARTANDDASHBOARD"
	DashboardEventFilterTypeBYCHARTANDDASHBOARD string = "BYCHARTANDDASHBOARD"
)

// prop value enum
func (m *Dashboard) validateEventFilterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dashboardTypeEventFilterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Dashboard) validateEventFilterType(formats strfmt.Registry) error {
	if swag.IsZero(m.EventFilterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEventFilterTypeEnum("eventFilterType", "body", m.EventFilterType); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) validateParameterDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ParameterDetails) { // not required
		return nil
	}

	for k := range m.ParameterDetails {

		if err := validate.Required("parameterDetails"+"."+k, "body", m.ParameterDetails[k]); err != nil {
			return err
		}
		if val, ok := m.ParameterDetails[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameterDetails" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameterDetails" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dashboard) validateSections(formats strfmt.Registry) error {

	if err := validate.Required("sections", "body", m.Sections); err != nil {
		return err
	}

	for i := 0; i < len(m.Sections); i++ {
		if swag.IsZero(m.Sections[i]) { // not required
			continue
		}

		if m.Sections[i] != nil {
			if err := m.Sections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dashboard) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if m.Tags != nil {
		if err := m.Tags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this dashboard based on the context it is used
func (m *Dashboard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateACL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedEpochMillis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatorID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeleted(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFavorite(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHidden(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumCharts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumFavorites(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrphan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParameterDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystemOwned(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedEpochMillis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdaterID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewsLastDay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewsLastMonth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewsLastWeek(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dashboard) contextValidateACL(ctx context.Context, formats strfmt.Registry) error {

	if m.ACL != nil {
		if err := m.ACL.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acl")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acl")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) contextValidateCreatedEpochMillis(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdEpochMillis", "body", int64(m.CreatedEpochMillis)); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) contextValidateCreatorID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "creatorId", "body", string(m.CreatorID)); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "customer", "body", string(m.Customer)); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) contextValidateDeleted(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deleted", "body", m.Deleted); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) contextValidateFavorite(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "favorite", "body", m.Favorite); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) contextValidateHidden(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "hidden", "body", m.Hidden); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) contextValidateNumCharts(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numCharts", "body", int32(m.NumCharts)); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) contextValidateNumFavorites(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "numFavorites", "body", int32(m.NumFavorites)); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) contextValidateOrphan(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "orphan", "body", m.Orphan); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) contextValidateParameterDetails(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.ParameterDetails {

		if val, ok := m.ParameterDetails[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *Dashboard) contextValidateSections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sections); i++ {

		if m.Sections[i] != nil {
			if err := m.Sections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Dashboard) contextValidateSystemOwned(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "systemOwned", "body", m.SystemOwned); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	if m.Tags != nil {
		if err := m.Tags.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

func (m *Dashboard) contextValidateUpdatedEpochMillis(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedEpochMillis", "body", int64(m.UpdatedEpochMillis)); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) contextValidateUpdaterID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updaterId", "body", string(m.UpdaterID)); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) contextValidateViewsLastDay(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "viewsLastDay", "body", int32(m.ViewsLastDay)); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) contextValidateViewsLastMonth(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "viewsLastMonth", "body", int32(m.ViewsLastMonth)); err != nil {
		return err
	}

	return nil
}

func (m *Dashboard) contextValidateViewsLastWeek(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "viewsLastWeek", "body", int32(m.ViewsLastWeek)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Dashboard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Dashboard) UnmarshalBinary(b []byte) error {
	var res Dashboard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
