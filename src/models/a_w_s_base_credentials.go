// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AWSBaseCredentials a w s base credentials
//
// swagger:model AWSBaseCredentials
type AWSBaseCredentials struct {

	// The external id corresponding to the Role ARN
	// Required: true
	ExternalID *string `json:"externalId"`

	// The Role ARN that the customer has created in AWS IAM to allow access to Wavefront
	// Example: arn:aws:iam::\u003caccountid\u003e:role/\u003crolename\u003e
	// Required: true
	RoleArn *string `json:"roleArn"`
}

// Validate validates this a w s base credentials
func (m *AWSBaseCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleArn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AWSBaseCredentials) validateExternalID(formats strfmt.Registry) error {

	if err := validate.Required("externalId", "body", m.ExternalID); err != nil {
		return err
	}

	return nil
}

func (m *AWSBaseCredentials) validateRoleArn(formats strfmt.Registry) error {

	if err := validate.Required("roleArn", "body", m.RoleArn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this a w s base credentials based on context it is used
func (m *AWSBaseCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AWSBaseCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AWSBaseCredentials) UnmarshalBinary(b []byte) error {
	var res AWSBaseCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
