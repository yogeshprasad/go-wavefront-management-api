// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MonitoredApplicationDTO monitored application d t o
//
// swagger:model MonitoredApplicationDTO
type MonitoredApplicationDTO struct {

	// Application Name of the monitored application
	// Required: true
	Application *string `json:"application"`

	// Created epoch of monitored application
	// Read Only: true
	Created int64 `json:"created,omitempty"`

	// Monitored application is hidden or not
	Hidden bool `json:"hidden,omitempty"`

	// Last reported epoch of monitored application
	// Read Only: true
	LastReported int64 `json:"lastReported,omitempty"`

	// Last update epoch of monitored application
	// Read Only: true
	LastUpdated int64 `json:"lastUpdated,omitempty"`

	// Satisfied latency of monitored application
	SatisfiedLatencyMillis int64 `json:"satisfiedLatencyMillis,omitempty"`

	// Number of monitored service of monitored application
	// Read Only: true
	ServiceCount int64 `json:"serviceCount,omitempty"`

	// Status of monitored application
	// Read Only: true
	// Enum: [ACTIVE INACTIVE]
	Status string `json:"status,omitempty"`

	// Last update user id of monitored application
	// Read Only: true
	UpdateUserID string `json:"updateUserId,omitempty"`
}

// Validate validates this monitored application d t o
func (m *MonitoredApplicationDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApplication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoredApplicationDTO) validateApplication(formats strfmt.Registry) error {

	if err := validate.Required("application", "body", m.Application); err != nil {
		return err
	}

	return nil
}

var monitoredApplicationDTOTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","INACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monitoredApplicationDTOTypeStatusPropEnum = append(monitoredApplicationDTOTypeStatusPropEnum, v)
	}
}

const (

	// MonitoredApplicationDTOStatusACTIVE captures enum value "ACTIVE"
	MonitoredApplicationDTOStatusACTIVE string = "ACTIVE"

	// MonitoredApplicationDTOStatusINACTIVE captures enum value "INACTIVE"
	MonitoredApplicationDTOStatusINACTIVE string = "INACTIVE"
)

// prop value enum
func (m *MonitoredApplicationDTO) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, monitoredApplicationDTOTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MonitoredApplicationDTO) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this monitored application d t o based on the context it is used
func (m *MonitoredApplicationDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastReported(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdateUserID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MonitoredApplicationDTO) contextValidateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created", "body", int64(m.Created)); err != nil {
		return err
	}

	return nil
}

func (m *MonitoredApplicationDTO) contextValidateLastReported(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastReported", "body", int64(m.LastReported)); err != nil {
		return err
	}

	return nil
}

func (m *MonitoredApplicationDTO) contextValidateLastUpdated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastUpdated", "body", int64(m.LastUpdated)); err != nil {
		return err
	}

	return nil
}

func (m *MonitoredApplicationDTO) contextValidateServiceCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "serviceCount", "body", int64(m.ServiceCount)); err != nil {
		return err
	}

	return nil
}

func (m *MonitoredApplicationDTO) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "status", "body", string(m.Status)); err != nil {
		return err
	}

	return nil
}

func (m *MonitoredApplicationDTO) contextValidateUpdateUserID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updateUserId", "body", string(m.UpdateUserID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MonitoredApplicationDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MonitoredApplicationDTO) UnmarshalBinary(b []byte) error {
	var res MonitoredApplicationDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
