// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChartSourceQuery chart source query
//
// swagger:model ChartSourceQuery
type ChartSourceQuery struct {

	// Whether the source is disabled
	Disabled bool `json:"disabled,omitempty"`

	// Name of the source
	// Required: true
	Name *string `json:"name"`

	// Query expression to plot on the chart
	// Required: true
	Query *string `json:"query"`

	// Query type of the source
	// Enum: [WQL PROMQL HYBRID]
	QueryType string `json:"queryType,omitempty"`

	// Whether or not this source line should have the query builder enabled
	QuerybuilderEnabled bool `json:"querybuilderEnabled,omitempty"`

	// Opaque representation of the querybuilder
	QuerybuilderSerialization string `json:"querybuilderSerialization,omitempty"`

	// For scatter plots, does this query source the X-axis or the Y-axis
	// Enum: [X Y]
	ScatterPlotSource string `json:"scatterPlotSource,omitempty"`

	// Determines if this source relates to the right hand Y-axis or not
	SecondaryAxis bool `json:"secondaryAxis,omitempty"`

	// The color used to draw all results from this source (auto if unset)
	SourceColor string `json:"sourceColor,omitempty"`

	// A description for the purpose of this source
	SourceDescription string `json:"sourceDescription,omitempty"`
}

// Validate validates this chart source query
func (m *ChartSourceQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScatterPlotSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChartSourceQuery) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ChartSourceQuery) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	return nil
}

var chartSourceQueryTypeQueryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WQL","PROMQL","HYBRID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chartSourceQueryTypeQueryTypePropEnum = append(chartSourceQueryTypeQueryTypePropEnum, v)
	}
}

const (

	// ChartSourceQueryQueryTypeWQL captures enum value "WQL"
	ChartSourceQueryQueryTypeWQL string = "WQL"

	// ChartSourceQueryQueryTypePROMQL captures enum value "PROMQL"
	ChartSourceQueryQueryTypePROMQL string = "PROMQL"

	// ChartSourceQueryQueryTypeHYBRID captures enum value "HYBRID"
	ChartSourceQueryQueryTypeHYBRID string = "HYBRID"
)

// prop value enum
func (m *ChartSourceQuery) validateQueryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chartSourceQueryTypeQueryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChartSourceQuery) validateQueryType(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateQueryTypeEnum("queryType", "body", m.QueryType); err != nil {
		return err
	}

	return nil
}

var chartSourceQueryTypeScatterPlotSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["X","Y"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chartSourceQueryTypeScatterPlotSourcePropEnum = append(chartSourceQueryTypeScatterPlotSourcePropEnum, v)
	}
}

const (

	// ChartSourceQueryScatterPlotSourceX captures enum value "X"
	ChartSourceQueryScatterPlotSourceX string = "X"

	// ChartSourceQueryScatterPlotSourceY captures enum value "Y"
	ChartSourceQueryScatterPlotSourceY string = "Y"
)

// prop value enum
func (m *ChartSourceQuery) validateScatterPlotSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chartSourceQueryTypeScatterPlotSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChartSourceQuery) validateScatterPlotSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ScatterPlotSource) { // not required
		return nil
	}

	// value enum
	if err := m.validateScatterPlotSourceEnum("scatterPlotSource", "body", m.ScatterPlotSource); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this chart source query based on context it is used
func (m *ChartSourceQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ChartSourceQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChartSourceQuery) UnmarshalBinary(b []byte) error {
	var res ChartSourceQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
