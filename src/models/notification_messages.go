// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NotificationMessages Notification Messages for preview
//
// swagger:model Notification Messages
type NotificationMessages struct {

	// additional info
	// Read Only: true
	AdditionalInfo map[string]string `json:"additionalInfo,omitempty"`

	// content
	// Read Only: true
	Content string `json:"content,omitempty"`

	// created epoch millis
	CreatedEpochMillis int64 `json:"createdEpochMillis,omitempty"`

	// creator Id
	CreatorID string `json:"creatorId,omitempty"`

	// deleted
	Deleted bool `json:"deleted,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// The notification method, can either be WEBHOOK, EMAIL or PAGERDUTY
	// Read Only: true
	// Enum: [WEBHOOK PAGERDUTY EMAIL]
	Method string `json:"method,omitempty"`

	// The alert target name, easier to read than ID
	// Read Only: true
	Name string `json:"name,omitempty"`

	// subject
	// Read Only: true
	Subject string `json:"subject,omitempty"`

	// updated epoch millis
	UpdatedEpochMillis int64 `json:"updatedEpochMillis,omitempty"`

	// updater Id
	UpdaterID string `json:"updaterId,omitempty"`
}

// Validate validates this notification messages
func (m *NotificationMessages) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var notificationMessagesTypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WEBHOOK","PAGERDUTY","EMAIL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		notificationMessagesTypeMethodPropEnum = append(notificationMessagesTypeMethodPropEnum, v)
	}
}

const (

	// NotificationMessagesMethodWEBHOOK captures enum value "WEBHOOK"
	NotificationMessagesMethodWEBHOOK string = "WEBHOOK"

	// NotificationMessagesMethodPAGERDUTY captures enum value "PAGERDUTY"
	NotificationMessagesMethodPAGERDUTY string = "PAGERDUTY"

	// NotificationMessagesMethodEMAIL captures enum value "EMAIL"
	NotificationMessagesMethodEMAIL string = "EMAIL"
)

// prop value enum
func (m *NotificationMessages) validateMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, notificationMessagesTypeMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NotificationMessages) validateMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.Method) { // not required
		return nil
	}

	// value enum
	if err := m.validateMethodEnum("method", "body", m.Method); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this notification messages based on the context it is used
func (m *NotificationMessages) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NotificationMessages) contextValidateAdditionalInfo(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *NotificationMessages) contextValidateContent(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "content", "body", string(m.Content)); err != nil {
		return err
	}

	return nil
}

func (m *NotificationMessages) contextValidateMethod(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "method", "body", string(m.Method)); err != nil {
		return err
	}

	return nil
}

func (m *NotificationMessages) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *NotificationMessages) contextValidateSubject(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "subject", "body", string(m.Subject)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NotificationMessages) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NotificationMessages) UnmarshalBinary(b []byte) error {
	var res NotificationMessages
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
