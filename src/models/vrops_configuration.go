// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VropsConfiguration Configurations specific to the vRops CloudPlatform integration.  Only applicable when the containing Credential has service=VROPS
//
// swagger:model VropsConfiguration
type VropsConfiguration struct {

	// Adapter names: Metrics will be fetched of only these adapter if given
	AdapterNames map[string][]string `json:"adapterNames,omitempty"`

	// The base url for vrops api, Default : https://www.mgmt.cloud.vmware.com/vrops-cloud
	// Example: https://www.mgmt.cloud.vmware.com/vrops-cloud
	BaseURL string `json:"baseURL,omitempty"`

	// A list of vRops Adpater and Resource kind to fetch metrics.  Allowable values are VMWARE_DATASTORE, VMWARE_DATASTORE)
	CategoriesToFetch []string `json:"categoriesToFetch"`

	// A regular expression that a metric name must match (case-insensitively) in order to be ingested
	// Example: ^vrops.(vmware|cloudhealthadapter).(clustercomputeresource|datastore).*$
	MetricFilterRegex string `json:"metricFilterRegex,omitempty"`

	// OrganizationID will be derived from api token
	OrganizationID string `json:"organizationID,omitempty"`

	// The vRops API Token
	// Required: true
	VropsAPIToken *string `json:"vropsAPIToken"`
}

// Validate validates this vrops configuration
func (m *VropsConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategoriesToFetch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVropsAPIToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vropsConfigurationCategoriesToFetchItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VMWARE_CLUSTERCOMPUTERESOURCE","VMWARE_DATASTORE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vropsConfigurationCategoriesToFetchItemsEnum = append(vropsConfigurationCategoriesToFetchItemsEnum, v)
	}
}

func (m *VropsConfiguration) validateCategoriesToFetchItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vropsConfigurationCategoriesToFetchItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VropsConfiguration) validateCategoriesToFetch(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoriesToFetch) { // not required
		return nil
	}

	for i := 0; i < len(m.CategoriesToFetch); i++ {

		// value enum
		if err := m.validateCategoriesToFetchItemsEnum("categoriesToFetch"+"."+strconv.Itoa(i), "body", m.CategoriesToFetch[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *VropsConfiguration) validateVropsAPIToken(formats strfmt.Registry) error {

	if err := validate.Required("vropsAPIToken", "body", m.VropsAPIToken); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vrops configuration based on context it is used
func (m *VropsConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VropsConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VropsConfiguration) UnmarshalBinary(b []byte) error {
	var res VropsConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
