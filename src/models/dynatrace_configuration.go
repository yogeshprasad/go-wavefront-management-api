// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DynatraceConfiguration Configurations specific to the Dynatrace Cloud Platform integration.  Only applicable when the containing Credential has service=DYNATRACE
//
// swagger:model DynatraceConfiguration
type DynatraceConfiguration struct {

	// The Dynatrace API Token
	// Required: true
	DynatraceAPIToken *string `json:"dynatraceAPIToken"`

	// The ID of Dynatrace Environment
	// Example: example
	EnvironmentID string `json:"environmentID,omitempty"`

	// A regular expression that a metric name must match (case-insensitively) in order to be ingested
	// Example: ^dynatrace.(builtin|dsfm).*$
	MetricFilterRegex string `json:"metricFilterRegex,omitempty"`
}

// Validate validates this dynatrace configuration
func (m *DynatraceConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDynatraceAPIToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DynatraceConfiguration) validateDynatraceAPIToken(formats strfmt.Registry) error {

	if err := validate.Required("dynatraceAPIToken", "body", m.DynatraceAPIToken); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dynatrace configuration based on context it is used
func (m *DynatraceConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DynatraceConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DynatraceConfiguration) UnmarshalBinary(b []byte) error {
	var res DynatraceConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
