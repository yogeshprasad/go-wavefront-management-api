// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DashboardParameterValue dashboard parameter value
//
// swagger:model DashboardParameterValue
type DashboardParameterValue struct {

	// allow all
	AllowAll bool `json:"allowAll,omitempty"`

	// default value
	DefaultValue string `json:"defaultValue,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// dynamic field type
	// Enum: [SOURCE SOURCE_TAG METRIC_NAME TAG_KEY MATCHING_SOURCE_TAG]
	DynamicFieldType string `json:"dynamicFieldType,omitempty"`

	// hide from view
	HideFromView bool `json:"hideFromView,omitempty"`

	// label
	Label string `json:"label,omitempty"`

	// multivalue
	Multivalue bool `json:"multivalue,omitempty"`

	// order
	Order int32 `json:"order,omitempty"`

	// parameter type
	// Enum: [SIMPLE LIST DYNAMIC]
	ParameterType string `json:"parameterType,omitempty"`

	// query value
	QueryValue string `json:"queryValue,omitempty"`

	// Whether to reverse alphabetically sort the returned result.
	ReverseDynSort bool `json:"reverseDynSort,omitempty"`

	// tag key
	TagKey string `json:"tagKey,omitempty"`

	// The regular expression to filter out source tags from the Current Values list.
	TagsBlackListRegex string `json:"tagsBlackListRegex,omitempty"`

	// value ordering
	ValueOrdering []string `json:"valueOrdering"`

	// values to readable strings
	ValuesToReadableStrings map[string]string `json:"valuesToReadableStrings,omitempty"`
}

// Validate validates this dashboard parameter value
func (m *DashboardParameterValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDynamicFieldType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameterType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dashboardParameterValueTypeDynamicFieldTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SOURCE","SOURCE_TAG","METRIC_NAME","TAG_KEY","MATCHING_SOURCE_TAG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dashboardParameterValueTypeDynamicFieldTypePropEnum = append(dashboardParameterValueTypeDynamicFieldTypePropEnum, v)
	}
}

const (

	// DashboardParameterValueDynamicFieldTypeSOURCE captures enum value "SOURCE"
	DashboardParameterValueDynamicFieldTypeSOURCE string = "SOURCE"

	// DashboardParameterValueDynamicFieldTypeSOURCETAG captures enum value "SOURCE_TAG"
	DashboardParameterValueDynamicFieldTypeSOURCETAG string = "SOURCE_TAG"

	// DashboardParameterValueDynamicFieldTypeMETRICNAME captures enum value "METRIC_NAME"
	DashboardParameterValueDynamicFieldTypeMETRICNAME string = "METRIC_NAME"

	// DashboardParameterValueDynamicFieldTypeTAGKEY captures enum value "TAG_KEY"
	DashboardParameterValueDynamicFieldTypeTAGKEY string = "TAG_KEY"

	// DashboardParameterValueDynamicFieldTypeMATCHINGSOURCETAG captures enum value "MATCHING_SOURCE_TAG"
	DashboardParameterValueDynamicFieldTypeMATCHINGSOURCETAG string = "MATCHING_SOURCE_TAG"
)

// prop value enum
func (m *DashboardParameterValue) validateDynamicFieldTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dashboardParameterValueTypeDynamicFieldTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DashboardParameterValue) validateDynamicFieldType(formats strfmt.Registry) error {
	if swag.IsZero(m.DynamicFieldType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDynamicFieldTypeEnum("dynamicFieldType", "body", m.DynamicFieldType); err != nil {
		return err
	}

	return nil
}

var dashboardParameterValueTypeParameterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SIMPLE","LIST","DYNAMIC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dashboardParameterValueTypeParameterTypePropEnum = append(dashboardParameterValueTypeParameterTypePropEnum, v)
	}
}

const (

	// DashboardParameterValueParameterTypeSIMPLE captures enum value "SIMPLE"
	DashboardParameterValueParameterTypeSIMPLE string = "SIMPLE"

	// DashboardParameterValueParameterTypeLIST captures enum value "LIST"
	DashboardParameterValueParameterTypeLIST string = "LIST"

	// DashboardParameterValueParameterTypeDYNAMIC captures enum value "DYNAMIC"
	DashboardParameterValueParameterTypeDYNAMIC string = "DYNAMIC"
)

// prop value enum
func (m *DashboardParameterValue) validateParameterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dashboardParameterValueTypeParameterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DashboardParameterValue) validateParameterType(formats strfmt.Registry) error {
	if swag.IsZero(m.ParameterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateParameterTypeEnum("parameterType", "body", m.ParameterType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dashboard parameter value based on context it is used
func (m *DashboardParameterValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DashboardParameterValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DashboardParameterValue) UnmarshalBinary(b []byte) error {
	var res DashboardParameterValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
