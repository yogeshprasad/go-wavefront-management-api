// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SpecificData specific data
//
// swagger:model SpecificData
type SpecificData struct {

	// class loader
	ClassLoader *ClassLoader `json:"classLoader,omitempty"`

	// conversions
	Conversions []*ConversionObject `json:"conversions"`

	// fast reader builder
	FastReaderBuilder *FastReaderBuilder `json:"fastReaderBuilder,omitempty"`

	// fast reader enabled
	FastReaderEnabled bool `json:"fastReaderEnabled,omitempty"`
}

// Validate validates this specific data
func (m *SpecificData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClassLoader(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConversions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFastReaderBuilder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SpecificData) validateClassLoader(formats strfmt.Registry) error {
	if swag.IsZero(m.ClassLoader) { // not required
		return nil
	}

	if m.ClassLoader != nil {
		if err := m.ClassLoader.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classLoader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classLoader")
			}
			return err
		}
	}

	return nil
}

func (m *SpecificData) validateConversions(formats strfmt.Registry) error {
	if swag.IsZero(m.Conversions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conversions); i++ {
		if swag.IsZero(m.Conversions[i]) { // not required
			continue
		}

		if m.Conversions[i] != nil {
			if err := m.Conversions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conversions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conversions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SpecificData) validateFastReaderBuilder(formats strfmt.Registry) error {
	if swag.IsZero(m.FastReaderBuilder) { // not required
		return nil
	}

	if m.FastReaderBuilder != nil {
		if err := m.FastReaderBuilder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fastReaderBuilder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fastReaderBuilder")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this specific data based on the context it is used
func (m *SpecificData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClassLoader(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConversions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFastReaderBuilder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SpecificData) contextValidateClassLoader(ctx context.Context, formats strfmt.Registry) error {

	if m.ClassLoader != nil {
		if err := m.ClassLoader.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classLoader")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classLoader")
			}
			return err
		}
	}

	return nil
}

func (m *SpecificData) contextValidateConversions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Conversions); i++ {

		if m.Conversions[i] != nil {
			if err := m.Conversions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conversions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conversions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SpecificData) contextValidateFastReaderBuilder(ctx context.Context, formats strfmt.Registry) error {

	if m.FastReaderBuilder != nil {
		if err := m.FastReaderBuilder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fastReaderBuilder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fastReaderBuilder")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SpecificData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SpecificData) UnmarshalBinary(b []byte) error {
	var res SpecificData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
