// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppDynamicsConfiguration Configurations specific to the AppDynamics integration.  Only applicable when the containing Credential has service=APPDYNAMICS
//
// swagger:model AppDynamicsConfiguration
type AppDynamicsConfiguration struct {

	// List of regular expressions that a application name must match (case-insensitively) in order to be ingested.
	AppFilterRegex []string `json:"appFilterRegex"`

	// Name of the SaaS controller.
	// Required: true
	ControllerName *string `json:"controllerName"`

	// Boolean flag to control Application Infrastructure metric injection.
	EnableAppInfraMetrics bool `json:"enableAppInfraMetrics,omitempty"`

	// Boolean flag to control Backend metric injection.
	EnableBackendMetrics bool `json:"enableBackendMetrics,omitempty"`

	// Boolean flag to control Business Transaction metric injection.
	EnableBusinessTrxMetrics bool `json:"enableBusinessTrxMetrics,omitempty"`

	// Boolean flag to control Error metric injection.
	EnableErrorMetrics bool `json:"enableErrorMetrics,omitempty"`

	// Boolean flag to control Individual Node metric injection.
	EnableIndividualNodeMetrics bool `json:"enableIndividualNodeMetrics,omitempty"`

	// Boolean flag to control Overall Performance metric injection.
	EnableOverallPerfMetrics bool `json:"enableOverallPerfMetrics,omitempty"`

	// Set this to 'false' to get separate results for all values within the time range, by default it is 'true'.
	EnableRollup bool `json:"enableRollup,omitempty"`

	// Boolean flag to control Service End point metric injection.
	EnableServiceEndpointMetrics bool `json:"enableServiceEndpointMetrics,omitempty"`

	// Password for AppDynamics user.
	// Required: true
	EncryptedPassword *string `json:"encryptedPassword"`

	// Username is combination of userName and the account name.
	// Example: user1@account1
	// Required: true
	UserName *string `json:"userName"`
}

// Validate validates this app dynamics configuration
func (m *AppDynamicsConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControllerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptedPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppDynamicsConfiguration) validateControllerName(formats strfmt.Registry) error {

	if err := validate.Required("controllerName", "body", m.ControllerName); err != nil {
		return err
	}

	return nil
}

func (m *AppDynamicsConfiguration) validateEncryptedPassword(formats strfmt.Registry) error {

	if err := validate.Required("encryptedPassword", "body", m.EncryptedPassword); err != nil {
		return err
	}

	return nil
}

func (m *AppDynamicsConfiguration) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("userName", "body", m.UserName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this app dynamics configuration based on context it is used
func (m *AppDynamicsConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AppDynamicsConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppDynamicsConfiguration) UnmarshalBinary(b []byte) error {
	var res AppDynamicsConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
