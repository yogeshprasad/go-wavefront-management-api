// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewRelicConfiguration Configurations specific to the NewRelic integration.  Only applicable when the containing Credential has service=NEWRELIC
//
// swagger:model NewRelicConfiguration
type NewRelicConfiguration struct {

	// New Relic REST API Key.
	// Required: true
	APIKey *string `json:"apiKey"`

	// A regular expression that a application name must match (case-insensitively) in order to collect metrics.
	// Example: ^hostingservice-(prod|dev)*$
	AppFilterRegex string `json:"appFilterRegex,omitempty"`

	// A regular expression that a host name must match (case-insensitively) in order to collect metrics.
	// Example: host[1-9].xyz.com
	HostFilterRegex string `json:"hostFilterRegex,omitempty"`

	// Application specific metric filter
	NewRelicMetricFilters []*NewRelicMetricFilters `json:"newRelicMetricFilters"`
}

// Validate validates this new relic configuration
func (m *NewRelicConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewRelicMetricFilters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewRelicConfiguration) validateAPIKey(formats strfmt.Registry) error {

	if err := validate.Required("apiKey", "body", m.APIKey); err != nil {
		return err
	}

	return nil
}

func (m *NewRelicConfiguration) validateNewRelicMetricFilters(formats strfmt.Registry) error {
	if swag.IsZero(m.NewRelicMetricFilters) { // not required
		return nil
	}

	for i := 0; i < len(m.NewRelicMetricFilters); i++ {
		if swag.IsZero(m.NewRelicMetricFilters[i]) { // not required
			continue
		}

		if m.NewRelicMetricFilters[i] != nil {
			if err := m.NewRelicMetricFilters[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("newRelicMetricFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("newRelicMetricFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this new relic configuration based on the context it is used
func (m *NewRelicConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNewRelicMetricFilters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewRelicConfiguration) contextValidateNewRelicMetricFilters(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NewRelicMetricFilters); i++ {

		if m.NewRelicMetricFilters[i] != nil {
			if err := m.NewRelicMetricFilters[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("newRelicMetricFilters" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("newRelicMetricFilters" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewRelicConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewRelicConfiguration) UnmarshalBinary(b []byte) error {
	var res NewRelicConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
