// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Chart Representation of a Wavefront chart
//
// swagger:model Chart
type Chart struct {

	// Whether anomaly detection is on or of, default false
	AnomalyDetectionOn bool `json:"anomalyDetectionOn,omitempty"`

	// The amount of historical data to use for anomaly detection baselining
	// Enum: [2 8 35]
	AnomalySampleSize string `json:"anomalySampleSize,omitempty"`

	// Anomaly Severity. Default medium
	// Enum: [low medium high]
	AnomalySeverity string `json:"anomalySeverity,omitempty"`

	// Anomaly Type. Default both
	// Enum: [both low high]
	AnomalyType string `json:"anomalyType,omitempty"`

	// If the chart has a log-scale Y-axis, the base for the logarithms
	Base int32 `json:"base,omitempty"`

	// Experimental field for chart attributes
	ChartAttributes JSONNode `json:"chartAttributes,omitempty"`

	// chart settings
	ChartSettings *ChartSettings `json:"chartSettings,omitempty"`

	// Description of the chart
	Description string `json:"description,omitempty"`

	// Whether to show confidence bounds. Default false
	DisplayConfidenceBounds bool `json:"displayConfidenceBounds,omitempty"`

	// Whether to filter out non anomalies. Default false
	FilterOutNonAnomalies bool `json:"filterOutNonAnomalies,omitempty"`

	// Whether to show obsolete metrics.  Default: false
	IncludeObsoleteMetrics bool `json:"includeObsoleteMetrics,omitempty"`

	// Whether to interpolate points in the charts produced. Default: true
	InterpolatePoints bool `json:"interpolatePoints,omitempty"`

	// Name of the source
	// Required: true
	Name *string `json:"name"`

	// Whether to hide events related to the sources in the charts produced. Default false (i.e. shows events)
	NoDefaultEvents bool `json:"noDefaultEvents,omitempty"`

	// Query expression to plot on the chart
	// Required: true
	Sources []*ChartSourceQuery `json:"sources"`

	// Summarization strategy for the chart.  MEAN is default
	// Enum: [MEAN MEDIAN MIN MAX SUM COUNT LAST FIRST]
	Summarization string `json:"summarization,omitempty"`

	// String to label the units of the chart on the Y-axis
	Units string `json:"units,omitempty"`
}

// Validate validates this chart
func (m *Chart) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnomalySampleSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnomalySeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnomalyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChartSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummarization(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var chartTypeAnomalySampleSizePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2","8","35"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chartTypeAnomalySampleSizePropEnum = append(chartTypeAnomalySampleSizePropEnum, v)
	}
}

const (

	// ChartAnomalySampleSizeNr2 captures enum value "2"
	ChartAnomalySampleSizeNr2 string = "2"

	// ChartAnomalySampleSizeNr8 captures enum value "8"
	ChartAnomalySampleSizeNr8 string = "8"

	// ChartAnomalySampleSizeNr35 captures enum value "35"
	ChartAnomalySampleSizeNr35 string = "35"
)

// prop value enum
func (m *Chart) validateAnomalySampleSizeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chartTypeAnomalySampleSizePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Chart) validateAnomalySampleSize(formats strfmt.Registry) error {
	if swag.IsZero(m.AnomalySampleSize) { // not required
		return nil
	}

	// value enum
	if err := m.validateAnomalySampleSizeEnum("anomalySampleSize", "body", m.AnomalySampleSize); err != nil {
		return err
	}

	return nil
}

var chartTypeAnomalySeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["low","medium","high"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chartTypeAnomalySeverityPropEnum = append(chartTypeAnomalySeverityPropEnum, v)
	}
}

const (

	// ChartAnomalySeverityLow captures enum value "low"
	ChartAnomalySeverityLow string = "low"

	// ChartAnomalySeverityMedium captures enum value "medium"
	ChartAnomalySeverityMedium string = "medium"

	// ChartAnomalySeverityHigh captures enum value "high"
	ChartAnomalySeverityHigh string = "high"
)

// prop value enum
func (m *Chart) validateAnomalySeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chartTypeAnomalySeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Chart) validateAnomalySeverity(formats strfmt.Registry) error {
	if swag.IsZero(m.AnomalySeverity) { // not required
		return nil
	}

	// value enum
	if err := m.validateAnomalySeverityEnum("anomalySeverity", "body", m.AnomalySeverity); err != nil {
		return err
	}

	return nil
}

var chartTypeAnomalyTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["both","low","high"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chartTypeAnomalyTypePropEnum = append(chartTypeAnomalyTypePropEnum, v)
	}
}

const (

	// ChartAnomalyTypeBoth captures enum value "both"
	ChartAnomalyTypeBoth string = "both"

	// ChartAnomalyTypeLow captures enum value "low"
	ChartAnomalyTypeLow string = "low"

	// ChartAnomalyTypeHigh captures enum value "high"
	ChartAnomalyTypeHigh string = "high"
)

// prop value enum
func (m *Chart) validateAnomalyTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chartTypeAnomalyTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Chart) validateAnomalyType(formats strfmt.Registry) error {
	if swag.IsZero(m.AnomalyType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAnomalyTypeEnum("anomalyType", "body", m.AnomalyType); err != nil {
		return err
	}

	return nil
}

func (m *Chart) validateChartSettings(formats strfmt.Registry) error {
	if swag.IsZero(m.ChartSettings) { // not required
		return nil
	}

	if m.ChartSettings != nil {
		if err := m.ChartSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chartSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chartSettings")
			}
			return err
		}
	}

	return nil
}

func (m *Chart) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Chart) validateSources(formats strfmt.Registry) error {

	if err := validate.Required("sources", "body", m.Sources); err != nil {
		return err
	}

	for i := 0; i < len(m.Sources); i++ {
		if swag.IsZero(m.Sources[i]) { // not required
			continue
		}

		if m.Sources[i] != nil {
			if err := m.Sources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var chartTypeSummarizationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MEAN","MEDIAN","MIN","MAX","SUM","COUNT","LAST","FIRST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chartTypeSummarizationPropEnum = append(chartTypeSummarizationPropEnum, v)
	}
}

const (

	// ChartSummarizationMEAN captures enum value "MEAN"
	ChartSummarizationMEAN string = "MEAN"

	// ChartSummarizationMEDIAN captures enum value "MEDIAN"
	ChartSummarizationMEDIAN string = "MEDIAN"

	// ChartSummarizationMIN captures enum value "MIN"
	ChartSummarizationMIN string = "MIN"

	// ChartSummarizationMAX captures enum value "MAX"
	ChartSummarizationMAX string = "MAX"

	// ChartSummarizationSUM captures enum value "SUM"
	ChartSummarizationSUM string = "SUM"

	// ChartSummarizationCOUNT captures enum value "COUNT"
	ChartSummarizationCOUNT string = "COUNT"

	// ChartSummarizationLAST captures enum value "LAST"
	ChartSummarizationLAST string = "LAST"

	// ChartSummarizationFIRST captures enum value "FIRST"
	ChartSummarizationFIRST string = "FIRST"
)

// prop value enum
func (m *Chart) validateSummarizationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chartTypeSummarizationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Chart) validateSummarization(formats strfmt.Registry) error {
	if swag.IsZero(m.Summarization) { // not required
		return nil
	}

	// value enum
	if err := m.validateSummarizationEnum("summarization", "body", m.Summarization); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this chart based on the context it is used
func (m *Chart) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChartSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Chart) contextValidateChartSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.ChartSettings != nil {
		if err := m.ChartSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chartSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chartSettings")
			}
			return err
		}
	}

	return nil
}

func (m *Chart) contextValidateSources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Sources); i++ {

		if m.Sources[i] != nil {
			if err := m.Sources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Chart) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Chart) UnmarshalBinary(b []byte) error {
	var res Chart
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
