// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ReportEventAnomalyDTO report event anomaly d t o
//
// swagger:model ReportEventAnomalyDTO
type ReportEventAnomalyDTO struct {

	// related anomaly d t o
	RelatedAnomalyDTO *RelatedAnomaly `json:"relatedAnomalyDTO,omitempty"`

	// related event d t o
	RelatedEventDTO *RelatedEvent `json:"relatedEventDTO,omitempty"`

	// similarity score
	SimilarityScore float64 `json:"similarityScore,omitempty"`
}

// Validate validates this report event anomaly d t o
func (m *ReportEventAnomalyDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRelatedAnomalyDTO(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedEventDTO(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportEventAnomalyDTO) validateRelatedAnomalyDTO(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedAnomalyDTO) { // not required
		return nil
	}

	if m.RelatedAnomalyDTO != nil {
		if err := m.RelatedAnomalyDTO.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedAnomalyDTO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relatedAnomalyDTO")
			}
			return err
		}
	}

	return nil
}

func (m *ReportEventAnomalyDTO) validateRelatedEventDTO(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedEventDTO) { // not required
		return nil
	}

	if m.RelatedEventDTO != nil {
		if err := m.RelatedEventDTO.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedEventDTO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relatedEventDTO")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this report event anomaly d t o based on the context it is used
func (m *ReportEventAnomalyDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRelatedAnomalyDTO(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelatedEventDTO(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportEventAnomalyDTO) contextValidateRelatedAnomalyDTO(ctx context.Context, formats strfmt.Registry) error {

	if m.RelatedAnomalyDTO != nil {
		if err := m.RelatedAnomalyDTO.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedAnomalyDTO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relatedAnomalyDTO")
			}
			return err
		}
	}

	return nil
}

func (m *ReportEventAnomalyDTO) contextValidateRelatedEventDTO(ctx context.Context, formats strfmt.Registry) error {

	if m.RelatedEventDTO != nil {
		if err := m.RelatedEventDTO.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedEventDTO")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relatedEventDTO")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportEventAnomalyDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportEventAnomalyDTO) UnmarshalBinary(b []byte) error {
	var res ReportEventAnomalyDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
