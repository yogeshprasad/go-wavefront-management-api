// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserToCreate user to create
//
// swagger:model UserToCreate
type UserToCreate struct {

	// The (unique) identifier of the user to create. Must be a valid email address
	// Required: true
	EmailAddress *string `json:"emailAddress"`

	// List of permission groups to grant to this user. Please note that 'host_tag_management' is the equivalent of the 'Source Tag Management' permission.  Possible values are agent_management, alerts_management, dashboard_management, embedded_charts, events_management, external_links_management, host_tag_management, metrics_management, user_management
	// Required: true
	Groups []string `json:"groups"`

	// The list of ingestion policy ids, the user will be added to.
	IngestionPolicies []string `json:"ingestionPolicies"`

	// The identifier of the ingestion policy linked with user.
	IngestionPolicyID string `json:"ingestionPolicyId,omitempty"`

	// The list of role ids, the user will be added to.
	Roles []string `json:"roles"`

	// List of user groups to this user.
	// Required: true
	UserGroups []string `json:"userGroups"`
}

// Validate validates this user to create
func (m *UserToCreate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmailAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserToCreate) validateEmailAddress(formats strfmt.Registry) error {

	if err := validate.Required("emailAddress", "body", m.EmailAddress); err != nil {
		return err
	}

	return nil
}

func (m *UserToCreate) validateGroups(formats strfmt.Registry) error {

	if err := validate.Required("groups", "body", m.Groups); err != nil {
		return err
	}

	return nil
}

func (m *UserToCreate) validateUserGroups(formats strfmt.Registry) error {

	if err := validate.Required("userGroups", "body", m.UserGroups); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user to create based on context it is used
func (m *UserToCreate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserToCreate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserToCreate) UnmarshalBinary(b []byte) error {
	var res UserToCreate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
