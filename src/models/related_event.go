// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RelatedEvent Wrapper around a Wavefront Event describing how this event is related to another event
//
// swagger:model RelatedEvent
type RelatedEvent struct {

	// The list of tags on the alert which created this event.
	AlertTags []string `json:"alertTags"`

	// A string->string map of additional annotations on the event
	// Required: true
	Annotations map[string]string `json:"annotations"`

	// can close
	// Read Only: true
	CanClose *bool `json:"canClose,omitempty"`

	// can delete
	// Read Only: true
	CanDelete *bool `json:"canDelete,omitempty"`

	// All the host/label/tags of the event.
	// Read Only: true
	// Unique: true
	ComputedHlps []*SourceLabelPair `json:"computedHlps"`

	// created at
	// Read Only: true
	CreatedAt int64 `json:"createdAt,omitempty"`

	// created epoch millis
	// Read Only: true
	CreatedEpochMillis int64 `json:"createdEpochMillis,omitempty"`

	// creator Id
	// Read Only: true
	CreatorID string `json:"creatorId,omitempty"`

	// creator type
	// Read Only: true
	CreatorType []string `json:"creatorType"`

	// A string-><list of strings> map of additional dimension info on the event
	Dimensions map[string][]string `json:"dimensions,omitempty"`

	// End time of the event, in epoch millis.  Set to startTime + 1 for an instantaneous event
	EndTime int64 `json:"endTime,omitempty"`

	// A list of sources/hosts affected by the event
	Hosts []string `json:"hosts"`

	// id
	ID string `json:"id,omitempty"`

	// Whether the event is an artificial event generated by a literal expression or alert backtesting, i.e. not stored in the Wavefront backend
	// Read Only: true
	IsEphemeral *bool `json:"isEphemeral,omitempty"`

	// Whether this event was created by a user, versus the system.  Default: system
	// Read Only: true
	IsUserEvent *bool `json:"isUserEvent,omitempty"`

	// A list of metrics affected by the event
	MetricsUsed []string `json:"metricsUsed"`

	// The name of the event.  If 'annotations.prettyName' is present, 'name' will be equivalent to that value
	// Required: true
	Name *string `json:"name"`

	// Data concerning how this event is related to the event in the request
	// Read Only: true
	RelatedData *RelatedData `json:"relatedData,omitempty"`

	// running state
	// Read Only: true
	// Enum: [ONGOING PENDING ENDED]
	RunningState string `json:"runningState,omitempty"`

	// similarity score
	// Read Only: true
	SimilarityScore float64 `json:"similarityScore,omitempty"`

	// Start time of the event, in epoch millis.  If the JSON value is missing or set to 0, startTime will be set to the current time
	// Required: true
	StartTime *int64 `json:"startTime"`

	// In some event queries, multiple events that occur nearly simultaneously are summarized under a single event.  This value specifies the number of events summarized under this one
	// Read Only: true
	SummarizedEvents int64 `json:"summarizedEvents,omitempty"`

	// The customer to which the event belongs
	// Read Only: true
	Table string `json:"table,omitempty"`

	// A list of event tags
	Tags []string `json:"tags"`

	// updated at
	// Read Only: true
	UpdatedAt int64 `json:"updatedAt,omitempty"`

	// updated epoch millis
	// Read Only: true
	UpdatedEpochMillis int64 `json:"updatedEpochMillis,omitempty"`

	// updater Id
	// Read Only: true
	UpdaterID string `json:"updaterId,omitempty"`
}

// Validate validates this related event
func (m *RelatedEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnnotations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputedHlps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelatedEvent) validateAnnotations(formats strfmt.Registry) error {

	if err := validate.Required("annotations", "body", m.Annotations); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) validateComputedHlps(formats strfmt.Registry) error {
	if swag.IsZero(m.ComputedHlps) { // not required
		return nil
	}

	if err := validate.UniqueItems("computedHlps", "body", m.ComputedHlps); err != nil {
		return err
	}

	for i := 0; i < len(m.ComputedHlps); i++ {
		if swag.IsZero(m.ComputedHlps[i]) { // not required
			continue
		}

		if m.ComputedHlps[i] != nil {
			if err := m.ComputedHlps[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("computedHlps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("computedHlps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var relatedEventCreatorTypeItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["USER","ALERT","SYSTEM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		relatedEventCreatorTypeItemsEnum = append(relatedEventCreatorTypeItemsEnum, v)
	}
}

func (m *RelatedEvent) validateCreatorTypeItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, relatedEventCreatorTypeItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RelatedEvent) validateCreatorType(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatorType) { // not required
		return nil
	}

	for i := 0; i < len(m.CreatorType); i++ {

		// value enum
		if err := m.validateCreatorTypeItemsEnum("creatorType"+"."+strconv.Itoa(i), "body", m.CreatorType[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *RelatedEvent) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) validateRelatedData(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedData) { // not required
		return nil
	}

	if m.RelatedData != nil {
		if err := m.RelatedData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relatedData")
			}
			return err
		}
	}

	return nil
}

var relatedEventTypeRunningStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ONGOING","PENDING","ENDED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		relatedEventTypeRunningStatePropEnum = append(relatedEventTypeRunningStatePropEnum, v)
	}
}

const (

	// RelatedEventRunningStateONGOING captures enum value "ONGOING"
	RelatedEventRunningStateONGOING string = "ONGOING"

	// RelatedEventRunningStatePENDING captures enum value "PENDING"
	RelatedEventRunningStatePENDING string = "PENDING"

	// RelatedEventRunningStateENDED captures enum value "ENDED"
	RelatedEventRunningStateENDED string = "ENDED"
)

// prop value enum
func (m *RelatedEvent) validateRunningStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, relatedEventTypeRunningStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RelatedEvent) validateRunningState(formats strfmt.Registry) error {
	if swag.IsZero(m.RunningState) { // not required
		return nil
	}

	// value enum
	if err := m.validateRunningStateEnum("runningState", "body", m.RunningState); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this related event based on the context it is used
func (m *RelatedEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCanClose(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCanDelete(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateComputedHlps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedEpochMillis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatorID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatorType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsEphemeral(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsUserEvent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelatedData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunningState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSimilarityScore(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSummarizedEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedAt(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatedEpochMillis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdaterID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelatedEvent) contextValidateCanClose(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "canClose", "body", m.CanClose); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) contextValidateCanDelete(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "canDelete", "body", m.CanDelete); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) contextValidateComputedHlps(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "computedHlps", "body", []*SourceLabelPair(m.ComputedHlps)); err != nil {
		return err
	}

	for i := 0; i < len(m.ComputedHlps); i++ {

		if m.ComputedHlps[i] != nil {
			if err := m.ComputedHlps[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("computedHlps" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("computedHlps" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RelatedEvent) contextValidateCreatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAt", "body", int64(m.CreatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) contextValidateCreatedEpochMillis(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdEpochMillis", "body", int64(m.CreatedEpochMillis)); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) contextValidateCreatorID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "creatorId", "body", string(m.CreatorID)); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) contextValidateCreatorType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "creatorType", "body", []string(m.CreatorType)); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) contextValidateIsEphemeral(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isEphemeral", "body", m.IsEphemeral); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) contextValidateIsUserEvent(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "isUserEvent", "body", m.IsUserEvent); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) contextValidateRelatedData(ctx context.Context, formats strfmt.Registry) error {

	if m.RelatedData != nil {
		if err := m.RelatedData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relatedData")
			}
			return err
		}
	}

	return nil
}

func (m *RelatedEvent) contextValidateRunningState(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "runningState", "body", string(m.RunningState)); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) contextValidateSimilarityScore(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "similarityScore", "body", float64(m.SimilarityScore)); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) contextValidateSummarizedEvents(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "summarizedEvents", "body", int64(m.SummarizedEvents)); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) contextValidateTable(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "table", "body", string(m.Table)); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) contextValidateUpdatedAt(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedAt", "body", int64(m.UpdatedAt)); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) contextValidateUpdatedEpochMillis(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updatedEpochMillis", "body", int64(m.UpdatedEpochMillis)); err != nil {
		return err
	}

	return nil
}

func (m *RelatedEvent) contextValidateUpdaterID(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "updaterId", "body", string(m.UpdaterID)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RelatedEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RelatedEvent) UnmarshalBinary(b []byte) error {
	var res RelatedEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
