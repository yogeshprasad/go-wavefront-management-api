// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudTrailConfiguration Configurations specific to the CloudTrail AWS integration.  Only applicable when the containing Credential has service=CLOUDTRAIL
//
// swagger:model CloudTrailConfiguration
type CloudTrailConfiguration struct {

	// base credentials
	BaseCredentials *AWSBaseCredentials `json:"baseCredentials,omitempty"`

	// Name of the S3 bucket where CloudTrail logs are stored
	// Required: true
	BucketName *string `json:"bucketName"`

	// Rule to filter cloud trail log event.
	FilterRule string `json:"filterRule,omitempty"`

	// The common prefix, if any, appended to all CloudTrail log files
	Prefix string `json:"prefix,omitempty"`

	// The AWS region of the S3 bucket where CloudTrail logs are stored
	// Required: true
	Region *string `json:"region"`
}

// Validate validates this cloud trail configuration
func (m *CloudTrailConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBucketName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudTrailConfiguration) validateBaseCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseCredentials) { // not required
		return nil
	}

	if m.BaseCredentials != nil {
		if err := m.BaseCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *CloudTrailConfiguration) validateBucketName(formats strfmt.Registry) error {

	if err := validate.Required("bucketName", "body", m.BucketName); err != nil {
		return err
	}

	return nil
}

func (m *CloudTrailConfiguration) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cloud trail configuration based on the context it is used
func (m *CloudTrailConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudTrailConfiguration) contextValidateBaseCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseCredentials != nil {
		if err := m.BaseCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudTrailConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudTrailConfiguration) UnmarshalBinary(b []byte) error {
	var res CloudTrailConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
