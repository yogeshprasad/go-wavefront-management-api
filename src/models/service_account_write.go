// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceAccountWrite Wavefront service account entity for write requests.
//
// swagger:model ServiceAccountWrite
type ServiceAccountWrite struct {

	// The current state of the service account.
	Active bool `json:"active,omitempty"`

	// The description of the service account to be created.
	Description string `json:"description,omitempty"`

	// The list of permissions, the service account will be granted.
	Groups []string `json:"groups"`

	// The unique identifier for a service account.
	// Required: true
	Identifier *string `json:"identifier"`

	// The list of ingestion policy ids, the service account will be added to."
	IngestionPolicies []string `json:"ingestionPolicies"`

	// The identifier of the ingestion policy linked with service account.
	IngestionPolicyID string `json:"ingestionPolicyId,omitempty"`

	// The list of role ids, the service account will be added to."
	Roles []string `json:"roles"`

	// The service account's API tokens.
	Tokens []string `json:"tokens"`

	// The list of user group ids, the service account will be added to.
	UserGroups []string `json:"userGroups"`
}

// Validate validates this service account write
func (m *ServiceAccountWrite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceAccountWrite) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service account write based on context it is used
func (m *ServiceAccountWrite) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceAccountWrite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceAccountWrite) UnmarshalBinary(b []byte) error {
	var res ServiceAccountWrite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
