// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RoleDTO role d t o
//
// swagger:model RoleDTO
type RoleDTO struct {

	// created epoch millis
	CreatedEpochMillis int64 `json:"createdEpochMillis,omitempty"`

	// The id of the customer to which the role belongs
	Customer string `json:"customer,omitempty"`

	// The description of the role
	Description string `json:"description,omitempty"`

	// The unique identifier of the role
	ID string `json:"id,omitempty"`

	// The account that updated this role last time
	LastUpdatedAccountID string `json:"lastUpdatedAccountId,omitempty"`

	// The last time when the role is updated, in epoch milliseconds
	LastUpdatedMs int64 `json:"lastUpdatedMs,omitempty"`

	// Total number of accounts that are linked to the role
	// Read Only: true
	LinkedAccountsCount int32 `json:"linkedAccountsCount,omitempty"`

	// Total number of groups that are linked to the role
	// Read Only: true
	LinkedGroupsCount int32 `json:"linkedGroupsCount,omitempty"`

	// The name of the role
	Name string `json:"name,omitempty"`

	// List of permissions the role has been granted access to
	Permissions []string `json:"permissions"`

	// The properties of the role
	// Read Only: true
	Properties *RolePropertiesDTO `json:"properties,omitempty"`

	// The list of permissions that are restricted with the role. Currently only CSP roles have restrictions.
	// Read Only: true
	// Unique: true
	RestrictedPermissions []string `json:"restrictedPermissions"`

	// A sample of the accounts assigned to this role. Please use the Role facet of the Account Search API to get the full list of accounts for this role
	// Unique: true
	SampleLinkedAccounts []string `json:"sampleLinkedAccounts"`

	// A sample of the groups assigned to this role. Please use the Role facet of the Group Search API to get the full list of groups for this role
	// Unique: true
	SampleLinkedGroups []*UserGroup `json:"sampleLinkedGroups"`
}

// Validate validates this role d t o
func (m *RoleDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestrictedPermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSampleLinkedAccounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSampleLinkedGroups(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleDTO) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *RoleDTO) validateRestrictedPermissions(formats strfmt.Registry) error {
	if swag.IsZero(m.RestrictedPermissions) { // not required
		return nil
	}

	if err := validate.UniqueItems("restrictedPermissions", "body", m.RestrictedPermissions); err != nil {
		return err
	}

	return nil
}

func (m *RoleDTO) validateSampleLinkedAccounts(formats strfmt.Registry) error {
	if swag.IsZero(m.SampleLinkedAccounts) { // not required
		return nil
	}

	if err := validate.UniqueItems("sampleLinkedAccounts", "body", m.SampleLinkedAccounts); err != nil {
		return err
	}

	return nil
}

func (m *RoleDTO) validateSampleLinkedGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.SampleLinkedGroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("sampleLinkedGroups", "body", m.SampleLinkedGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.SampleLinkedGroups); i++ {
		if swag.IsZero(m.SampleLinkedGroups[i]) { // not required
			continue
		}

		if m.SampleLinkedGroups[i] != nil {
			if err := m.SampleLinkedGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sampleLinkedGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sampleLinkedGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this role d t o based on the context it is used
func (m *RoleDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinkedAccountsCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinkedGroupsCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRestrictedPermissions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSampleLinkedGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RoleDTO) contextValidateLinkedAccountsCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "linkedAccountsCount", "body", int32(m.LinkedAccountsCount)); err != nil {
		return err
	}

	return nil
}

func (m *RoleDTO) contextValidateLinkedGroupsCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "linkedGroupsCount", "body", int32(m.LinkedGroupsCount)); err != nil {
		return err
	}

	return nil
}

func (m *RoleDTO) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.Properties != nil {
		if err := m.Properties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *RoleDTO) contextValidateRestrictedPermissions(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "restrictedPermissions", "body", []string(m.RestrictedPermissions)); err != nil {
		return err
	}

	return nil
}

func (m *RoleDTO) contextValidateSampleLinkedGroups(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SampleLinkedGroups); i++ {

		if m.SampleLinkedGroups[i] != nil {
			if err := m.SampleLinkedGroups[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("sampleLinkedGroups" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("sampleLinkedGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RoleDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RoleDTO) UnmarshalBinary(b []byte) error {
	var res RoleDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
