// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationDashboard A dashboard definition belonging to a particular integration
//
// swagger:model IntegrationDashboard
type IntegrationDashboard struct {

	// dashboard min obj
	DashboardMinObj *DashboardMin `json:"dashboardMinObj,omitempty"`

	// dashboard obj
	DashboardObj *Dashboard `json:"dashboardObj,omitempty"`

	// Dashboard description
	// Required: true
	Description *string `json:"description"`

	// Dashboard name
	// Required: true
	Name *string `json:"name"`

	// URL path to the JSON definition of this dashboard
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this integration dashboard
func (m *IntegrationDashboard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDashboardMinObj(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDashboardObj(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationDashboard) validateDashboardMinObj(formats strfmt.Registry) error {
	if swag.IsZero(m.DashboardMinObj) { // not required
		return nil
	}

	if m.DashboardMinObj != nil {
		if err := m.DashboardMinObj.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboardMinObj")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dashboardMinObj")
			}
			return err
		}
	}

	return nil
}

func (m *IntegrationDashboard) validateDashboardObj(formats strfmt.Registry) error {
	if swag.IsZero(m.DashboardObj) { // not required
		return nil
	}

	if m.DashboardObj != nil {
		if err := m.DashboardObj.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboardObj")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dashboardObj")
			}
			return err
		}
	}

	return nil
}

func (m *IntegrationDashboard) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationDashboard) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationDashboard) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this integration dashboard based on the context it is used
func (m *IntegrationDashboard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDashboardMinObj(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDashboardObj(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationDashboard) contextValidateDashboardMinObj(ctx context.Context, formats strfmt.Registry) error {

	if m.DashboardMinObj != nil {
		if err := m.DashboardMinObj.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboardMinObj")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dashboardMinObj")
			}
			return err
		}
	}

	return nil
}

func (m *IntegrationDashboard) contextValidateDashboardObj(ctx context.Context, formats strfmt.Registry) error {

	if m.DashboardObj != nil {
		if err := m.DashboardObj.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dashboardObj")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dashboardObj")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationDashboard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationDashboard) UnmarshalBinary(b []byte) error {
	var res IntegrationDashboard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
