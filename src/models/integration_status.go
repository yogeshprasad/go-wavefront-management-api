// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationStatus Status of this integration
//
// swagger:model IntegrationStatus
type IntegrationStatus struct {

	// A Map from the ids of the alerts contained in this integration to their install status.  The install status can take on one of three values, `VISIBLE`, `HIDDEN`, and `NOT_LOADED`
	// Read Only: true
	AlertStatuses map[string]string `json:"alertStatuses,omitempty"`

	// Status of integration content, e.g. dashboards
	// Read Only: true
	// Enum: [INVALID NOT_LOADED HIDDEN VISIBLE]
	ContentStatus string `json:"contentStatus,omitempty"`

	// Whether the customer or an automated process has installed the dashboards for this integration
	// Read Only: true
	// Enum: [UNDECIDED UNINSTALLED INSTALLED]
	InstallStatus string `json:"installStatus,omitempty"`

	// A Map from names of the required metrics to an object representing their reporting status.  The reporting status object has 3 boolean fields denoting whether the metric has been received during the corresponding time period: `ever`, `recentExceptNow`, and `now`.  `now` is on the order of a few hours, and `recentExceptNow` is on the order of the past few days, excluding the period considered to be `now`.
	// Read Only: true
	MetricStatuses map[string]MetricStatus `json:"metricStatuses,omitempty"`
}

// Validate validates this integration status
func (m *IntegrationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstallStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetricStatuses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// additional properties value enum
var integrationStatusAlertStatusesValueEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VISIBLE","HIDDEN","NOT_LOADED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationStatusAlertStatusesValueEnum = append(integrationStatusAlertStatusesValueEnum, v)
	}
}

func (m *IntegrationStatus) validateAlertStatusesValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, integrationStatusAlertStatusesValueEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntegrationStatus) validateAlertStatuses(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertStatuses) { // not required
		return nil
	}

	for k := range m.AlertStatuses {

		// value enum
		if err := m.validateAlertStatusesValueEnum("alertStatuses"+"."+k, "body", m.AlertStatuses[k]); err != nil {
			return err
		}

	}

	return nil
}

var integrationStatusTypeContentStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INVALID","NOT_LOADED","HIDDEN","VISIBLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationStatusTypeContentStatusPropEnum = append(integrationStatusTypeContentStatusPropEnum, v)
	}
}

const (

	// IntegrationStatusContentStatusINVALID captures enum value "INVALID"
	IntegrationStatusContentStatusINVALID string = "INVALID"

	// IntegrationStatusContentStatusNOTLOADED captures enum value "NOT_LOADED"
	IntegrationStatusContentStatusNOTLOADED string = "NOT_LOADED"

	// IntegrationStatusContentStatusHIDDEN captures enum value "HIDDEN"
	IntegrationStatusContentStatusHIDDEN string = "HIDDEN"

	// IntegrationStatusContentStatusVISIBLE captures enum value "VISIBLE"
	IntegrationStatusContentStatusVISIBLE string = "VISIBLE"
)

// prop value enum
func (m *IntegrationStatus) validateContentStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, integrationStatusTypeContentStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntegrationStatus) validateContentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateContentStatusEnum("contentStatus", "body", m.ContentStatus); err != nil {
		return err
	}

	return nil
}

var integrationStatusTypeInstallStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNDECIDED","UNINSTALLED","INSTALLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationStatusTypeInstallStatusPropEnum = append(integrationStatusTypeInstallStatusPropEnum, v)
	}
}

const (

	// IntegrationStatusInstallStatusUNDECIDED captures enum value "UNDECIDED"
	IntegrationStatusInstallStatusUNDECIDED string = "UNDECIDED"

	// IntegrationStatusInstallStatusUNINSTALLED captures enum value "UNINSTALLED"
	IntegrationStatusInstallStatusUNINSTALLED string = "UNINSTALLED"

	// IntegrationStatusInstallStatusINSTALLED captures enum value "INSTALLED"
	IntegrationStatusInstallStatusINSTALLED string = "INSTALLED"
)

// prop value enum
func (m *IntegrationStatus) validateInstallStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, integrationStatusTypeInstallStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntegrationStatus) validateInstallStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.InstallStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateInstallStatusEnum("installStatus", "body", m.InstallStatus); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationStatus) validateMetricStatuses(formats strfmt.Registry) error {
	if swag.IsZero(m.MetricStatuses) { // not required
		return nil
	}

	for k := range m.MetricStatuses {

		if err := validate.Required("metricStatuses"+"."+k, "body", m.MetricStatuses[k]); err != nil {
			return err
		}
		if val, ok := m.MetricStatuses[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metricStatuses" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metricStatuses" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this integration status based on the context it is used
func (m *IntegrationStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlertStatuses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInstallStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetricStatuses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntegrationStatus) contextValidateAlertStatuses(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *IntegrationStatus) contextValidateContentStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "contentStatus", "body", string(m.ContentStatus)); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationStatus) contextValidateInstallStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "installStatus", "body", string(m.InstallStatus)); err != nil {
		return err
	}

	return nil
}

func (m *IntegrationStatus) contextValidateMetricStatuses(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.MetricStatuses {

		if val, ok := m.MetricStatuses[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationStatus) UnmarshalBinary(b []byte) error {
	var res IntegrationStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
