// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnowflakeConfiguration Configurations specific to the Snowflake Platform integration.  Only applicable when the containing Credential has service=SNOWFLAKE
//
// swagger:model SnowflakeConfiguration
type SnowflakeConfiguration struct {

	// Snowflake AccountID
	// Required: true
	AccountID *string `json:"accountID"`

	// A regular expression that a metric name must match (case-insensitively) in order to be ingested
	MetricFilterRegex string `json:"metricFilterRegex,omitempty"`

	// Snowflake Password
	Password string `json:"password,omitempty"`

	// Snowflake Private Key
	// Required: true
	PrivateKey *string `json:"privateKey"`

	// Role to be used while querying snowflake database
	Role string `json:"role,omitempty"`

	// Snowflake Username
	// Required: true
	UserName *string `json:"userName"`

	// Warehouse to be used while querying snowflake database
	Warehouse string `json:"warehouse,omitempty"`
}

// Validate validates this snowflake configuration
func (m *SnowflakeConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnowflakeConfiguration) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountID", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *SnowflakeConfiguration) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *SnowflakeConfiguration) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("userName", "body", m.UserName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this snowflake configuration based on context it is used
func (m *SnowflakeConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SnowflakeConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnowflakeConfiguration) UnmarshalBinary(b []byte) error {
	var res SnowflakeConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
