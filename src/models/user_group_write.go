// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserGroupWrite Wavefront user group entity for write requests
//
// swagger:model UserGroupWrite
type UserGroupWrite struct {

	// created epoch millis
	// Read Only: true
	CreatedEpochMillis int64 `json:"createdEpochMillis,omitempty"`

	// The id of the customer to which the user group belongs
	// Read Only: true
	Customer string `json:"customer,omitempty"`

	// The description of the user group
	Description string `json:"description,omitempty"`

	// The unique identifier of the user group
	ID string `json:"id,omitempty"`

	// The name of the user group
	// Required: true
	Name *string `json:"name"`

	// List of role IDs the user group has been linked to.
	// Required: true
	RoleIDs []string `json:"roleIDs"`
}

// Validate validates this user group write
func (m *UserGroupWrite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleIDs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGroupWrite) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *UserGroupWrite) validateRoleIDs(formats strfmt.Registry) error {

	if err := validate.Required("roleIDs", "body", m.RoleIDs); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this user group write based on the context it is used
func (m *UserGroupWrite) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedEpochMillis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGroupWrite) contextValidateCreatedEpochMillis(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdEpochMillis", "body", int64(m.CreatedEpochMillis)); err != nil {
		return err
	}

	return nil
}

func (m *UserGroupWrite) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "customer", "body", string(m.Customer)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserGroupWrite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserGroupWrite) UnmarshalBinary(b []byte) error {
	var res UserGroupWrite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
