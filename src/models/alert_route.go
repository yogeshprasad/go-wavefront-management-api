// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertRoute Wavefront alert route entity
//
// swagger:model AlertRoute
type AlertRoute struct {

	// String that filters the route. Space delimited. Currently only allows single key value pair.  filter: env* prod*
	// Required: true
	Filter *string `json:"filter"`

	// The end point for the alert route.EMAIL: email address.  PAGERDUTY: PagerDuty routing Key.  WEBHOOK: URL end point
	// Required: true
	// Enum: [WEBHOOK PAGERDUTY EMAIL]
	Method *string `json:"method"`

	// The end point for the notification target.EMAIL: email address.  PAGERDUTY: PagerDuty routing Key.  WEBHOOK: URL end point
	// Required: true
	Target *string `json:"target"`
}

// Validate validates this alert route
func (m *AlertRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AlertRoute) validateFilter(formats strfmt.Registry) error {

	if err := validate.Required("filter", "body", m.Filter); err != nil {
		return err
	}

	return nil
}

var alertRouteTypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WEBHOOK","PAGERDUTY","EMAIL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertRouteTypeMethodPropEnum = append(alertRouteTypeMethodPropEnum, v)
	}
}

const (

	// AlertRouteMethodWEBHOOK captures enum value "WEBHOOK"
	AlertRouteMethodWEBHOOK string = "WEBHOOK"

	// AlertRouteMethodPAGERDUTY captures enum value "PAGERDUTY"
	AlertRouteMethodPAGERDUTY string = "PAGERDUTY"

	// AlertRouteMethodEMAIL captures enum value "EMAIL"
	AlertRouteMethodEMAIL string = "EMAIL"
)

// prop value enum
func (m *AlertRoute) validateMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, alertRouteTypeMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AlertRoute) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	// value enum
	if err := m.validateMethodEnum("method", "body", *m.Method); err != nil {
		return err
	}

	return nil
}

func (m *AlertRoute) validateTarget(formats strfmt.Registry) error {

	if err := validate.Required("target", "body", m.Target); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this alert route based on context it is used
func (m *AlertRoute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AlertRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertRoute) UnmarshalBinary(b []byte) error {
	var res AlertRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
