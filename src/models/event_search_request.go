// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventSearchRequest event search request
//
// swagger:model EventSearchRequest
type EventSearchRequest struct {

	// The id (exclusive) from which search results resume returning.  Users should supply an entity 'id' to this property.  Its main purpose is to resume where a previous search left off because of the 'limit' parameter.  If a user supplies the last id in a set of results to cursor, while keeping the query the same, the system will return the next page of results
	Cursor string `json:"cursor,omitempty"`

	// The number of results to return.  Default: 100
	// Example: 100
	Limit int32 `json:"limit,omitempty"`

	// A list of queries by which to limit the search results
	Query []*SearchQuery `json:"query"`

	// related event time range
	RelatedEventTimeRange *RelatedEventTimeRange `json:"relatedEventTimeRange,omitempty"`

	// Whether to sort events on similarity score : {NONE, SCORE_ASC, SCORE_DES}. Default: NONE. If sortScoreMethod is set to SCORE_ASC or SCORE_DES, it will override time sort
	// Enum: [SCORE_ASC SCORE_DES NONE]
	SortScoreMethod string `json:"sortScoreMethod,omitempty"`

	// Whether to sort event results ascending in start time.  Default: false
	SortTimeAscending bool `json:"sortTimeAscending,omitempty"`

	// time range
	TimeRange *EventTimeRange `json:"timeRange,omitempty"`
}

// Validate validates this event search request
func (m *EventSearchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedEventTimeRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortScoreMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeRange(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventSearchRequest) validateQuery(formats strfmt.Registry) error {
	if swag.IsZero(m.Query) { // not required
		return nil
	}

	for i := 0; i < len(m.Query); i++ {
		if swag.IsZero(m.Query[i]) { // not required
			continue
		}

		if m.Query[i] != nil {
			if err := m.Query[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("query" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("query" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EventSearchRequest) validateRelatedEventTimeRange(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedEventTimeRange) { // not required
		return nil
	}

	if m.RelatedEventTimeRange != nil {
		if err := m.RelatedEventTimeRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedEventTimeRange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relatedEventTimeRange")
			}
			return err
		}
	}

	return nil
}

var eventSearchRequestTypeSortScoreMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SCORE_ASC","SCORE_DES","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventSearchRequestTypeSortScoreMethodPropEnum = append(eventSearchRequestTypeSortScoreMethodPropEnum, v)
	}
}

const (

	// EventSearchRequestSortScoreMethodSCOREASC captures enum value "SCORE_ASC"
	EventSearchRequestSortScoreMethodSCOREASC string = "SCORE_ASC"

	// EventSearchRequestSortScoreMethodSCOREDES captures enum value "SCORE_DES"
	EventSearchRequestSortScoreMethodSCOREDES string = "SCORE_DES"

	// EventSearchRequestSortScoreMethodNONE captures enum value "NONE"
	EventSearchRequestSortScoreMethodNONE string = "NONE"
)

// prop value enum
func (m *EventSearchRequest) validateSortScoreMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, eventSearchRequestTypeSortScoreMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EventSearchRequest) validateSortScoreMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.SortScoreMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateSortScoreMethodEnum("sortScoreMethod", "body", m.SortScoreMethod); err != nil {
		return err
	}

	return nil
}

func (m *EventSearchRequest) validateTimeRange(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeRange) { // not required
		return nil
	}

	if m.TimeRange != nil {
		if err := m.TimeRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeRange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeRange")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this event search request based on the context it is used
func (m *EventSearchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateQuery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelatedEventTimeRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventSearchRequest) contextValidateQuery(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Query); i++ {

		if m.Query[i] != nil {
			if err := m.Query[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("query" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("query" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *EventSearchRequest) contextValidateRelatedEventTimeRange(ctx context.Context, formats strfmt.Registry) error {

	if m.RelatedEventTimeRange != nil {
		if err := m.RelatedEventTimeRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("relatedEventTimeRange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("relatedEventTimeRange")
			}
			return err
		}
	}

	return nil
}

func (m *EventSearchRequest) contextValidateTimeRange(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeRange != nil {
		if err := m.TimeRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeRange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeRange")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventSearchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventSearchRequest) UnmarshalBinary(b []byte) error {
	var res EventSearchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
