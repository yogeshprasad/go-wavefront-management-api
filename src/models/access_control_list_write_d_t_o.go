// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccessControlListWriteDTO access control list write d t o
//
// swagger:model AccessControlListWriteDTO
type AccessControlListWriteDTO struct {

	// The entity Id
	EntityID string `json:"entityId,omitempty"`

	// List of users and user groups ids that have modify permission
	// Unique: true
	ModifyACL []string `json:"modifyAcl"`

	// List of users and user group ids that have view permission
	// Unique: true
	ViewACL []string `json:"viewAcl"`
}

// Validate validates this access control list write d t o
func (m *AccessControlListWriteDTO) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModifyACL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewACL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessControlListWriteDTO) validateModifyACL(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifyACL) { // not required
		return nil
	}

	if err := validate.UniqueItems("modifyAcl", "body", m.ModifyACL); err != nil {
		return err
	}

	return nil
}

func (m *AccessControlListWriteDTO) validateViewACL(formats strfmt.Registry) error {
	if swag.IsZero(m.ViewACL) { // not required
		return nil
	}

	if err := validate.UniqueItems("viewAcl", "body", m.ViewACL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this access control list write d t o based on context it is used
func (m *AccessControlListWriteDTO) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AccessControlListWriteDTO) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessControlListWriteDTO) UnmarshalBinary(b []byte) error {
	var res AccessControlListWriteDTO
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
