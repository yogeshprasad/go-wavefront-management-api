// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QueryResult query result
//
// swagger:model QueryResult
type QueryResult struct {

	// List of all dimension tuple results
	Dimensions []*TupleResult `json:"dimensions"`

	// Error message, if query execution did not finish successfully
	ErrorMessage string `json:"errorMessage,omitempty"`

	// Error type, if query execution did not finish successfully
	// Enum: [N/A QuerySyntaxError QueryExecutionError Timeout]
	ErrorType string `json:"errorType,omitempty"`

	// events
	Events []*QueryEvent `json:"events"`

	// The granularity of the returned results, in seconds
	Granularity int64 `json:"granularity,omitempty"`

	// The name of this query
	Name string `json:"name,omitempty"`

	// The query used to obtain this result
	Query string `json:"query,omitempty"`

	// spans
	Spans []*Span `json:"spans"`

	// stats
	Stats *StatsModelInternalUse `json:"stats,omitempty"`

	// timeseries
	Timeseries []*Timeseries `json:"timeseries"`

	// List of all tracing tuple results
	TraceDimensions []*TupleResult `json:"traceDimensions"`

	// traces
	Traces []*Trace `json:"traces"`

	// The warnings incurred by this query
	Warnings string `json:"warnings,omitempty"`
}

// Validate validates this query result
func (m *QueryResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpans(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeseries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraceDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTraces(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryResult) validateDimensions(formats strfmt.Registry) error {
	if swag.IsZero(m.Dimensions) { // not required
		return nil
	}

	for i := 0; i < len(m.Dimensions); i++ {
		if swag.IsZero(m.Dimensions[i]) { // not required
			continue
		}

		if m.Dimensions[i] != nil {
			if err := m.Dimensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dimensions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dimensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var queryResultTypeErrorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["N/A","QuerySyntaxError","QueryExecutionError","Timeout"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		queryResultTypeErrorTypePropEnum = append(queryResultTypeErrorTypePropEnum, v)
	}
}

const (

	// QueryResultErrorTypeNA captures enum value "N/A"
	QueryResultErrorTypeNA string = "N/A"

	// QueryResultErrorTypeQuerySyntaxError captures enum value "QuerySyntaxError"
	QueryResultErrorTypeQuerySyntaxError string = "QuerySyntaxError"

	// QueryResultErrorTypeQueryExecutionError captures enum value "QueryExecutionError"
	QueryResultErrorTypeQueryExecutionError string = "QueryExecutionError"

	// QueryResultErrorTypeTimeout captures enum value "Timeout"
	QueryResultErrorTypeTimeout string = "Timeout"
)

// prop value enum
func (m *QueryResult) validateErrorTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, queryResultTypeErrorTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QueryResult) validateErrorType(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorTypeEnum("errorType", "body", m.ErrorType); err != nil {
		return err
	}

	return nil
}

func (m *QueryResult) validateEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {
		if swag.IsZero(m.Events[i]) { // not required
			continue
		}

		if m.Events[i] != nil {
			if err := m.Events[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QueryResult) validateSpans(formats strfmt.Registry) error {
	if swag.IsZero(m.Spans) { // not required
		return nil
	}

	for i := 0; i < len(m.Spans); i++ {
		if swag.IsZero(m.Spans[i]) { // not required
			continue
		}

		if m.Spans[i] != nil {
			if err := m.Spans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("spans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("spans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QueryResult) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *QueryResult) validateTimeseries(formats strfmt.Registry) error {
	if swag.IsZero(m.Timeseries) { // not required
		return nil
	}

	for i := 0; i < len(m.Timeseries); i++ {
		if swag.IsZero(m.Timeseries[i]) { // not required
			continue
		}

		if m.Timeseries[i] != nil {
			if err := m.Timeseries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeseries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeseries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QueryResult) validateTraceDimensions(formats strfmt.Registry) error {
	if swag.IsZero(m.TraceDimensions) { // not required
		return nil
	}

	for i := 0; i < len(m.TraceDimensions); i++ {
		if swag.IsZero(m.TraceDimensions[i]) { // not required
			continue
		}

		if m.TraceDimensions[i] != nil {
			if err := m.TraceDimensions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traceDimensions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("traceDimensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QueryResult) validateTraces(formats strfmt.Registry) error {
	if swag.IsZero(m.Traces) { // not required
		return nil
	}

	for i := 0; i < len(m.Traces); i++ {
		if swag.IsZero(m.Traces[i]) { // not required
			continue
		}

		if m.Traces[i] != nil {
			if err := m.Traces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("traces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this query result based on the context it is used
func (m *QueryResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeseries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTraceDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTraces(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QueryResult) contextValidateDimensions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Dimensions); i++ {

		if m.Dimensions[i] != nil {
			if err := m.Dimensions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("dimensions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("dimensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QueryResult) contextValidateEvents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Events); i++ {

		if m.Events[i] != nil {
			if err := m.Events[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("events" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("events" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QueryResult) contextValidateSpans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Spans); i++ {

		if m.Spans[i] != nil {
			if err := m.Spans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("spans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("spans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QueryResult) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {
		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *QueryResult) contextValidateTimeseries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Timeseries); i++ {

		if m.Timeseries[i] != nil {
			if err := m.Timeseries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timeseries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timeseries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QueryResult) contextValidateTraceDimensions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TraceDimensions); i++ {

		if m.TraceDimensions[i] != nil {
			if err := m.TraceDimensions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traceDimensions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("traceDimensions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *QueryResult) contextValidateTraces(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Traces); i++ {

		if m.Traces[i] != nil {
			if err := m.Traces[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("traces" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("traces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *QueryResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QueryResult) UnmarshalBinary(b []byte) error {
	var res QueryResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
