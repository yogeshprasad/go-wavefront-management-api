// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchQuery search query
//
// swagger:model SearchQuery
type SearchQuery struct {

	// The end point of the range. At least one of start or end points should be available for range search.
	End int64 `json:"end,omitempty"`

	// The entity facet (key) by which to search.  Valid keys are any property keys returned by the JSON representation of the entity.  Examples are 'creatorId', 'name', etc.  The following special key keywords are also valid:  'tags' performs a search on entity tags, 'tagpath' performs a hierarchical search on tags, with  periods (.) as path level separators.  'freetext' performs a free text search across many fields of the entity
	// Required: true
	Key *string `json:"key"`

	// The method by which search matching is performed.  Default: CONTAINS
	// Enum: [CONTAINS STARTSWITH EXACT TAGPATH]
	MatchingMethod string `json:"matchingMethod,omitempty"`

	// The flag to create a NOT operation. Default: false
	// Example: false
	// Enum: [true false]
	Negated bool `json:"negated,omitempty"`

	// The start point of the range. At least one of start or end points should be available for range search.
	Start int64 `json:"start,omitempty"`

	// The entity facet value for which to search. Either value or values field is required. If both are set, values takes precedence.
	Value string `json:"value,omitempty"`

	// The entity facet values for which to search based on OR operation. Either value or values field is required. If both are set, values takes precedence.
	Values []string `json:"values"`
}

// Validate validates this search query
func (m *SearchQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchingMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNegated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchQuery) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

var searchQueryTypeMatchingMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONTAINS","STARTSWITH","EXACT","TAGPATH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchQueryTypeMatchingMethodPropEnum = append(searchQueryTypeMatchingMethodPropEnum, v)
	}
}

const (

	// SearchQueryMatchingMethodCONTAINS captures enum value "CONTAINS"
	SearchQueryMatchingMethodCONTAINS string = "CONTAINS"

	// SearchQueryMatchingMethodSTARTSWITH captures enum value "STARTSWITH"
	SearchQueryMatchingMethodSTARTSWITH string = "STARTSWITH"

	// SearchQueryMatchingMethodEXACT captures enum value "EXACT"
	SearchQueryMatchingMethodEXACT string = "EXACT"

	// SearchQueryMatchingMethodTAGPATH captures enum value "TAGPATH"
	SearchQueryMatchingMethodTAGPATH string = "TAGPATH"
)

// prop value enum
func (m *SearchQuery) validateMatchingMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchQueryTypeMatchingMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchQuery) validateMatchingMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchingMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateMatchingMethodEnum("matchingMethod", "body", m.MatchingMethod); err != nil {
		return err
	}

	return nil
}

var searchQueryTypeNegatedPropEnum []interface{}

func init() {
	var res []bool
	if err := json.Unmarshal([]byte(`[true,false]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchQueryTypeNegatedPropEnum = append(searchQueryTypeNegatedPropEnum, v)
	}
}

// prop value enum
func (m *SearchQuery) validateNegatedEnum(path, location string, value bool) error {
	if err := validate.EnumCase(path, location, value, searchQueryTypeNegatedPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchQuery) validateNegated(formats strfmt.Registry) error {
	if swag.IsZero(m.Negated) { // not required
		return nil
	}

	// value enum
	if err := m.validateNegatedEnum("negated", "body", m.Negated); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search query based on context it is used
func (m *SearchQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchQuery) UnmarshalBinary(b []byte) error {
	var res SearchQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
