// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResponseStatus response status
//
// swagger:model ResponseStatus
type ResponseStatus struct {

	// HTTP Response code corresponding to this response
	// Required: true
	Code *int64 `json:"code"`

	// Descriptive message of the status of this response
	Message string `json:"message,omitempty"`

	// result
	// Required: true
	// Enum: [OK ERROR]
	Result *string `json:"result"`
}

// Validate validates this response status
func (m *ResponseStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResponseStatus) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

var responseStatusTypeResultPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		responseStatusTypeResultPropEnum = append(responseStatusTypeResultPropEnum, v)
	}
}

const (

	// ResponseStatusResultOK captures enum value "OK"
	ResponseStatusResultOK string = "OK"

	// ResponseStatusResultERROR captures enum value "ERROR"
	ResponseStatusResultERROR string = "ERROR"
)

// prop value enum
func (m *ResponseStatus) validateResultEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, responseStatusTypeResultPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResponseStatus) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	// value enum
	if err := m.validateResultEnum("result", "body", *m.Result); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this response status based on context it is used
func (m *ResponseStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResponseStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResponseStatus) UnmarshalBinary(b []byte) error {
	var res ResponseStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
