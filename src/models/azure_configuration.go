// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AzureConfiguration Configurations specific to the Azure integration. Only applicable when the containing Credential has service=AZURE
//
// swagger:model AzureConfiguration
type AzureConfiguration struct {

	// base credentials
	BaseCredentials *AzureBaseCredentials `json:"baseCredentials,omitempty"`

	// A list of Azure services (such as Microsoft.Compute/virtualMachines, Microsoft.Cache/redis etc) from which to pull metrics.
	CategoryFilter []string `json:"categoryFilter"`

	// A regular expression that a metric name must match (case-insensitively) in order to be ingested
	// Example: ^azure.(compute|network|dbforpostgresql).*$
	MetricFilterRegex string `json:"metricFilterRegex,omitempty"`

	// A list of Azure resource groups from which to pull metrics.
	ResourceGroupFilter []string `json:"resourceGroupFilter"`
}

// Validate validates this azure configuration
func (m *AzureConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureConfiguration) validateBaseCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseCredentials) { // not required
		return nil
	}

	if m.BaseCredentials != nil {
		if err := m.BaseCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this azure configuration based on the context it is used
func (m *AzureConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureConfiguration) contextValidateBaseCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseCredentials != nil {
		if err := m.BaseCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureConfiguration) UnmarshalBinary(b []byte) error {
	var res AzureConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
