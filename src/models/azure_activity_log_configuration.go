// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureActivityLogConfiguration Configurations specific to the Azure activity logs integration. Only applicable when the containing Credential has service=AZUREACTIVITYLOG
//
// swagger:model AzureActivityLogConfiguration
type AzureActivityLogConfiguration struct {

	// base credentials
	BaseCredentials *AzureBaseCredentials `json:"baseCredentials,omitempty"`

	// A list of Azure ActivityLog categories to pull events for.Allowable values are ADMINISTRATIVE, SERVICEHEALTH, ALERT, AUTOSCALE, SECURITY
	CategoryFilter []string `json:"categoryFilter"`
}

// Validate validates this azure activity log configuration
func (m *AzureActivityLogConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategoryFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureActivityLogConfiguration) validateBaseCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseCredentials) { // not required
		return nil
	}

	if m.BaseCredentials != nil {
		if err := m.BaseCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseCredentials")
			}
			return err
		}
	}

	return nil
}

var azureActivityLogConfigurationCategoryFilterItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ADMINISTRATIVE","SERVICEHEALTH","ALERT","AUTOSCALE","SECURITY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azureActivityLogConfigurationCategoryFilterItemsEnum = append(azureActivityLogConfigurationCategoryFilterItemsEnum, v)
	}
}

func (m *AzureActivityLogConfiguration) validateCategoryFilterItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azureActivityLogConfigurationCategoryFilterItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzureActivityLogConfiguration) validateCategoryFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.CategoryFilter) { // not required
		return nil
	}

	for i := 0; i < len(m.CategoryFilter); i++ {

		// value enum
		if err := m.validateCategoryFilterItemsEnum("categoryFilter"+"."+strconv.Itoa(i), "body", m.CategoryFilter[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validate this azure activity log configuration based on the context it is used
func (m *AzureActivityLogConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureActivityLogConfiguration) contextValidateBaseCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseCredentials != nil {
		if err := m.BaseCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureActivityLogConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureActivityLogConfiguration) UnmarshalBinary(b []byte) error {
	var res AzureActivityLogConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
