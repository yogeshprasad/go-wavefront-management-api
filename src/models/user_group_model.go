// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserGroupModel Wavefront user group entity
//
// swagger:model UserGroupModel
type UserGroupModel struct {

	// created epoch millis
	// Read Only: true
	CreatedEpochMillis int64 `json:"createdEpochMillis,omitempty"`

	// The id of the customer to which the user group belongs
	// Read Only: true
	Customer string `json:"customer,omitempty"`

	// The description of the user group
	Description string `json:"description,omitempty"`

	// The unique identifier of the user group
	ID string `json:"id,omitempty"`

	// Ingestion policies linked with the user group
	IngestionPolicies []*IngestionPolicyReadModel `json:"ingestionPolicies"`

	// The name of the user group
	// Required: true
	Name *string `json:"name"`

	// The properties of the user group(name editable, users editable, etc.)
	// Read Only: true
	Properties *UserGroupPropertiesDTO `json:"properties,omitempty"`

	// Total number of roles that are linked the the user group
	// Read Only: true
	RoleCount int32 `json:"roleCount,omitempty"`

	// List of roles that are linked to the user group.
	// Read Only: true
	Roles []*RoleDTO `json:"roles"`

	// Total number of users that are members of the user group
	// Read Only: true
	UserCount int32 `json:"userCount,omitempty"`

	// List(may be incomplete) of users that are members of the user group.
	// Read Only: true
	Users []string `json:"users"`
}

// Validate validates this user group model
func (m *UserGroupModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIngestionPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGroupModel) validateIngestionPolicies(formats strfmt.Registry) error {
	if swag.IsZero(m.IngestionPolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.IngestionPolicies); i++ {
		if swag.IsZero(m.IngestionPolicies[i]) { // not required
			continue
		}

		if m.IngestionPolicies[i] != nil {
			if err := m.IngestionPolicies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingestionPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ingestionPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserGroupModel) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *UserGroupModel) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if m.Properties != nil {
		if err := m.Properties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *UserGroupModel) validateRoles(formats strfmt.Registry) error {
	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this user group model based on the context it is used
func (m *UserGroupModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedEpochMillis(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIngestionPolicies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoleCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUserCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserGroupModel) contextValidateCreatedEpochMillis(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdEpochMillis", "body", int64(m.CreatedEpochMillis)); err != nil {
		return err
	}

	return nil
}

func (m *UserGroupModel) contextValidateCustomer(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "customer", "body", string(m.Customer)); err != nil {
		return err
	}

	return nil
}

func (m *UserGroupModel) contextValidateIngestionPolicies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IngestionPolicies); i++ {

		if m.IngestionPolicies[i] != nil {
			if err := m.IngestionPolicies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ingestionPolicies" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ingestionPolicies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserGroupModel) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	if m.Properties != nil {
		if err := m.Properties.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("properties")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("properties")
			}
			return err
		}
	}

	return nil
}

func (m *UserGroupModel) contextValidateRoleCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "roleCount", "body", int32(m.RoleCount)); err != nil {
		return err
	}

	return nil
}

func (m *UserGroupModel) contextValidateRoles(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "roles", "body", []*RoleDTO(m.Roles)); err != nil {
		return err
	}

	for i := 0; i < len(m.Roles); i++ {

		if m.Roles[i] != nil {
			if err := m.Roles[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UserGroupModel) contextValidateUserCount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "userCount", "body", int32(m.UserCount)); err != nil {
		return err
	}

	return nil
}

func (m *UserGroupModel) contextValidateUsers(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "users", "body", []string(m.Users)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserGroupModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserGroupModel) UnmarshalBinary(b []byte) error {
	var res UserGroupModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
